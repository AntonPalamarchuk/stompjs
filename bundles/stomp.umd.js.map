{"version":3,"sources":["webpack://StompJs/webpack/universalModuleDefinition","webpack://StompJs/webpack/bootstrap","webpack://StompJs/./src/byte.ts","webpack://StompJs/./src/client.ts","webpack://StompJs/./src/compatibility/compat-client.ts","webpack://StompJs/./src/compatibility/stomp.ts","webpack://StompJs/./src/frame.ts","webpack://StompJs/./src/index.ts","webpack://StompJs/./src/versions.ts"],"names":[],"mappings":"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","file":"stomp.umd.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"StompJs\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"StompJs\"] = factory();\n\telse\n\t\troot[\"StompJs\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","/**\n * Some byte values, used as per STOMP specifications.\n *\n * @internal\n */\nexport const Byte = {\n  // LINEFEED byte (octet 10)\n  LF: '\\x0A',\n  // NULL byte (octet 0)\n  NULL: '\\x00'\n};\n","import {Frame} from \"./frame\";\nimport {Stomp} from \"./compatibility/stomp\";\nimport {Byte} from \"./byte\";\nimport {StompHeaders} from \"./stomp-headers\";\nimport {Message} from \"./message\";\nimport {StompSubscription} from \"./stomp-subscription\";\nimport {Transaction} from \"./transaction\";\nimport {Versions} from \"./versions\";\nimport {frameCallbackType, messageCallbackType} from \"./types\";\nimport {StompConfig} from \"./stomp-config\";\n\n/**\n * STOMP Client Class.\n */\nexport class Client {\n  /**\n   * This function should return a WebSocket or a similar (e.g. SockJS) object.\n   */\n  public webSocketFactory: () => any;\n\n  /**\n   *  automatically reconnect with delay in milliseconds, set to 0 to disable\n   */\n  public reconnectDelay: number = 5000;\n\n  /**\n   * Incoming heartbeat interval in milliseconds. Set to 0 to disable\n   */\n  public heartbeatIncoming: number = 10000;\n\n  /**\n   * Outgoing heartbeat interval in milliseconds. Set to 0 to disable\n   */\n  public heartbeatOutgoing: number = 10000;\n\n  // public heartbeat: { outgoing: number; incoming: number };\n\n  /**\n   * Maximum WebSocket frame size sent by the client. If the STOMP frame\n   * is bigger than this value, the STOMP frame will be sent using multiple\n   * WebSocket frames (default is 16KiB)\n   */\n  public maxWebSocketFrameSize: number = 16 * 1024;\n\n  /**\n   * Underlying WebSocket instance, READONLY\n   */\n  get webSocket(): any {\n    return this._webSocket;\n  }\n  /**\n   * Underlying WebSocket instance\n   * @internal\n   */\n  protected _webSocket: any;\n\n  /**\n   * Connection headers, important keys - `login`, `passcode`, `host`\n   */\n  public connectHeaders: StompHeaders;\n\n  /**\n   * Disconnection headers\n   */\n  public disconnectHeaders: StompHeaders;\n\n  /**\n   * This function will be called for any unhandled messages. It is useful to receive messages sent to\n   * temporary queues (for example RabbitMQ supports such queues).\n   *\n   * It can also be called for stray messages while the server is processing a request to unsubcribe\n   * from an endpoint.\n   */\n  public onUnhandledMessage: messageCallbackType;\n\n  /**\n   * STOMP brokers can be requested to notify when an operation is actually completed.\n   *\n   * TODO: add example\n   */\n  public onReceipt: frameCallbackType;\n\n  /**\n   * `true` if there is a active connection with STOMP Broker\n   */\n  get connected(): boolean {\n    return this._connected;\n  }\n  private _connected: boolean;\n\n  /**\n   * Callback\n   */\n  public onConnect: frameCallbackType;\n\n  /**\n   * Callback\n   */\n  public onDisconnect: frameCallbackType;\n\n  /**\n   * Callback\n   */\n  public onStompError: any;\n\n  /**\n   * Callback\n   */\n  public onWebSocketClose: any;\n\n  /**\n   * By default, debug messages are discarded. To log to `console` following can be used:\n   *\n   * ```javascript\n   *        client.debug = function(str) {\n   *          console.log(str);\n   *        };\n   * ```\n   *\n   * This method is called for every actual transmission of the STOMP frames over the\n   * WebSocket.\n   */\n  public debug: (...message: any[]) => void = (...message: any[]) => {};\n\n  /**\n   * version of STOMP protocol negotiated with the server, READONLY\n   */\n  get version(): string {\n    return this._version;\n  }\n  private _version: string;\n\n  private _subscriptions: { [key: string]: messageCallbackType };\n  private _partialData: string;\n  private _escapeHeaderValues: boolean;\n  private _counter: number;\n  private _pinger: any;\n  private _ponger: any;\n  private _lastServerActivityTS: number;\n  private _active: boolean = false;\n  private _closeReceipt: string;\n  private _reconnector: any;\n\n  /**\n   * Please do not create instance of this class directly, use one of the methods [Stomp.client]{@link Stomp#client},\n   * [Stomp.over]{@link Stomp#over} in {@link Stomp}.\n   */\n  constructor(conf: StompConfig = {}) {\n    // Dummy callbacks\n    const noOp = () => {};\n    this.onConnect = noOp;\n    this.onDisconnect = noOp;\n    this.onUnhandledMessage = noOp;\n    this.onReceipt = noOp;\n\n    // These parameters would typically get proper values before connect is called\n    this.connectHeaders = {};\n    this.disconnectHeaders = {};\n    this.webSocketFactory = () => null;\n\n    // Internal fields\n\n    // used to index subscribers\n    this._counter = 0;\n\n    // current connection state\n    this._connected = false;\n\n    // subscription callbacks indexed by subscriber's ID\n    this._subscriptions = {};\n\n    this._partialData = '';\n\n    this._closeReceipt = '';\n\n    this._version  = '';\n\n    this._escapeHeaderValues = false;\n\n    this._lastServerActivityTS = Date.now();\n\n    // Apply configuration\n    this.configure(conf);\n  }\n\n  /**\n   * Update configuration. See {@link StompConfig} for details of configuration options.\n   */\n  public configure(conf: StompConfig): void {\n    // bulk assign all properties to this\n    (<any>Object).assign(this, conf);\n  }\n\n  private _transmit(command: string, headers: StompHeaders, body: string = ''): void {\n    let out = Frame.marshall(command, headers, body, this._escapeHeaderValues);\n    this.debug(`>>> ${out}`);\n    // if necessary, split the *STOMP* frame to send it on many smaller\n    // *WebSocket* frames\n    while (true) {\n      if (out.length > this.maxWebSocketFrameSize) {\n        this._webSocket.send(out.substring(0, this.maxWebSocketFrameSize));\n        out = out.substring(this.maxWebSocketFrameSize);\n        this.debug(`remaining = ${out.length}`);\n      } else {\n        this._webSocket.send(out);\n        return;\n      }\n    }\n  }\n\n  private _setupHeartbeat(headers: StompHeaders): void {\n    let ttl: number;\n    if ((headers.version !== Versions.V1_1 && headers.version !== Versions.V1_2)) {\n      return;\n    }\n\n    // heart-beat header received from the server looks like:\n    //\n    //     heart-beat: sx, sy\n    const [serverOutgoing, serverIncoming] = (<string>headers['heart-beat']).split(\",\").map((v: string) => parseInt(v));\n\n    if ((this.heartbeatOutgoing !== 0) && (serverIncoming !== 0)) {\n      ttl = Math.max(this.heartbeatOutgoing, serverIncoming);\n      this.debug(`send PING every ${ttl}ms`);\n      this._pinger = setInterval(() => {\n        this._webSocket.send(Byte.LF);\n        this.debug(\">>> PING\");\n      }, ttl);\n    }\n\n    if ((this.heartbeatIncoming !== 0) && (serverOutgoing !== 0)) {\n      ttl = Math.max(this.heartbeatIncoming, serverOutgoing);\n      this.debug(`check PONG every ${ttl}ms`);\n      this._ponger = setInterval(() => {\n        const delta = Date.now() - this._lastServerActivityTS;\n        // We wait twice the TTL to be flexible on window's setInterval calls\n        if (delta > (ttl * 2)) {\n          this.debug(`did not receive server activity for the last ${delta}ms`);\n          this._webSocket.close();\n        }\n      }, ttl);\n    }\n  }\n\n  /**\n   * The `connect` method accepts different number of arguments and types. See the Overloads list. Use the\n   * version with headers to pass your broker specific options.\n   *\n   * ```javascript\n   *        client.connect('guest, 'guest', function(frame) {\n   *          client.debug(\"connected to Stomp\");\n   *          client.subscribe(destination, function(message) {\n   *            $(\"#messages\").append(\"<p>\" + message.body + \"</p>\\n\");\n   *          });\n   *        });\n   * ```\n   *\n   * @note When auto reconnect is active, `connectCallback` and `errorCallback` will be called on each connect or error\n   *\n   * @see http:*stomp.github.com/stomp-specification-1.2.html#CONNECT_or_STOMP_Frame CONNECT Frame\n   */\n  public connect(): void {\n    this._escapeHeaderValues = false;\n\n    // Indicate that this connection is active (it will keep trying to connect)\n    this._active = true;\n\n    this._connect();\n  }\n\n  private _connect(): void {\n    if (!this._active) {\n      this.debug('Client has been marked inactive, will not attempt to connect');\n      return;\n    }\n\n    this.debug(\"Opening Web Socket...\");\n\n    // Get the actual Websocket (or a similar object)\n    this._webSocket = this._createWebSocket();\n\n    this._webSocket.onmessage = (evt: any) => {\n      this.debug('Received data');\n      const data = (() => {\n        if ((typeof(ArrayBuffer) !== 'undefined') && evt.data instanceof ArrayBuffer) {\n          // the data is stored inside an ArrayBuffer, we decode it to get the\n          // data as a String\n          const arr = new Uint8Array(evt.data);\n          this.debug(`--- got data length: ${arr.length}`);\n          // Return a string formed by all the char codes stored in the Uint8array\n          let j, len1, results;\n          results = [];\n          for (j = 0, len1 = arr.length; j < len1; j++) {\n            const c = arr[j];\n            results.push(String.fromCharCode(c));\n          }\n\n          return results.join('');\n        } else {\n          // take the data directly from the WebSocket `data` field\n          return evt.data;\n        }\n      })();\n      this.debug(data);\n      this._lastServerActivityTS = Date.now();\n      if (data === Byte.LF) { // heartbeat\n        this.debug(\"<<< PONG\");\n        return;\n      }\n      this.debug(`<<< ${data}`);\n      // Handle STOMP frames received from the server\n      // The unmarshall function returns the frames parsed and any remaining\n      // data from partial frames.\n      const unmarshalledData = Frame.unmarshall(this._partialData + data, this._escapeHeaderValues);\n      this._partialData = unmarshalledData.partial;\n      for (let frame of unmarshalledData.frames) {\n        switch (frame.command) {\n          // [CONNECTED Frame](http://stomp.github.com/stomp-specification-1.2.html#CONNECTED_Frame)\n          case \"CONNECTED\":\n            this.debug(`connected to server ${frame.headers.server}`);\n            this._connected = true;\n            this._version = <string>frame.headers.version;\n            // STOMP version 1.2 needs header values to be escaped\n            if (this._version === Versions.V1_2) {\n              this._escapeHeaderValues = true;\n            }\n\n            // If a disconnect was requested while I was connecting, issue a disconnect\n            if (!this._active) {\n              this.disconnect();\n              return;\n            }\n\n            this._setupHeartbeat(frame.headers);\n            if (typeof this.onConnect === 'function') {\n              this.onConnect(frame);\n            }\n            break;\n          // [MESSAGE Frame](http://stomp.github.com/stomp-specification-1.2.html#MESSAGE)\n          case \"MESSAGE\":\n            // the `onreceive` callback is registered when the client calls\n            // `subscribe()`.\n            // If there is registered subscription for the received message,\n            // we used the default `onreceive` method that the client can set.\n            // This is useful for subscriptions that are automatically created\n            // on the browser side (e.g. [RabbitMQ's temporary\n            // queues](http://www.rabbitmq.com/stomp.html)).\n            const subscription = <string>frame.headers.subscription;\n            const onreceive = this._subscriptions[subscription] || this.onUnhandledMessage;\n            // bless the frame to be a Message\n            const message = <Message>frame;\n            if (onreceive) {\n              let messageId: string;\n              const client = this;\n              if (this._version === Versions.V1_2) {\n                messageId = <string>message.headers[\"ack\"];\n              } else {\n                messageId = <string>message.headers[\"message-id\"];\n              }\n              // add `ack()` and `nack()` methods directly to the returned frame\n              // so that a simple call to `message.ack()` can acknowledge the message.\n              message.ack = (headers: StompHeaders = {}): void => {\n                return client.ack(messageId, subscription, headers);\n              };\n              message.nack = (headers: StompHeaders = {}): void => {\n                return client.nack(messageId, subscription, headers);\n              };\n              onreceive(message);\n            } else {\n              this.debug(`Unhandled received MESSAGE: ${message}`);\n            }\n            break;\n          // [RECEIPT Frame](http://stomp.github.com/stomp-specification-1.2.html#RECEIPT)\n          //\n          // The client instance can set its `onreceipt` field to a function taking\n          // a frame argument that will be called when a receipt is received from\n          // the server:\n          //\n          //     client.onreceipt = function(frame) {\n          //       receiptID = frame.headers['receipt-id'];\n          //       ...\n          //     }\n          case \"RECEIPT\":\n            // if this is the receipt for a DISCONNECT, close the websocket\n            if (frame.headers[\"receipt-id\"] === this._closeReceipt) {\n              // Discard the onclose callback to avoid calling the errorCallback when\n              // the client is properly disconnected.\n              this._webSocket.onclose = null;\n              this._webSocket.close();\n              this._cleanUp();\n              if (typeof this.onDisconnect === 'function') {\n                this.onDisconnect(frame);\n              }\n            } else {\n              if (typeof this.onReceipt === 'function') {\n                this.onReceipt(frame);\n              }\n            }\n            break;\n          // [ERROR Frame](http://stomp.github.com/stomp-specification-1.2.html#ERROR)\n          case \"ERROR\":\n            if (typeof this.onStompError === 'function') {\n              this.onStompError(frame);\n            }\n            break;\n          default:\n            this.debug(`Unhandled frame: ${frame}`);\n        }\n      }\n    };\n\n    this._webSocket.onclose = (closeEvent: any): void => {\n      const msg = `Whoops! Lost connection to ${this._webSocket.url}`;\n      this.debug(msg);\n      if (typeof this.onWebSocketClose === 'function') {\n        this.onWebSocketClose(closeEvent);\n      }\n      this._cleanUp();\n      if (typeof this.onStompError === 'function') {\n        this.onStompError(msg);\n      }\n      this._schedule_reconnect();\n    };\n\n    this._webSocket.onopen = () => {\n      this.debug('Web Socket Opened...');\n      this.connectHeaders[\"accept-version\"] = Versions.supportedVersions();\n      this.connectHeaders[\"heart-beat\"] = [this.heartbeatOutgoing, this.heartbeatIncoming].join(',');\n      this._transmit(\"CONNECT\", this.connectHeaders);\n    };\n  }\n\n  private _createWebSocket() {\n    const webSocket = this.webSocketFactory();\n    webSocket.binaryType = \"arraybuffer\";\n    return webSocket;\n  }\n\n  private _schedule_reconnect(): void {\n    if (this.reconnectDelay > 0) {\n      this.debug(`STOMP: scheduling reconnection in ${this.reconnectDelay}ms`);\n      // setTimeout is available in both Browser and Node.js environments\n      this._reconnector = setTimeout(() => {\n          if (this._connected) {\n            this.debug('STOMP: already connected')\n          } else {\n            this.debug('STOMP: attempting to reconnect');\n            this._connect();\n          }\n        }, this.reconnectDelay);\n    }\n  }\n\n  /**\n   * Disconnect from the STOMP broker. To ensure graceful shutdown it sends a DISCONNECT Frame\n   * and wait till the broker acknowledges.\n   *\n   * disconnectCallback will be called only if the broker was actually connected.\n   *\n   * @see http://stomp.github.com/stomp-specification-1.2.html#DISCONNECT DISCONNECT Frame\n   */\n  public disconnect(): void {\n    // indicate that auto reconnect loop should terminate\n    this._active = false;\n\n    if (this._connected) {\n      if (!this.disconnectHeaders['receipt']) {\n        this.disconnectHeaders['receipt'] = `close-${this._counter++}`;\n      }\n      this._closeReceipt = <string>this.disconnectHeaders['receipt'];\n      try {\n        this._transmit(\"DISCONNECT\", this.disconnectHeaders);\n      } catch (error) {\n        this.debug('Ignoring error during disconnect', error);\n      }\n    }\n  }\n\n  private _cleanUp(): void {\n    // Clear if a reconnection was scheduled\n    if (this._reconnector) {\n      clearTimeout(this._reconnector);\n    }\n\n    this._connected = false;\n    this._subscriptions = {};\n    if (this._pinger) {\n      clearInterval(this._pinger);\n    }\n    if (this._ponger) {\n      clearInterval(this._ponger);\n    }\n  }\n\n  /**\n   * Send a message to a named destination. Refer to your STOMP broker documentation for types\n   * and naming of destinations. The headers will, typically, be available to the subscriber.\n   * However, there may be special purpose headers corresponding to your STOMP broker.\n   *\n   * Note: Body must be String. You will need to covert the payload to string in case it is not string (e.g. JSON)\n   *\n   * ```javascript\n   *        client.send(\"/queue/test\", {priority: 9}, \"Hello, STOMP\");\n   *\n   *        // If you want to send a message with a body, you must also pass the headers argument.\n   *        client.send(\"/queue/test\", {}, \"Hello, STOMP\");\n   * ```\n   *\n   * @see http://stomp.github.com/stomp-specification-1.2.html#SEND SEND Frame\n   */\n  public send(destination: string, headers: StompHeaders = {}, body: string = ''): void {\n    headers.destination = destination;\n    this._transmit(\"SEND\", headers, body);\n  }\n\n  /**\n   * Subscribe to a STOMP Broker location. The callbck will be invoked for each received message with\n   * the {@link Message} as argument.\n   *\n   * Note: The library will generate an unique ID if there is none provided in the headers.\n   *       To use your own ID, pass it using the headers argument.\n   *\n   * ```javascript\n   *        callback = function(message) {\n   *        // called when the client receives a STOMP message from the server\n   *          if (message.body) {\n   *            alert(\"got message with body \" + message.body)\n   *          } else {\n   *            alert(\"got empty message\");\n   *          }\n   *        });\n   *\n   *        var subscription = client.subscribe(\"/queue/test\", callback);\n   *\n   *        // Explicit subscription id\n   *        var mySubId = 'my-subscription-id-001';\n   *        var subscription = client.subscribe(destination, callback, { id: mySubId });\n   * ```\n   *\n   * @see http://stomp.github.com/stomp-specification-1.2.html#SUBSCRIBE SUBSCRIBE Frame\n   */\n  public subscribe(destination: string, callback: messageCallbackType, headers: StompHeaders = {}): StompSubscription {\n    if (!headers.id) {\n      headers.id = `sub-${this._counter++}`;\n    }\n    headers.destination = destination;\n    this._subscriptions[<string>headers.id] = callback;\n    this._transmit(\"SUBSCRIBE\", headers);\n    const client = this;\n    return {\n      id: <string>headers.id,\n\n      unsubscribe(hdrs) {\n        return client.unsubscribe(<string>headers.id, hdrs);\n      }\n    };\n  }\n\n  /**\n   * It is preferable to unsubscribe from a subscription by calling\n   * `unsubscribe()` directly on {@link StompSubscription} returned by `client.subscribe()`:\n   *\n   * ```javascript\n   *        var subscription = client.subscribe(destination, onmessage);\n   *        // ...\n   *        subscription.unsubscribe();\n   * ```\n   *\n   * @see http://stomp.github.com/stomp-specification-1.2.html#UNSUBSCRIBE UNSUBSCRIBE Frame\n   */\n  public unsubscribe(id: string, headers: StompHeaders = {}): void {\n    if (headers == null) {\n      headers = {};\n    }\n    delete this._subscriptions[id];\n    headers.id = id;\n    this._transmit(\"UNSUBSCRIBE\", headers);\n  }\n\n  /**\n   * Start a transaction, the returned {@link Transaction} has methods - [commit]{@link Transaction#commit}\n   * and [abort]{@link Transaction#abort}.\n   *\n   * @see http://stomp.github.com/stomp-specification-1.2.html#BEGIN BEGIN Frame\n   */\n  public begin(transactionId: string): Transaction {\n    const txId = transactionId || (`tx-${this._counter++}`);\n    this._transmit(\"BEGIN\", {\n      transaction: txId\n    });\n    const client = this;\n    return {\n      id: txId,\n      commit(): void {\n        client.commit(txId);\n      },\n      abort(): void {\n        client.abort(txId);\n      }\n    };\n  }\n\n  /**\n   * Commit a transaction.\n   * It is preferable to commit a transaction by calling [commit]{@link Transaction#commit} directly on\n   * {@link Transaction} returned by [client.begin]{@link Client#begin}.\n   *\n   * ```javascript\n   *        var tx = client.begin(txId);\n   *        //...\n   *        tx.commit();\n   * ```\n   *\n   * @see http://stomp.github.com/stomp-specification-1.2.html#COMMIT COMMIT Frame\n   */\n  public commit(transactionId: string): void {\n    this._transmit(\"COMMIT\", {\n      transaction: transactionId\n    });\n  }\n\n  /**\n   * Abort a transaction.\n   * It is preferable to abort a transaction by calling [abort]{@link Transaction#abort} directly on\n   * {@link Transaction} returned by [client.begin]{@link Client#begin}.\n   *\n   * ```javascript\n   *        var tx = client.begin(txId);\n   *        //...\n   *        tx.abort();\n   * ```\n   *\n   * @see http://stomp.github.com/stomp-specification-1.2.html#ABORT ABORT Frame\n   */\n  public abort(transactionId: string): void {\n    this._transmit(\"ABORT\", {\n      transaction: transactionId\n    });\n  }\n\n  /**\n   * ACK a message. It is preferable to acknowledge a message by calling [ack]{@link Message#ack} directly\n   * on the {@link Message} handled by a subscription callback:\n   *\n   * ```javascript\n   *        var callback = function (message) {\n   *          // process the message\n   *          // acknowledge it\n   *          message.ack();\n   *        };\n   *        client.subscribe(destination, callback, {'ack': 'client'});\n   * ```\n   *\n   * @see http://stomp.github.com/stomp-specification-1.2.html#ACK ACK Frame\n   */\n  public ack(messageId: string, subscriptionId: string, headers: StompHeaders = {}): void {\n    if (this._version === Versions.V1_2) {\n      headers[\"id\"] = messageId;\n    } else {\n      headers[\"message-id\"] = messageId;\n    }\n    headers.subscription = subscriptionId;\n    this._transmit(\"ACK\", headers);\n  }\n\n  /**\n   * NACK a message. It is preferable to acknowledge a message by calling [nack]{@link Message#nack} directly\n   * on the {@link Message} handled by a subscription callback:\n   *\n   * ```javascript\n   *        var callback = function (message) {\n   *          // process the message\n   *          // an error occurs, nack it\n   *          message.nack();\n   *        };\n   *        client.subscribe(destination, callback, {'ack': 'client'});\n   * ```\n   *\n   * @see http://stomp.github.com/stomp-specification-1.2.html#NACK NACK Frame\n   */\n  public nack(messageId: string, subscriptionId: string, headers: StompHeaders = {}): void {\n    if (this._version === Versions.V1_2) {\n      headers[\"id\"] = messageId;\n    } else {\n      headers[\"message-id\"] = messageId;\n    }\n    headers.subscription = subscriptionId;\n    return this._transmit(\"NACK\", headers);\n  }\n}","import {Client} from \"../client\";\nimport {StompHeaders} from \"../stomp-headers\";\nimport {frameCallbackType, messageCallbackType} from \"../types\";\n\nexport class CompatClient extends Client {\n\n  constructor(webSocketFactory: () => any) {\n    super();\n    this.reconnect_delay = 0;\n    this.webSocketFactory = webSocketFactory;\n    // Default from previous version\n    this.debug = (...message: any[]) => {\n      console.log(...message);\n    };\n  }\n\n  private _parseConnect(...args: any[]): any {\n    let closeEventCallback, connectCallback, errorCallback;\n    let headers: StompHeaders = {};\n    if (args.length < 2) {\n      throw(\"Connect requires at least 2 arguments\");\n    }\n    if (typeof(args[1]) === 'function') {\n      [headers, connectCallback, errorCallback, closeEventCallback] = args;\n    } else {\n      switch (args.length) {\n        case 6:\n          [headers['login'], headers['passcode'], connectCallback, errorCallback, closeEventCallback, headers['host']] = args;\n          break;\n        default:\n          [headers['login'], headers['passcode'], connectCallback, errorCallback, closeEventCallback] = args;\n      }\n    }\n\n    return [headers, connectCallback, errorCallback, closeEventCallback];\n  }\n\n  /**\n   * The `connect` method accepts different number of arguments and types. See the Overloads list. Use the\n   * version with headers to pass your broker specific options.\n   *\n   * @overload connect(headers, connectCallback)\n   *\n   * @overload connect(headers, connectCallback, errorCallback)\n   *\n   * @overload connect(login, passcode, connectCallback)\n   *\n   * @overload connect(login, passcode, connectCallback, errorCallback)\n   *\n   * @overload connect(login, passcode, connectCallback, errorCallback, closeEventCallback)\n   *\n   * @overload connect(login, passcode, connectCallback, errorCallback, closeEventCallback, host)\n   *\n   * @param headers [Object]\n   * @option headers [String] login\n   * @option headers [String] passcode\n   * @option headers [String] host virtual host to connect to. STOMP 1.2 makes it mandatory, however the broker may not mandate it\n   * @param connectCallback [function(Frame)] Called upon a successful connect or reconnect\n   * @param errorCallback [function(any)] Optional, called upon an error. The passed paramer may be a {Frame} or a message\n   * @param closeEventCallback [function(CloseEvent)] Optional, called when the websocket is closed.\n   *\n   * @param login [String]\n   * @param passcode [String]\n   * @param host [String] Optional, virtual host to connect to. STOMP 1.2 makes it mandatory, however the broker may not mandate it\n   *\n   * @example\n   *        client.connect('guest, 'guest', function(frame) {\n   *          client.debug(\"connected to Stomp\");\n   *          client.subscribe(destination, function(message) {\n   *            $(\"#messages\").append(\"<p>\" + message.body + \"</p>\\n\");\n   *          });\n   *        });\n   *\n   * @note When auto reconnect is active, `connectCallback` and `errorCallback` will be called on each connect or error\n   *\n   * @see http:*stomp.github.com/stomp-specification-1.2.html#CONNECT_or_STOMP_Frame CONNECT Frame\n   */\n  public connect(...args: any[]): void {\n    const out = this._parseConnect(...args);\n    [this.connectHeaders, this.onConnect, this.onStompError, this.onWebSocketClose] = out;\n\n    super.connect();\n  }\n\n  public disconnect(disconnectCallback?: any, headers: StompHeaders = {}): void {\n    if (disconnectCallback) {\n      this.onDisconnect = disconnectCallback;\n    }\n    this.disconnectHeaders = headers;\n\n    super.disconnect();\n  }\n\n  set reconnect_delay(value: number) {\n    this.reconnectDelay = value;\n  }\n\n  get ws(): any {\n    return this._webSocket;\n  }\n\n  get onreceive(): messageCallbackType {\n    return this.onUnhandledMessage;\n  }\n\n  set onreceive(value: messageCallbackType) {\n    this.onUnhandledMessage = value;\n  }\n\n  get onreceipt(): frameCallbackType {\n    return this.onReceipt;\n  }\n\n  set onreceipt(value: frameCallbackType) {\n    this.onReceipt = value;\n  }\n\n  private _heartbeatInfo: HeartbeatInfo = new HeartbeatInfo(this);\n\n  get heartbeat() {\n    return this._heartbeatInfo;\n  }\n\n  set heartbeat(value: {incoming: number, outgoing: number}) {\n    this.heartbeatIncoming = value.incoming;\n    this.heartbeatOutgoing = value.outgoing;\n  }\n}\n\n/**\n * @internal\n */\nclass HeartbeatInfo {\n  constructor (private client: CompatClient) {\n  }\n\n  get outgoing(): number {\n    return this.client.heartbeatOutgoing;\n  }\n\n  set outgoing(value: number) {\n    this.client.heartbeatOutgoing = value;\n  }\n\n  get incoming(): number {\n    return this.client.heartbeatIncoming;\n  }\n\n  set incoming(value: number) {\n    this.client.heartbeatIncoming = value;\n  }\n}","import {Versions} from \"../versions\";\nimport {CompatClient} from \"./compat-client\";\n\n/**\n * STOMP Class, acts like a factory to create {@link Client}.\n */\nexport class Stomp {\n  /**\n   * In case you need to use a non standard class for WebSocket.\n   *\n   * For example when using within NodeJS environment:\n   *\n   * ```javascript\n   *        StompJs = require('../../esm5/');\n   *        Stomp = StompJs.Stomp;\n   *        Stomp.WebSocketClass = require('websocket').w3cwebsocket;\n   * ```\n   */\n  public static WebSocketClass:any = null;\n\n  /**\n   * This method creates a WebSocket client that is connected to\n   * the STOMP server located at the url.\n   *\n   * ```javascript\n   *        var url = \"ws://localhost:61614/stomp\";\n   *        var client = Stomp.client(url);\n   * ```\n   */\n  public static client (url: string, protocols: string[]): CompatClient {\n    // This is a hack to allow another implementation than the standard\n    // HTML5 WebSocket class.\n    //\n    // It is possible to use another class by calling\n    //\n    //     Stomp.WebSocketClass = MozWebSocket\n    //\n    // *prior* to call `Stomp.client()`.\n    //\n    // This hack is deprecated and `Stomp.over()` method should be used\n    // instead.\n\n    // See remarks on the function Stomp.over\n    if (protocols == null) { protocols = Versions.protocolVersions(); }\n    const ws_fn= function() {\n      const klass = Stomp.WebSocketClass || WebSocket;\n      return new klass(url, protocols);\n    };\n\n    return new CompatClient(ws_fn);\n  }\n\n  /**\n   * This method is an alternative to [Stomp#client]{@link Stomp#client} to let the user\n   * specify the WebSocket to use (either a standard HTML5 WebSocket or\n   * a similar object).\n   *\n   * In order to support reconnection, the function Client._connect should be callable more than once. While reconnecting\n   * a new instance of underlying transport (TCP Socket, WebSocket or SockJS) will be needed. So, this function\n   * alternatively allows passing a function that should return a new instance of the underlying socket.\n   *\n   * ```javascript\n   *        var client = Stomp.over(function(){\n   *          return new WebSocket('ws://localhost:15674/ws')\n   *        });\n   * ```\n   */\n  public static over (ws: any): CompatClient {\n    const ws_fn = typeof(ws) === \"function\" ? ws : () => ws;\n\n    return new CompatClient(ws_fn);\n  }\n}\n","import {StompHeaders} from \"./stomp-headers\";\nimport {Byte} from \"./byte\";\n\ntype unmarshallResults = { frames: Frame[]; partial: string };\n\n/**\n * Frame class represents a STOMP frame. Many of the callbacks pass the Frame received from\n * the STOMP broker. For advanced usage you might need to access [headers]{@link Frame#headers}.\n *\n * {@link Message} is an extended Frame.\n *\n * @see http://stomp.github.com/stomp-specification-1.2.html#STOMP_Frames STOMP Frame\n */\nexport class Frame {\n  /**\n   * STOMP Command\n   */\n  public command: string;\n\n  /**\n   * Headers, key value pairs.\n   */\n  public headers: StompHeaders;\n\n  /**\n   * It is serialized string\n   */\n  public body: any;\n\n  private escapeHeaderValues: boolean;\n\n  /**\n   * Frame constructor. `command`, `headers` and `body` are available as properties.\n   *\n   * @internal\n   */\n  constructor(command: string, headers: StompHeaders = {}, body: any = '', escapeHeaderValues: boolean = false) {\n    this.command = command;\n    this.headers = headers;\n    this.body = body;\n    this.escapeHeaderValues = escapeHeaderValues;\n  }\n\n  /**\n   * @internal\n   */\n  public toString(): string {\n    const lines = [this.command];\n    const skipContentLength = (this.headers['content-length'] === false) ? true : false;\n    if (skipContentLength) {\n      delete this.headers['content-length'];\n    }\n\n    for (let name of Object.keys(this.headers || {})) {\n      const value = this.headers[name];\n      if (this.escapeHeaderValues && (this.command !== 'CONNECT') && (this.command !== 'CONNECTED')) {\n        lines.push(`${name}:${Frame.frEscape(`${value}`)}`);\n      } else {\n        lines.push(`${name}:${value}`);\n      }\n    }\n    if (this.body && !skipContentLength) {\n      lines.push(`content-length:${Frame.sizeOfUTF8(this.body)}`);\n    }\n    lines.push(Byte.LF + this.body);\n    return lines.join(Byte.LF);\n  }\n\n  /**\n   * Compute the size of a UTF-8 string by counting its number of bytes\n   * (and not the number of characters composing the string)\n   */\n  private static sizeOfUTF8(s: string): number {\n    if (s) {\n      const matches = encodeURI(s).match(/%..|./g) || [];\n      return matches.length;\n    } else {\n      return 0;\n    }\n  }\n\n  /**\n   * deserialize a STOMP Frame from raw data.\n   *\n   * @internal\n   */\n  public static unmarshallSingle(data: any, escapeHeaderValues: boolean): Frame {\n    // search for 2 consecutives LF byte to split the command\n    // and headers from the body\n    const divider = data.search(new RegExp(`${Byte.LF}${Byte.LF}`));\n    const headerLines: string[] = data.substring(0, divider).split(Byte.LF);\n    const command = headerLines.shift();\n    const headers: StompHeaders = {};\n    // utility function to trim any whitespace before and after a string\n    const trim = (str: string): string => str.replace(/^\\s+|\\s+$/g, '');\n    // Parse headers in reverse order so that for repeated headers, the 1st\n    // value is used\n    for (let line of headerLines.reverse()) {\n      const idx = line.indexOf(':');\n\n      const key = <string>trim(line.substring(0, idx));\n      let value = trim(line.substring(idx + 1));\n\n      if (escapeHeaderValues && (command !== 'CONNECT') && (command !== 'CONNECTED')) {\n        value = Frame.frUnEscape(value);\n      }\n\n      headers[key] = value;\n    }\n    // Parse body\n    // check for content-length or  topping at the first NULL byte found.\n    let body = '';\n    // skip the 2 LF bytes that divides the headers from the body\n    const start = divider + 2;\n    if (headers['content-length']) {\n      const len = parseInt(<string>headers['content-length']);\n      body = (`${data}`).substring(start, start + len);\n    } else {\n      let chr = null;\n      for (let i = start, end = data.length, asc = start <= end; asc ? i < end : i > end; asc ? i++ : i--) {\n        chr = data.charAt(i);\n        if (chr === Byte.NULL) {\n          break;\n        }\n        body += chr;\n      }\n    }\n    return new Frame(<string>command, headers, body, escapeHeaderValues);\n  }\n\n  /**\n   * Split the data before unmarshalling every single STOMP frame.\n   * Web socket servers can send multiple frames in a single websocket message.\n   * If the message size exceeds the websocket message size, then a single\n   * frame can be fragmented across multiple messages.\n   *\n   * @internal\n   */\n  public static unmarshall(datas: any, escapeHeaderValues: boolean): unmarshallResults {\n    // Ugly list comprehension to split and unmarshall *multiple STOMP frames*\n    // contained in a *single WebSocket frame*.\n    // The data is split when a NULL byte (followed by zero or many LF bytes) is\n    // found\n    if (escapeHeaderValues == null) {\n      escapeHeaderValues = false;\n    }\n    const frames = datas.split(new RegExp(`${Byte.NULL}${Byte.LF}*`));\n\n    const r: unmarshallResults = {\n      frames: [],\n      partial: ''\n    };\n    r.frames = (frames.slice(0, -1).map((frame: Frame) => Frame.unmarshallSingle(frame, escapeHeaderValues)));\n\n    // If this contains a final full message or just a acknowledgement of a PING\n    // without any other content, process this frame, otherwise return the\n    // contents of the buffer to the caller.\n    const last_frame = frames.slice(-1)[0];\n\n    if ((last_frame === Byte.LF) || ((last_frame.search(new RegExp(`${Byte.NULL}${Byte.LF}*$`))) !== -1)) {\n      r.frames.push(Frame.unmarshallSingle(last_frame, escapeHeaderValues));\n    } else {\n      r.partial = last_frame;\n    }\n    return r;\n  }\n\n  /**\n   * Serialize a STOMP frame as per STOMP standards, suitable to be sent to the STOMP broker.\n   *\n   * @internal\n   */\n  public static marshall(command: string, headers: StompHeaders, body: any, escapeHeaderValues: boolean) {\n    const frame = new Frame(command, headers, body, escapeHeaderValues);\n    return frame.toString() + Byte.NULL;\n  }\n\n  /**\n   *  Escape header values\n   */\n  private static frEscape(str: string): string {\n    return str.replace(/\\\\/g, \"\\\\\\\\\").replace(/\\r/g, \"\\\\r\").replace(/\\n/g, \"\\\\n\").replace(/:/g, \"\\\\c\");\n  }\n\n  /**\n   * UnEscape header values\n   */\n  private static frUnEscape(str: string): string {\n    return str.replace(/\\\\r/g, \"\\r\").replace(/\\\\n/g, \"\\n\").replace(/\\\\c/g, \":\").replace(/\\\\\\\\/g, \"\\\\\");\n  }\n}\n","export * from './stomp-headers';\nexport * from './client';\nexport * from './frame';\nexport * from './versions';\n\n// Compatibility code\nexport * from './compatibility/stomp';\nexport * from './compatibility/compat-client';\n","/**\n * Supported STOMP versions\n */\nexport class Versions {\n  /**\n   * 1.0\n   */\n  static V1_0= '1.0';\n  /**\n   * 1.1\n   */\n  static V1_1= '1.1';\n  /**\n   * 1.2\n   */\n  static V1_2= '1.2';\n\n  /**\n   * @internal\n   */\n  static versions() {\n    return [Versions.V1_0, Versions.V1_1, Versions.V1_2]\n  }\n  /**\n   * @internal\n   */\n  static supportedVersions() {\n    return Versions.versions().join(',');\n  }\n  /**\n   * @internal\n   */\n  static protocolVersions() {\n    return Versions.versions().map(x => `v${x.replace('.', '')}.stomp`);\n  }\n}\n"],"sourceRoot":""}