{"version":3,"sources":["webpack://StompJs/webpack/universalModuleDefinition","webpack://StompJs/webpack/bootstrap","webpack://StompJs/./src/versions.ts","webpack://StompJs/./src/compatibility/compat-client.ts","webpack://StompJs/./src/parser.ts","webpack://StompJs/./src/frame.ts","webpack://StompJs/./src/byte.ts","webpack://StompJs/./src/client.ts","webpack://StompJs/./src/compatibility/stomp.ts","webpack://StompJs/./src/stomp-handler.ts","webpack://StompJs/./src/index.ts"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Versions","versions","V1_0","V1_1","V1_2","supportedVersions","join","protocolVersions","map","x","replace","CompatClient","_super","webSocketFactory","_this","this","_heartbeatInfo","HeartbeatInfo","reconnect_delay","debug","message","_i","arguments","length","console","log","apply","__extends","_parseConnect","closeEventCallback","connectCallback","errorCallback","args","headers","connect","out","connectHeaders","onConnect","onStompError","onWebSocketClose","activate","disconnect","disconnectCallback","onDisconnect","disconnectHeaders","deactivate","send","destination","body","skipContentLengthHeader","publish","reconnectDelay","_webSocket","onUnhandledMessage","onUnhandledReceipt","heartbeatIncoming","incoming","heartbeatOutgoing","outgoing","Client","client","Parser","onFrame","onIncomingPing","_encoder","TextEncoder","_decoder","TextDecoder","_token","_initState","parseChunk","segment","ArrayBuffer","Uint8Array","encode","forEach","byte","_onByte","_collectFrame","_collectCommand","_reinjectByte","_results","command","_consumeTokenAsUTF8","_collectHeaders","_consumeByte","_collectHeaderKey","_setupCollectBody","_headerKey","_collectHeaderValue","push","undefined","contentLengthHeader","filter","header","_bodyBytesRemaining","parseInt","_collectBodyFixedSize","_collectBodyNullTerminated","_retrievedBody","_consumeTokenAsRaw","decode","rawResult","byte_1","Frame","params","escapeHeaderValues","fromRawFrame","rawFrame","trim","str","_a","reverse","indexOf","hdrValueUnEscape","toString","serializeCmdAndHeaders","isBinaryBody","serialize","cmdAndHeaders","toUnit8Array","buffer","Byte","NULL","lines","keys","name_1","hdrValueEscape","bodyLength","LF","isBodyEmpty","sizeOfUTF8","uint8CmdAndHeaders","nullTerminator","uint8Frame","set","marshall","stomp_handler_1","conf","maxWebSocketFrameSize","_active","noOp","treatMessageAsBinary","onUnhandledFrame","configure","_stompHandler","connected","version","assign","_connect","_createWebSocket","StompHandler","frame","_disposeStompHandler","evt","_schedule_reconnect","start","webSocket","binaryType","_reconnector","setTimeout","clearTimeout","dispose","watchForReceipt","receiptId","callback","subscribe","unsubscribe","id","begin","transactionId","commit","abort","ack","messageId","subscriptionId","nack","versions_1","compat_client_1","Stomp","url","protocols","WebSocketClass","WebSocket","over","ws","ws_fn","frame_1","parser_1","_client","config","_serverFrameHandlers","CONNECTED","server","_connected","_version","_escapeHeaderValues","_setupHeartbeat","MESSAGE","subscription","onReceive","_subscriptions","RECEIPT","_receiptWatchers","ERROR","_counter","_partialData","_lastServerActivityTS","Date","now","parser","match","e","onmessage","data","onclose","closeEvent","_cleanUp","onopen","_transmit","split","v","serverOutgoing","serverIncoming","ttl","Math","max","_pinger","setInterval","ttl_1","_ponger","delta","close","error","readyState","CONNECTING","OPEN","clearInterval","hdrs","txId","transaction","__export"],"mappings":"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","file":"stomp.umd.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"StompJs\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"StompJs\"] = factory();\n\telse\n\t\troot[\"StompJs\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 9);\n","/**\n * Supported STOMP versions\n */\nexport class Versions {\n  /**\n   * 1.0\n   */\n  static V1_0= '1.0';\n  /**\n   * 1.1\n   */\n  static V1_1= '1.1';\n  /**\n   * 1.2\n   */\n  static V1_2= '1.2';\n\n  /**\n   * @internal\n   */\n  static versions() {\n    return [Versions.V1_0, Versions.V1_1, Versions.V1_2]\n  }\n  /**\n   * @internal\n   */\n  static supportedVersions() {\n    return Versions.versions().join(',');\n  }\n  /**\n   * @internal\n   */\n  static protocolVersions() {\n    return Versions.versions().map(x => `v${x.replace('.', '')}.stomp`);\n  }\n}\n","import {Client} from \"../client\";\nimport {StompHeaders} from \"../stomp-headers\";\nimport {frameCallbackType, messageCallbackType} from \"../types\";\n\n/**\n * Available for backward compatibility, please shift to using {@link Client}.\n *\n * **Deprecated**\n */\nexport class CompatClient extends Client {\n\n  /**\n   * Available for backward compatibility, please shift to using {@link Client}\n   * and [Client#webSocketFactory]{@link Client#webSocketFactory}.\n   *\n   * **Deprecated**\n   */\n  constructor(webSocketFactory: () => any) {\n    super();\n    this.reconnect_delay = 0;\n    this.webSocketFactory = webSocketFactory;\n    // Default from previous version\n    this.debug = (...message: any[]) => {\n      console.log(...message);\n    };\n  }\n\n  private _parseConnect(...args: any[]): any {\n    let closeEventCallback, connectCallback, errorCallback;\n    let headers: StompHeaders = {};\n    if (args.length < 2) {\n      throw(\"Connect requires at least 2 arguments\");\n    }\n    if (typeof(args[1]) === 'function') {\n      [headers, connectCallback, errorCallback, closeEventCallback] = args;\n    } else {\n      switch (args.length) {\n        case 6:\n          [headers['login'], headers['passcode'], connectCallback, errorCallback, closeEventCallback, headers['host']] = args;\n          break;\n        default:\n          [headers['login'], headers['passcode'], connectCallback, errorCallback, closeEventCallback] = args;\n      }\n    }\n\n    return [headers, connectCallback, errorCallback, closeEventCallback];\n  }\n\n  /**\n   * Available for backward compatibility, please shift to using [Client#activate]{@link Client#activate}.\n   *\n   * **Deprecated**\n   *\n   * The `connect` method accepts different number of arguments and types. See the Overloads list. Use the\n   * version with headers to pass your broker specific options.\n   *\n   * overloads:\n   * - connect(headers, connectCallback)\n   * - connect(headers, connectCallback, errorCallback)\n   * - connect(login, passcode, connectCallback)\n   * - connect(login, passcode, connectCallback, errorCallback)\n   * - connect(login, passcode, connectCallback, errorCallback, closeEventCallback)\n   * - connect(login, passcode, connectCallback, errorCallback, closeEventCallback, host)\n   *\n   * params:\n   * - headers, see [Client#connectHeaders]{@link Client#connectHeaders}\n   * - connectCallback, see [Client#onConnect]{@link Client#onConnect}\n   * - errorCallback, see [Client#onStompError]{@link Client#onStompError}\n   * - closeEventCallback, see [Client#onWebSocketClose]{@link Client#onWebSocketClose}\n   * - login [String]\n   * - passcode [String]\n   * - host [String] Optional, virtual host to connect to. STOMP 1.2 makes it mandatory,\n   *                 however the broker may not mandate it\n   *\n   * ```javascript\n   *        client.connect('guest, 'guest', function(frame) {\n   *          client.debug(\"connected to Stomp\");\n   *          client.subscribe(destination, function(message) {\n   *            $(\"#messages\").append(\"<p>\" + message.body + \"</p>\\n\");\n   *          });\n   *        });\n   * ```\n   *\n   * Note: When auto reconnect is active, `connectCallback` and `errorCallback` will be called on each connect or error\n   *\n   * See also: [CONNECT Frame]{@link http://stomp.github.com/stomp-specification-1.2.html#CONNECT_or_STOMP_Frame}\n   */\n  public connect(...args: any[]): void {\n    const out = this._parseConnect(...args);\n\n    if (out[0]) { this.connectHeaders = out[0]; }\n    if (out[1]) { this.onConnect = out[1]; }\n    if (out[2]) { this.onStompError = out[2]; }\n    if (out[3]) { this.onWebSocketClose = out[3]; }\n\n    super.activate();\n  }\n\n  /**\n   * Available for backward compatibility, please shift to using [Client#activate]{@link Client#activate}.\n   *\n   * **Deprecated**\n   *\n   * See:\n   * [Client#onDisconnect]{@link Client#onDisconnect}, and\n   * [Client#disconnectHeaders]{@link Client#disconnectHeaders}\n   */\n  public disconnect(disconnectCallback?: any, headers: StompHeaders = {}): void {\n    if (disconnectCallback) {\n      this.onDisconnect = disconnectCallback;\n    }\n    this.disconnectHeaders = headers;\n\n    super.deactivate();\n  }\n\n  /**\n   * Available for backward compatibility, use [Client#publish]{@link Client#publish}.\n   *\n   * Send a message to a named destination. Refer to your STOMP broker documentation for types\n   * and naming of destinations. The headers will, typically, be available to the subscriber.\n   * However, there may be special purpose headers corresponding to your STOMP broker.\n   *\n   *  **Deprecated**, use [Client#publish]{@link Client#publish}\n   *\n   * Note: Body must be String. You will need to covert the payload to string in case it is not string (e.g. JSON)\n   *\n   * ```javascript\n   *        client.send(\"/queue/test\", {priority: 9}, \"Hello, STOMP\");\n   *\n   *        // If you want to send a message with a body, you must also pass the headers argument.\n   *        client.send(\"/queue/test\", {}, \"Hello, STOMP\");\n   * ```\n   *\n   * See: http://stomp.github.com/stomp-specification-1.2.html#SEND SEND Frame\n   */\n  public send(destination: string, headers: {[key:string]: any} = {}, body: string = ''): void {\n    const skipContentLengthHeader = (headers['content-length'] === false);\n    if (skipContentLengthHeader) {\n      delete headers['content-length'];\n    }\n    this.publish({\n      destination: destination,\n      headers: <StompHeaders>headers,\n      body: body,\n      skipContentLengthHeader: skipContentLengthHeader\n    });\n  }\n\n  /**\n   * Available for backward compatibility, renamed to [Client#reconnectDelay]{@link Client#reconnectDelay}.\n   *\n   * **Deprecated**\n   */\n  set reconnect_delay(value: number) {\n    this.reconnectDelay = value;\n  }\n\n  /**\n   * Available for backward compatibility, renamed to [Client#webSocket]{@link Client#webSocket}.\n   *\n   * **Deprecated**\n   */\n  get ws(): any {\n    return this._webSocket;\n  }\n\n  /**\n   * Available for backward compatibility, renamed to [Client#onUnhandledMessage]{@link Client#onUnhandledMessage}.\n   *\n   * **Deprecated**\n   */\n  get onreceive(): messageCallbackType {\n    return this.onUnhandledMessage;\n  }\n\n  /**\n   * Available for backward compatibility, renamed to [Client#onUnhandledMessage]{@link Client#onUnhandledMessage}.\n   *\n   * **Deprecated**\n   */\n  set onreceive(value: messageCallbackType) {\n    this.onUnhandledMessage = value;\n  }\n\n  /**\n   * Available for backward compatibility, renamed to [Client#onUnhandledReceipt]{@link Client#onUnhandledReceipt}.\n   * Prefer using [Client#watchForReceipt]{@link Client#watchForReceipt}.\n   *\n   * **Deprecated**\n   */\n  get onreceipt(): frameCallbackType {\n    return this.onUnhandledReceipt;\n  }\n\n  /**\n   * Available for backward compatibility, renamed to [Client#onUnhandledReceipt]{@link Client#onUnhandledReceipt}.\n   *\n   * **Deprecated**\n   */\n  set onreceipt(value: frameCallbackType) {\n    this.onUnhandledReceipt = value;\n  }\n\n  private _heartbeatInfo: HeartbeatInfo = new HeartbeatInfo(this);\n\n  /**\n   * Available for backward compatibility, renamed to [Client#heartbeatIncoming]{@link Client#heartbeatIncoming}\n   * [Client#heartbeatOutgoing]{@link Client#heartbeatOutgoing}.\n   *\n   * **Deprecated**\n   */\n  get heartbeat() {\n    return this._heartbeatInfo;\n  }\n\n  /**\n   * Available for backward compatibility, renamed to [Client#heartbeatIncoming]{@link Client#heartbeatIncoming}\n   * [Client#heartbeatOutgoing]{@link Client#heartbeatOutgoing}.\n   *\n   * **Deprecated**\n   */\n  set heartbeat(value: {incoming: number, outgoing: number}) {\n    this.heartbeatIncoming = value.incoming;\n    this.heartbeatOutgoing = value.outgoing;\n  }\n}\n\n/**\n * @internal\n */\nclass HeartbeatInfo {\n  constructor (private client: CompatClient) {\n  }\n\n  get outgoing(): number {\n    return this.client.heartbeatOutgoing;\n  }\n\n  set outgoing(value: number) {\n    this.client.heartbeatOutgoing = value;\n  }\n\n  get incoming(): number {\n    return this.client.heartbeatIncoming;\n  }\n\n  set incoming(value: number) {\n    this.client.heartbeatIncoming = value;\n  }\n}","import {RawFrameType} from './types';\n\nconst NULL = 0;\nconst LF = 10;\nconst CR = 13;\nconst COLON = 58;\n\nexport class Parser {\n  private readonly _encoder = new TextEncoder();\n  private readonly _decoder = new TextDecoder();\n\n  private _results: RawFrameType;\n\n  private _token: number[] = [];\n  private _headerKey: string;\n  private _bodyBytesRemaining:number;\n\n  private _onByte: (byte: number) => void;\n\n  public constructor(public onFrame: (rawFrame: RawFrameType) => void, public onIncomingPing: () => void) {\n    this._initState();\n  }\n\n  public parseChunk(segment: string|ArrayBuffer) {\n    let chunk: Uint8Array;\n\n    if ((segment instanceof ArrayBuffer)) {\n      chunk = new Uint8Array(segment);\n    } else {\n      chunk = this._encoder.encode(segment);\n    }\n\n    chunk.forEach((byte) => {\n      this._onByte(byte);\n    });\n  }\n\n  // The following implements a simple Rec Descent Parser.\n  // The grammar is simple and just one byte tells what should be the next state\n\n  private _collectFrame(byte: number): void {\n    if (byte === NULL) { // Ignore\n      return;\n    }\n    if (byte === CR) { // Ignore CR\n      return;\n    }\n    if (byte === LF) { // Incoming Ping\n      this.onIncomingPing();\n      return;\n    }\n\n    this._onByte = this._collectCommand;\n    this._reinjectByte(byte);\n  }\n\n  private _collectCommand(byte: number): void {\n    if (byte === CR) { // Ignore CR\n      return;\n    }\n    if (byte === LF) {\n      this._results.command = this._consumeTokenAsUTF8();\n      this._onByte = this._collectHeaders;\n      return;\n    }\n\n    this._consumeByte(byte);\n  }\n\n  private _collectHeaders(byte: number): void {\n    if (byte === CR) { // Ignore CR\n      return;\n    }\n    if (byte === LF) {\n      this._setupCollectBody();\n      return;\n    }\n    this._onByte = this._collectHeaderKey;\n    this._reinjectByte(byte);\n  }\n\n  private _reinjectByte(byte: number) {\n    this._onByte(byte);\n  }\n\n  private _collectHeaderKey(byte: number): void {\n    if (byte === COLON) {\n      this._headerKey = this._consumeTokenAsUTF8();\n      this._onByte = this._collectHeaderValue;\n      return;\n    }\n    this._consumeByte(byte);\n  }\n\n  private _collectHeaderValue(byte: number): void {\n    if (byte === CR) { // Ignore CR\n      return;\n    }\n    if (byte === LF) {\n      this._results.headers.push([this._headerKey, this._consumeTokenAsUTF8()]);\n      this._headerKey = undefined;\n      this._onByte = this._collectHeaders;\n      return;\n    }\n    this._consumeByte(byte);\n  }\n\n  private _setupCollectBody() {\n    const contentLengthHeader = this._results.headers.filter(function (header: [string, string]) {\n      return header[0] === \"content-length\";\n    })[0];\n\n    if(contentLengthHeader) {\n      this._bodyBytesRemaining = parseInt(contentLengthHeader[1]);\n      this._onByte = this._collectBodyFixedSize;\n    } else {\n      this._onByte = this._collectBodyNullTerminated;\n    }\n  }\n\n  private _collectBodyNullTerminated(byte: number): void {\n    if (byte === NULL) {\n      this._retrievedBody();\n      return;\n    }\n    this._consumeByte(byte);\n  }\n\n  private _collectBodyFixedSize(byte: number): void {\n    // It is post decrement, so that we discard the trailing NULL octet\n    if (this._bodyBytesRemaining-- === 0) {\n      this._retrievedBody();\n      return;\n    }\n    this._consumeByte(byte);\n  }\n\n  private _retrievedBody() {\n    this._results.body = this._consumeTokenAsRaw();\n\n    this.onFrame(this._results);\n\n    this._initState();\n  }\n\n  // Rec Descent Parser helpers\n\n  private _consumeByte(byte: number) {\n    this._token.push(byte);\n  }\n\n  private _consumeTokenAsUTF8() {\n    return this._decoder.decode(this._consumeTokenAsRaw());\n  }\n\n  private _consumeTokenAsRaw() {\n    const rawResult = new Uint8Array(this._token);\n    this._token = [];\n    return rawResult;\n  }\n\n  private _initState() {\n    this._results = {\n      command: undefined,\n      headers: [],\n      body: undefined,\n    };\n\n    this._token = [];\n    this._headerKey = undefined;\n\n    this._onByte = this._collectFrame;\n  }\n\n}","import {StompHeaders} from \"./stomp-headers\";\nimport {Byte} from \"./byte\";\nimport {RawFrameType} from \"./types\";\n\n/**\n * @internal\n */\ntype unmarshallResults = { frames: Frame[]; partial: string };\n\n/**\n * Frame class represents a STOMP frame. Many of the callbacks pass the Frame received from\n * the STOMP broker. For advanced usage you might need to access [headers]{@link Frame#headers}.\n *\n * {@link Message} is an extended Frame.\n */\nexport class Frame {\n  /**\n   * STOMP Command\n   */\n  public command: string;\n\n  /**\n   * Headers, key value pairs.\n   */\n  public headers: StompHeaders;\n\n  /**\n   * It is serialized string\n   */\n  public body: string | Uint8Array;\n\n  private escapeHeaderValues: boolean;\n  private skipContentLengthHeader: boolean;\n\n  /**\n   * Frame constructor. `command`, `headers` and `body` are available as properties.\n   *\n   * @internal\n   */\n  constructor(params: {\n    command: string, headers?: StompHeaders, body: any,\n    escapeHeaderValues?: boolean, skipContentLengthHeader?: boolean\n  }) {\n    let {command, headers, body, escapeHeaderValues, skipContentLengthHeader} = params;\n    this.command = command;\n    this.headers = headers || {};\n    this.body = body || '';\n    this.escapeHeaderValues = escapeHeaderValues || false;\n    this.skipContentLengthHeader = skipContentLengthHeader || false;\n  }\n\n  /**\n   * deserialize a STOMP Frame from raw data.\n   *\n   * @internal\n   */\n  public static fromRawFrame(rawFrame: RawFrameType, escapeHeaderValues: boolean): Frame {\n    const headers: StompHeaders = {};\n    const trim = (str: string): string => str.replace(/^\\s+|\\s+$/g, '');\n\n    // In case of repeated headers, as per standards, first value need to be used\n    for (let header of rawFrame.headers.reverse()) {\n      const idx = header.indexOf(':');\n\n      const key = trim(header[0]);\n      let value = trim(header[1]);\n\n      if (escapeHeaderValues && (rawFrame.command !== 'CONNECT') && (rawFrame.command !== 'CONNECTED')) {\n        value = Frame.hdrValueUnEscape(value);\n      }\n\n      headers[key] = value;\n    }\n\n    return new Frame({\n      command: rawFrame.command,\n      headers: headers,\n      body: rawFrame.body,\n      escapeHeaderValues: escapeHeaderValues\n    });\n  }\n\n  /**\n   * @internal\n   */\n  public toString(): string {\n    const cmdAndHeaders = this.serializeCmdAndHeaders();\n    const bodyText = this.isBinaryBody() ? \"<<binary data>>\" : this.body;\n    return cmdAndHeaders + bodyText;\n  }\n\n  /**\n   * serialize this Frame in a format suitable to be passed to WebSocket.\n   * If the body is string the output will be string.\n   * If the body is binary (i.e. of type Unit8Array) it will be serialized to ArrayBuffer.\n   */\n  public serialize(): string|ArrayBuffer {\n    const cmdAndHeaders = this.serializeCmdAndHeaders();\n\n    if(this.isBinaryBody()) {\n      return Frame.toUnit8Array(cmdAndHeaders, <Uint8Array>this.body).buffer;\n    } else {\n      return cmdAndHeaders + this.body + Byte.NULL;\n    }\n  }\n\n  private serializeCmdAndHeaders(): string {\n    const lines = [this.command];\n    if (this.skipContentLengthHeader) {\n      delete this.headers['content-length'];\n    }\n\n    for (let name of Object.keys(this.headers || {})) {\n      const value = this.headers[name];\n      if (this.escapeHeaderValues && (this.command !== 'CONNECT') && (this.command !== 'CONNECTED')) {\n        lines.push(`${name}:${Frame.hdrValueEscape(`${value}`)}`);\n      } else {\n        lines.push(`${name}:${value}`);\n      }\n    }\n    if (this.body && !this.skipContentLengthHeader) {\n      lines.push(`content-length:${this.bodyLength()}`);\n    }\n    return lines.join(Byte.LF) + Byte.LF + Byte.LF;\n  }\n\n  private isBinaryBody(): boolean {\n    return (typeof this.body !== \"string\") && this.body.length > 0\n  }\n\n  private isBodyEmpty(): boolean {\n    return this.body.length === 0;\n  }\n\n  private bodyLength(): number {\n    return this.isBinaryBody() ? this.body.length : Frame.sizeOfUTF8(<string>this.body)\n  }\n\n  /**\n   * Compute the size of a UTF-8 string by counting its number of bytes\n   * (and not the number of characters composing the string)\n   */\n  private static sizeOfUTF8(s: string): number {\n    return s ? new TextEncoder().encode(s).length : 0;\n  }\n\n  private static toUnit8Array(cmdAndHeaders: string, body: Uint8Array): Uint8Array {\n    const uint8CmdAndHeaders = new TextEncoder().encode(cmdAndHeaders);\n    const nullTerminator = new Uint8Array([0]);\n    const uint8Frame = new Uint8Array(uint8CmdAndHeaders.length + body.length + nullTerminator.length);\n\n    uint8Frame.set(uint8CmdAndHeaders);\n    uint8Frame.set(body, uint8CmdAndHeaders.length);\n    uint8Frame.set(nullTerminator, uint8CmdAndHeaders.length + body.length);\n\n    return uint8Frame;\n  }\n  /**\n   * Serialize a STOMP frame as per STOMP standards, suitable to be sent to the STOMP broker.\n   *\n   * @internal\n   */\n  public static marshall(params: {\n    command: string, headers?: StompHeaders, body: string|Uint8Array,\n    escapeHeaderValues?: boolean, skipContentLengthHeader?: boolean\n  }) {\n    const frame = new Frame(params);\n    return frame.serialize();\n  }\n\n  /**\n   *  Escape header values\n   */\n  private static hdrValueEscape(str: string): string {\n    return str.replace(/\\\\/g, \"\\\\\\\\\").replace(/\\r/g, \"\\\\r\").replace(/\\n/g, \"\\\\n\").replace(/:/g, \"\\\\c\");\n  }\n\n  /**\n   * UnEscape header values\n   */\n  private static hdrValueUnEscape(str: string): string {\n    return str.replace(/\\\\r/g, \"\\r\").replace(/\\\\n/g, \"\\n\").replace(/\\\\c/g, \":\").replace(/\\\\\\\\/g, \"\\\\\");\n  }\n}\n","/**\n * Some byte values, used as per STOMP specifications.\n *\n * @internal\n */\nexport const Byte = {\n  // LINEFEED byte (octet 10)\n  LF: '\\x0A',\n  // NULL byte (octet 0)\n  NULL: '\\x00'\n};\n","import {StompHeaders} from \"./stomp-headers\";\nimport {StompSubscription} from \"./stomp-subscription\";\nimport {Transaction} from \"./transaction\";\nimport {\n  closeEventCallbackType,\n  debugFnType,\n  frameCallbackType,\n  messageCallbackType,\n  messageCheckCallbackType,\n  publishParams\n} from \"./types\";\nimport {StompConfig} from './stomp-config';\nimport {StompHandler} from \"./stomp-handler\";\n\n/**\n * STOMP Client Class.\n */\nexport class Client {\n  /**\n   * This function should return a WebSocket or a similar (e.g. SockJS) object.\n   */\n  public webSocketFactory: () => WebSocket;\n\n  /**\n   *  automatically reconnect with delay in milliseconds, set to 0 to disable.\n   */\n  public reconnectDelay: number = 5000;\n\n  /**\n   * Incoming heartbeat interval in milliseconds. Set to 0 to disable.\n   */\n  public heartbeatIncoming: number = 10000;\n\n  /**\n   * Outgoing heartbeat interval in milliseconds. Set to 0 to disable.\n   */\n  public heartbeatOutgoing: number = 10000;\n\n  /**\n   * Maximum WebSocket frame size sent by the client. If a STOMP frame\n   * is bigger than this value, the STOMP frame will be sent using multiple\n   * WebSocket frames (default is 16KiB).\n   */\n  public maxWebSocketFrameSize: number = 16 * 1024;\n\n  /**\n   * Underlying WebSocket instance, READONLY.\n   */\n  get webSocket(): WebSocket {\n    return this._webSocket;\n  }\n  /**\n   * Underlying WebSocket instance\n   * @internal\n   */\n  protected _webSocket: WebSocket;\n\n  /**\n   * Connection headers, important keys - `login`, `passcode`, `host`.\n   * Though STOMP 1.2 standard marks these keys to be present, check your broker documentation for\n   * details specific to your broker.\n   */\n  public connectHeaders: StompHeaders;\n\n  /**\n   * Disconnection headers.\n   */\n  public disconnectHeaders: StompHeaders;\n\n  /**\n   * This callback will be called with the incoming message frame {@link Message}.\n   * If this function returns `true`, the [Frame#body]{@link Frame#body} will not be converted\n   * to `string` and be returned as\n   * [Uint8Array]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array}.\n   * If this returns `false`, the body will be assumed to UTF8 string and will be converted at `string`.\n   *\n   * By default this callback returns `false`, i.e., all messages are treated as text.\n   *\n   * Examples:\n   * ```javascript\n   *        // Treat all messages a binary\n   *        client.treatMessageAsBinary = function(message) {\n   *          return true;\n   *        };\n\n   *        // Treat a message as binary based on content-type\n   *        // This header is not a standard header, while publishing messages it needs to be explicitly set.\n   *        client.treatMessageAsBinary = function(message) {\n   *          return message.headers['content-type'] === 'application/octet-stream';\n   *        };\n   * ```\n   *\n   */\n  public treatMessageAsBinary: messageCheckCallbackType;\n\n  /**\n   * This function will be called for any unhandled messages.\n   * It is useful for receiving messages sent to RabbitMQ temporary queues.\n   *\n   * It can also get invoked with stray messages while the server is processing\n   * a request to [Client#unsubscribe]{@link Client#unsubscribe}\n   * from an endpoint.\n   *\n   * The actual {@link Message} will be passed as parameter to the callback.\n   */\n  public onUnhandledMessage: messageCallbackType;\n\n  /**\n   * STOMP brokers can be requested to notify when an operation is actually completed.\n   * Prefer using [Client#watchForReceipt]{@link Client#watchForReceipt}. See\n   * [Client#watchForReceipt]{@link Client#watchForReceipt} for examples.\n   *\n   * The actual {@link Frame} will be passed as parameter to the callback.\n   */\n  public onUnhandledReceipt: frameCallbackType;\n\n  /**\n   * Will be invoked if {@link Frame} of unknown type is received from the STOMP broker.\n   *\n   * The actual {@link Frame} will be passed as parameter to the callback.\n   */\n  public onUnhandledFrame: frameCallbackType;\n\n  /**\n   * `true` if there is a active connection with STOMP Broker\n   */\n  get connected(): boolean {\n    return (!!this._stompHandler) && this._stompHandler.connected;\n  }\n\n  /**\n   * Callback, invoked on every successful connection to the STOMP broker.\n   *\n   * The actual {@link Frame} will be passed as parameter to the callback.\n   * Sometimes clients will like to use headers from this frame.\n   */\n  public onConnect: frameCallbackType;\n\n  /**\n   * Callback, invoked on every successful disconnection from the STOMP broker. It will not be invoked if\n   * the STOMP broker disconnected due to an error.\n   *\n   * The actual Receipt {@link Frame} acknowledging the DISCONNECT will be passed as parameter to the callback.\n   *\n   * The way STOMP protocol is designed, the connection may close/terminate without the client\n   * receiving the Receipt {@link Frame} acknowledging the DISCONNECT.\n   * You might find [Client#onWebSocketClose]{@link Client#onWebSocketClose} more appropriate to watch\n   * STOMP broker disconnects.\n   */\n  public onDisconnect: frameCallbackType;\n\n  /**\n   * Callback, invoked on an ERROR frame received from the STOMP Broker.\n   * A compliant STOMP Broker will close the connection after this type of frame.\n   * Please check broker specific documentation for exact behavior.\n   *\n   * The actual {@link Frame} will be passed as parameter to the callback.\n   */\n  public onStompError: frameCallbackType;\n\n  /**\n   * Callback, invoked when underlying WebSocket is closed.\n   *\n   * Actual [CloseEvent]{@link https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent}\n   * is passed as parameter to the callback.\n   */\n  public onWebSocketClose: closeEventCallbackType;\n\n  /**\n   * By default, debug messages are discarded. To log to `console` following can be used:\n   *\n   * ```javascript\n   *        client.debug = function(str) {\n   *          console.log(str);\n   *        };\n   * ```\n   *\n   * Currently this method does not support levels of log. Be aware that the output can be quite verbose\n   * and may contain sensitive information (like passwords, tokens etc.).\n   */\n  public debug: debugFnType;\n\n  /**\n   * version of STOMP protocol negotiated with the server, READONLY\n   */\n  get version(): string {\n    return this._stompHandler ? this._stompHandler.version : undefined;\n  }\n\n  private _stompHandler: StompHandler;\n\n  private _active: boolean = false;\n  private _reconnector: any;\n\n  /**\n   * Create an instance.\n   */\n  constructor(conf: StompConfig = {}) {\n    // Dummy callbacks\n    const noOp = () => {};\n    this.debug = noOp;\n    this.onConnect = noOp;\n    this.onDisconnect = noOp;\n    // Treat messages as text by default\n    this.treatMessageAsBinary = (message) => {\n      return false;\n    };\n    this.onUnhandledMessage = noOp;\n    this.onUnhandledReceipt = noOp;\n    this.onUnhandledFrame = noOp;\n    this.onStompError = noOp;\n    this.onWebSocketClose = noOp;\n\n    // These parameters would typically get proper values before connect is called\n    this.connectHeaders = {};\n    this.disconnectHeaders = {};\n    this.webSocketFactory = () => null;\n\n    // Apply configuration\n    this.configure(conf);\n  }\n\n  /**\n   * Update configuration.\n   */\n  public configure(conf: StompConfig): void {\n    // bulk assign all properties to this\n    (<any>Object).assign(this, conf);\n  }\n\n  /**\n   * Initiate the connection with the broker.\n   * If the connection breaks, as per [Client#reconnectDelay]{@link Client#reconnectDelay},\n   * it will keep trying to reconnect.\n   *\n   * Call [Client#deactivate]{@link Client#deactivate} to disconnect and stop reconnection attempts.\n   */\n  public activate(): void {\n    this._active = true;\n\n    this._connect();\n  }\n\n  private _connect(): void {\n    if (!this._active) {\n      this.debug('Client has been marked inactive, will not attempt to connect');\n      return;\n    }\n\n    if (this.connected) {\n      this.debug('STOMP: already connected, nothing to do');\n      return;\n    }\n\n    this.debug(\"Opening Web Socket...\");\n\n    // Get the actual WebSocket (or a similar object)\n    this._webSocket = this._createWebSocket();\n\n    this._stompHandler = new StompHandler(this, this._webSocket, {\n      debug: this.debug,\n      connectHeaders: this.connectHeaders,\n      disconnectHeaders: this.disconnectHeaders,\n      heartbeatIncoming: this.heartbeatIncoming,\n      heartbeatOutgoing: this.heartbeatOutgoing,\n      maxWebSocketFrameSize: this.maxWebSocketFrameSize,\n      treatMessageAsBinary: this.treatMessageAsBinary,\n      onConnect: (frame) => {\n        if (!this._active) {\n          this.debug('STOMP got connected while deactivate was issued, will disconnect now');\n          this._disposeStompHandler();\n          return;\n        }\n        this.onConnect(frame);\n      },\n      onDisconnect: (frame) => {\n        this.onDisconnect(frame);\n      },\n      onStompError: (frame) => {\n        this.onStompError(frame);\n      },\n      onWebSocketClose: (evt) => {\n        this.onWebSocketClose(evt);\n        // The callback is called before attempting to reconnect, this would allow the client\n        // to be `deactivated` in the callback.\n        if (this._active) {\n          this._schedule_reconnect();\n        }\n      },\n      onUnhandledMessage: (message) => {\n        this.onUnhandledMessage(message);\n      },\n      onUnhandledReceipt: (frame) => {\n        this.onUnhandledReceipt(frame);\n      },\n      onUnhandledFrame: (frame) => {\n        this.onUnhandledFrame(frame);\n      }\n    });\n\n    this._stompHandler.start();\n  }\n\n  private _createWebSocket() {\n    const webSocket = this.webSocketFactory();\n    webSocket.binaryType = \"arraybuffer\";\n    return webSocket;\n  }\n\n  private _schedule_reconnect(): void {\n    if (this.reconnectDelay > 0) {\n      this.debug(`STOMP: scheduling reconnection in ${this.reconnectDelay}ms`);\n\n      this._reconnector = setTimeout(() => {\n        this._connect();\n      }, this.reconnectDelay);\n    }\n  }\n\n  /**\n   * Disconnect and stop auto reconnect loop.\n   *\n   * Appropriate callbacks will be invoked if underlying STOMP connection was connected.\n   */\n  public deactivate(): void {\n    // indicate that auto reconnect loop should terminate\n    this._active = false;\n\n    // Clear if a reconnection was scheduled\n    if (this._reconnector) {\n      clearTimeout(this._reconnector);\n    }\n    this._disposeStompHandler();\n  }\n\n  private _disposeStompHandler() {\n    // Dispose STOMP Handler\n    if (this._stompHandler) {\n      this._stompHandler.dispose();\n      this._stompHandler = null;\n    }\n  }\n\n  /**\n   * Send a message to a named destination. Refer to your STOMP broker documentation for types\n   * and naming of destinations.\n   *\n   * STOMP protocol specifies and suggests some headers and also allows broker specific headers.\n   *\n   * Note: Body must be String or\n   * [Unit8Array]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array}.\n   * If the body is\n   * [Unit8Array]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array}\n   * the frame will be sent as binary.\n   * Sometimes brokers may not support binary frames out of the box.\n   * Please check your broker documentation.\n   *\n   * You will need to covert the payload to string in case it is not string (e.g. JSON)\n   *\n   * ```javascript\n   *        client.publish({destination: \"/queue/test\", headers: {priority: 9}, body: \"Hello, STOMP\"});\n   *\n   *        // Only destination is mandatory parameter\n   *        client.publish({destination: \"/queue/test\", body: \"Hello, STOMP\"});\n   *\n   *        // Skip content-length header in the frame to the broker\n   *        client.publish({\"/queue/test\", body: \"Hello, STOMP\", skipContentLengthHeader: true});\n   * ```\n   */\n  public publish(params: publishParams) {\n    this._stompHandler.publish(params);\n  }\n\n  /**\n   * STOMP brokers may carry out operation asynchronously and allow requesting for acknowledgement.\n   * To request an acknowledgement, a `receipt` header needs to be sent with the actual request.\n   * The value (say receipt-id) for this header needs to be unique for each use. Typically a sequence, a UUID, a\n   * random number or a combination may be used.\n   *\n   * A complaint broker will send a RECEIPT frame when an operation has actually been completed.\n   * The operation needs to be matched based in the value of the receipt-id.\n   *\n   * This method allow watching for a receipt and invoke the callback\n   * when corresponding receipt has been received.\n   *\n   * The actual {@link Frame} will be passed as parameter to the callback.\n   *\n   * Example:\n   * ```javascript\n   *        // Subscribing with acknowledgement\n   *        let receiptId = randomText();\n   *\n   *        client.watchForReceipt(receiptId, function() {\n   *          // Will be called after server acknowledges\n   *        });\n   *\n   *        client.subscribe(TEST.destination, onMessage, {receipt: receiptId});\n   *\n   *\n   *        // Publishing with acknowledgement\n   *        receiptId = randomText();\n   *\n   *        client.watchForReceipt(receiptId, function() {\n   *          // Will be called after server acknowledges\n   *        });\n   *        client.publish({destination: TEST.destination, headers: {receipt: receiptId}, body: msg});\n   * ```\n   */\n  public watchForReceipt(receiptId: string, callback: frameCallbackType): void {\n    this._stompHandler.watchForReceipt(receiptId, callback);\n  }\n\n  /**\n   * Subscribe to a STOMP Broker location. The callbck will be invoked for each received message with\n   * the {@link Message} as argument.\n   *\n   * Note: The library will generate an unique ID if there is none provided in the headers.\n   *       To use your own ID, pass it using the headers argument.\n   *\n   * ```javascript\n   *        callback = function(message) {\n   *        // called when the client receives a STOMP message from the server\n   *          if (message.body) {\n   *            alert(\"got message with body \" + message.body)\n   *          } else {\n   *            alert(\"got empty message\");\n   *          }\n   *        });\n   *\n   *        var subscription = client.subscribe(\"/queue/test\", callback);\n   *\n   *        // Explicit subscription id\n   *        var mySubId = 'my-subscription-id-001';\n   *        var subscription = client.subscribe(destination, callback, { id: mySubId });\n   * ```\n   */\n  public subscribe(destination: string, callback: messageCallbackType, headers: StompHeaders = {}): StompSubscription {\n    return this._stompHandler.subscribe(destination, callback, headers);\n  }\n\n  /**\n   * It is preferable to unsubscribe from a subscription by calling\n   * `unsubscribe()` directly on {@link StompSubscription} returned by `client.subscribe()`:\n   *\n   * ```javascript\n   *        var subscription = client.subscribe(destination, onmessage);\n   *        // ...\n   *        subscription.unsubscribe();\n   * ```\n   *\n   * See: http://stomp.github.com/stomp-specification-1.2.html#UNSUBSCRIBE UNSUBSCRIBE Frame\n   */\n  public unsubscribe(id: string, headers: StompHeaders = {}): void {\n    this._stompHandler.unsubscribe(id, headers);\n  }\n\n  /**\n   * Start a transaction, the returned {@link Transaction} has methods - [commit]{@link Transaction#commit}\n   * and [abort]{@link Transaction#abort}.\n   *\n   * `transactionId` is optional, if not passed the library will generate it internally.\n   */\n  public begin(transactionId?: string): Transaction {\n    return this._stompHandler.begin(transactionId);\n  }\n\n  /**\n   * Commit a transaction.\n   *\n   * It is preferable to commit a transaction by calling [commit]{@link Transaction#commit} directly on\n   * {@link Transaction} returned by [client.begin]{@link Client#begin}.\n   *\n   * ```javascript\n   *        var tx = client.begin(txId);\n   *        //...\n   *        tx.commit();\n   * ```\n   */\n  public commit(transactionId: string): void {\n    this._stompHandler.commit(transactionId);\n  }\n\n  /**\n   * Abort a transaction.\n   * It is preferable to abort a transaction by calling [abort]{@link Transaction#abort} directly on\n   * {@link Transaction} returned by [client.begin]{@link Client#begin}.\n   *\n   * ```javascript\n   *        var tx = client.begin(txId);\n   *        //...\n   *        tx.abort();\n   * ```\n   */\n  public abort(transactionId: string): void {\n    this._stompHandler.abort(transactionId);\n  }\n\n  /**\n   * ACK a message. It is preferable to acknowledge a message by calling [ack]{@link Message#ack} directly\n   * on the {@link Message} handled by a subscription callback:\n   *\n   * ```javascript\n   *        var callback = function (message) {\n   *          // process the message\n   *          // acknowledge it\n   *          message.ack();\n   *        };\n   *        client.subscribe(destination, callback, {'ack': 'client'});\n   * ```\n   */\n  public ack(messageId: string, subscriptionId: string, headers: StompHeaders = {}): void {\n    this._stompHandler.ack(messageId, subscriptionId, headers);\n  }\n\n  /**\n   * NACK a message. It is preferable to acknowledge a message by calling [nack]{@link Message#nack} directly\n   * on the {@link Message} handled by a subscription callback:\n   *\n   * ```javascript\n   *        var callback = function (message) {\n   *          // process the message\n   *          // an error occurs, nack it\n   *          message.nack();\n   *        };\n   *        client.subscribe(destination, callback, {'ack': 'client'});\n   * ```\n   */\n  public nack(messageId: string, subscriptionId: string, headers: StompHeaders = {}): void {\n    this._stompHandler.nack(messageId, subscriptionId, headers);\n  }\n}","import {Versions} from \"../versions\";\nimport {CompatClient} from \"./compat-client\";\n\n/**\n * STOMP Class, acts like a factory to create {@link Client}.\n */\nexport class Stomp {\n  /**\n   * In case you need to use a non standard class for WebSocket.\n   *\n   * For example when using within NodeJS environment:\n   *\n   * ```javascript\n   *        StompJs = require('../../esm5/');\n   *        Stomp = StompJs.Stomp;\n   *        Stomp.WebSocketClass = require('websocket').w3cwebsocket;\n   * ```\n   */\n  public static WebSocketClass:any = null;\n\n  /**\n   * This method creates a WebSocket client that is connected to\n   * the STOMP server located at the url.\n   *\n   * ```javascript\n   *        var url = \"ws://localhost:61614/stomp\";\n   *        var client = Stomp.client(url);\n   * ```\n   */\n  public static client (url: string, protocols: string[]): CompatClient {\n    // This is a hack to allow another implementation than the standard\n    // HTML5 WebSocket class.\n    //\n    // It is possible to use another class by calling\n    //\n    //     Stomp.WebSocketClass = MozWebSocket\n    //\n    // *prior* to call `Stomp.client()`.\n    //\n    // This hack is deprecated and `Stomp.over()` method should be used\n    // instead.\n\n    // See remarks on the function Stomp.over\n    if (protocols == null) { protocols = Versions.protocolVersions(); }\n    const ws_fn= function() {\n      const klass = Stomp.WebSocketClass || WebSocket;\n      return new klass(url, protocols);\n    };\n\n    return new CompatClient(ws_fn);\n  }\n\n  /**\n   * This method is an alternative to [Stomp#client]{@link Stomp#client} to let the user\n   * specify the WebSocket to use (either a standard HTML5 WebSocket or\n   * a similar object).\n   *\n   * In order to support reconnection, the function Client._connect should be callable more than once. While reconnecting\n   * a new instance of underlying transport (TCP Socket, WebSocket or SockJS) will be needed. So, this function\n   * alternatively allows passing a function that should return a new instance of the underlying socket.\n   *\n   * ```javascript\n   *        var client = Stomp.over(function(){\n   *          return new WebSocket('ws://localhost:15674/ws')\n   *        });\n   * ```\n   */\n  public static over (ws: any): CompatClient {\n    const ws_fn = typeof(ws) === \"function\" ? ws : () => ws;\n\n    return new CompatClient(ws_fn);\n  }\n}\n","import {Client} from './client';\nimport {Byte} from \"./byte\";\nimport {Versions} from \"./versions\";\nimport {Message} from \"./message\";\nimport {Frame} from \"./frame\";\nimport {StompHeaders} from \"./stomp-headers\";\nimport {\n  closeEventCallbackType,\n  debugFnType,\n  frameCallbackType,\n  messageCallbackType,\n  messageCheckCallbackType,\n  publishParams\n} from \"./types\";\nimport {StompSubscription} from \"./stomp-subscription\";\nimport {Transaction} from \"./transaction\";\nimport {StompConfig} from \"./stomp-config\";\nimport {Parser} from \"./parser\";\n\n/**\n * The STOMP protocol handler\n *\n * @internal\n */\nexport class StompHandler {\n  public debug: debugFnType;\n\n  public connectHeaders: StompHeaders;\n\n  public disconnectHeaders: StompHeaders;\n\n  public treatMessageAsBinary: messageCheckCallbackType;\n\n  public heartbeatIncoming: number;\n\n  public heartbeatOutgoing: number;\n\n  public onUnhandledMessage: messageCallbackType;\n\n  public onUnhandledReceipt: frameCallbackType;\n\n  public onUnhandledFrame: frameCallbackType;\n\n  public maxWebSocketFrameSize: number;\n\n  public onConnect: frameCallbackType;\n\n  public onDisconnect: frameCallbackType;\n\n  public onStompError: frameCallbackType;\n\n  public onWebSocketClose: closeEventCallbackType;\n\n  get version(): string {\n    return this._version;\n  }\n  private _version: string;\n\n  get connected(): boolean {\n    return this._connected;\n  }\n\n  private _connected: boolean;\n\n  private readonly _subscriptions: { [key: string]: messageCallbackType };\n  private readonly _receiptWatchers: { [key: string]: frameCallbackType };\n  private _partialData: string;\n  private _escapeHeaderValues: boolean;\n  private _counter: number;\n  private _pinger: any;\n  private _ponger: any;\n  private _lastServerActivityTS: number;\n\n  constructor(private _client: Client, private _webSocket: WebSocket, config: StompConfig = {}) {\n    // used to index subscribers\n    this._counter = 0;\n\n    // subscription callbacks indexed by subscriber's ID\n    this._subscriptions = {};\n\n    // receipt-watchers indexed by receipts-ids\n    this._receiptWatchers = {};\n\n    this._partialData = '';\n\n    this._escapeHeaderValues = false;\n\n    this._lastServerActivityTS = Date.now();\n\n    this.configure(config);\n  }\n\n  public configure(conf: StompConfig): void {\n    // bulk assign all properties to this\n    (<any>Object).assign(this, conf);\n  }\n\n  public start(): void {\n    const parser = new Parser(\n      // On Frame\n      (rawFrame) => {\n        const frame = Frame.fromRawFrame(rawFrame, this._escapeHeaderValues);\n\n        // Unless we have to treat message body as binary, convert it to `string`\n        if(!this.treatMessageAsBinary(frame) ||\n                  (frame.command === 'ERROR' && frame.headers['content-type'].match(/^text\\//)) ) {\n          try {\n            frame.body = new TextDecoder().decode(<Uint8Array>frame.body);\n          } catch (e) {\n            // ignore\n          }\n        }\n\n        this.debug(`<<< ${frame}`);\n\n        const serverFrameHandler = this._serverFrameHandlers[frame.command] || this.onUnhandledFrame;\n        serverFrameHandler(frame);\n      },\n      // On Incoming Ping\n      () => {\n        this.debug(\"<<< PONG\");\n      }\n    );\n\n    this._webSocket.onmessage = (evt: any) => {\n      this.debug('Received data');\n      this._lastServerActivityTS = Date.now();\n\n      parser.parseChunk(evt.data);\n    };\n\n    this._webSocket.onclose = (closeEvent: any): void => {\n      this.debug(`Connection closed to ${this._webSocket.url}`);\n      this.onWebSocketClose(closeEvent);\n      this._cleanUp();\n    };\n\n    this._webSocket.onopen = () => {\n      this.debug('Web Socket Opened...');\n      this.connectHeaders[\"accept-version\"] = Versions.supportedVersions();\n      this.connectHeaders[\"heart-beat\"] = [this.heartbeatOutgoing, this.heartbeatIncoming].join(',');\n      this._transmit({command: \"CONNECT\", headers: this.connectHeaders});\n    };\n  }\n\n  private readonly _serverFrameHandlers: { [key: string]: frameCallbackType } = {\n\n    // [CONNECTED Frame](http://stomp.github.com/stomp-specification-1.2.html#CONNECTED_Frame)\n    'CONNECTED': (frame) => {\n      this.debug(`connected to server ${frame.headers.server}`);\n      this._connected = true;\n      this._version = frame.headers.version;\n      // STOMP version 1.2 needs header values to be escaped\n      if (this._version === Versions.V1_2) {\n        this._escapeHeaderValues = true;\n      }\n\n      this._setupHeartbeat(frame.headers);\n      this.onConnect(frame);\n    },\n\n    // [MESSAGE Frame](http://stomp.github.com/stomp-specification-1.2.html#MESSAGE)\n    \"MESSAGE\": (frame) => {\n      // the callback is registered when the client calls\n      // `subscribe()`.\n      // If there is no registered subscription for the received message,\n      // the default `onUnhandledMessage` callback is used that the client can set.\n      // This is useful for subscriptions that are automatically created\n      // on the browser side (e.g. [RabbitMQ's temporary\n      // queues](http://www.rabbitmq.com/stomp.html)).\n      const subscription = frame.headers.subscription;\n      const onReceive = this._subscriptions[subscription] || this.onUnhandledMessage;\n\n      // bless the frame to be a Message\n      const message = <Message>frame;\n\n      const client = this;\n      const messageId = this._version === Versions.V1_2 ? message.headers[\"ack\"] : message.headers[\"message-id\"];\n\n      // add `ack()` and `nack()` methods directly to the returned frame\n      // so that a simple call to `message.ack()` can acknowledge the message.\n      message.ack = (headers: StompHeaders = {}): void => {\n        return client.ack(messageId, subscription, headers);\n      };\n      message.nack = (headers: StompHeaders = {}): void => {\n        return client.nack(messageId, subscription, headers);\n      };\n      onReceive(message);\n    },\n\n    // [RECEIPT Frame](http://stomp.github.com/stomp-specification-1.2.html#RECEIPT)\n    \"RECEIPT\": (frame) => {\n      const callback = this._receiptWatchers[frame.headers[\"receipt-id\"]];\n      if (callback) {\n        callback(frame);\n        // Server will acknowledge only once, remove the callback\n        delete this._receiptWatchers[frame.headers[\"receipt-id\"]];\n      } else {\n        this.onUnhandledReceipt(frame);\n      }\n    },\n\n    // [ERROR Frame](http://stomp.github.com/stomp-specification-1.2.html#ERROR)\n    'ERROR': (frame) => {\n      this.onStompError(frame);\n    }\n  };\n\n  private _setupHeartbeat(headers: StompHeaders): void {\n    if ((headers.version !== Versions.V1_1 && headers.version !== Versions.V1_2)) {\n      return;\n    }\n\n    // heart-beat header received from the server looks like:\n    //\n    //     heart-beat: sx, sy\n    const [serverOutgoing, serverIncoming] = (headers['heart-beat']).split(\",\").map((v: string) => parseInt(v));\n\n    if ((this.heartbeatOutgoing !== 0) && (serverIncoming !== 0)) {\n      let ttl: number = Math.max(this.heartbeatOutgoing, serverIncoming);\n      this.debug(`send PING every ${ttl}ms`);\n      this._pinger = setInterval(() => {\n        this._webSocket.send(Byte.LF);\n        this.debug(\">>> PING\");\n      }, ttl);\n    }\n\n    if ((this.heartbeatIncoming !== 0) && (serverOutgoing !== 0)) {\n      let ttl: number = Math.max(this.heartbeatIncoming, serverOutgoing);\n      this.debug(`check PONG every ${ttl}ms`);\n      this._ponger = setInterval(() => {\n        const delta = Date.now() - this._lastServerActivityTS;\n        // We wait twice the TTL to be flexible on window's setInterval calls\n        if (delta > (ttl * 2)) {\n          this.debug(`did not receive server activity for the last ${delta}ms`);\n          this._webSocket.close();\n        }\n      }, ttl);\n    }\n  }\n\n  private _transmit(params: { command: string, headers?: StompHeaders,\n                              body?: string | Uint8Array, skipContentLengthHeader?: boolean }): void {\n    let {command, headers, body, skipContentLengthHeader} = params;\n    let frame = new Frame({\n      command: command,\n      headers: headers,\n      body: body,\n      escapeHeaderValues: this._escapeHeaderValues,\n      skipContentLengthHeader: skipContentLengthHeader\n    });\n    this.debug(`>>> ${frame}`);\n    // if necessary, split the *STOMP* frame to send it on many smaller\n    // *WebSocket* frames\n    this._webSocket.send(frame.serialize());\n/* Do we need this?\n    while (true) {\n      if (out.length > this.maxWebSocketFrameSize) {\n        this._webSocket.send(out.substring(0, this.maxWebSocketFrameSize));\n        out = out.substring(this.maxWebSocketFrameSize);\n        this.debug(`remaining = ${out.length}`);\n      } else {\n        this._webSocket.send(out);\n        return;\n      }\n    }\n*/\n  }\n\n  public dispose(): void {\n    if (this.connected) {\n      try {\n        if (!this.disconnectHeaders['receipt']) {\n          this.disconnectHeaders['receipt'] = `close-${this._counter++}`;\n        }\n        this.watchForReceipt(this.disconnectHeaders['receipt'], (frame) => {\n          this._webSocket.close();\n          this._cleanUp();\n          this.onDisconnect(frame);\n        });\n        this._transmit({command: \"DISCONNECT\", headers: this.disconnectHeaders});\n      } catch (error) {\n        this.debug(`Ignoring error during disconnect ${error}`);\n      }\n    } else {\n      if (this._webSocket.readyState === WebSocket.CONNECTING || this._webSocket.readyState === WebSocket.OPEN) {\n        this._webSocket.close();\n      }\n    }\n  }\n\n  private _cleanUp() {\n    this._connected = false;\n\n    if (this._pinger) {\n      clearInterval(this._pinger);\n    }\n    if (this._ponger) {\n      clearInterval(this._ponger);\n    }\n  }\n\n  public publish(params: publishParams): void {\n    let {destination, headers, body, skipContentLengthHeader} = params;\n    headers = (<any>Object).assign({destination: destination}, headers);\n    this._transmit({command: \"SEND\", headers: headers, body: body, skipContentLengthHeader: skipContentLengthHeader});\n  }\n\n  public watchForReceipt(receiptId: string, callback: frameCallbackType): void {\n    this._receiptWatchers[receiptId] = callback;\n  }\n\n  public subscribe(destination: string, callback: messageCallbackType, headers: StompHeaders = {}): StompSubscription {\n    if (!headers.id) {\n      headers.id = `sub-${this._counter++}`;\n    }\n    headers.destination = destination;\n    this._subscriptions[headers.id] = callback;\n    this._transmit({command: \"SUBSCRIBE\", headers: headers});\n    const client = this;\n    return {\n      id: headers.id,\n\n      unsubscribe(hdrs) {\n        return client.unsubscribe(headers.id, hdrs);\n      }\n    };\n  }\n\n  public unsubscribe(id: string, headers: StompHeaders = {}): void {\n    if (headers == null) {\n      headers = {};\n    }\n    delete this._subscriptions[id];\n    headers.id = id;\n    this._transmit({command: \"UNSUBSCRIBE\", headers: headers});\n  }\n\n  public begin(transactionId: string): Transaction {\n    const txId = transactionId || (`tx-${this._counter++}`);\n    this._transmit({\n      command: \"BEGIN\", headers: {\n        transaction: txId\n      }\n    });\n    const client = this;\n    return {\n      id: txId,\n      commit(): void {\n        client.commit(txId);\n      },\n      abort(): void {\n        client.abort(txId);\n      }\n    };\n  }\n\n  public commit(transactionId: string): void {\n    this._transmit({\n      command: \"COMMIT\", headers: {\n        transaction: transactionId\n      }\n    });\n  }\n\n  public abort(transactionId: string): void {\n    this._transmit({\n      command: \"ABORT\", headers: {\n        transaction: transactionId\n      }\n    });\n  }\n\n  public ack(messageId: string, subscriptionId: string, headers: StompHeaders = {}): void {\n    if (this._version === Versions.V1_2) {\n      headers[\"id\"] = messageId;\n    } else {\n      headers[\"message-id\"] = messageId;\n    }\n    headers.subscription = subscriptionId;\n    this._transmit({command: \"ACK\", headers: headers});\n  }\n\n  public nack(messageId: string, subscriptionId: string, headers: StompHeaders = {}): void {\n    if (this._version === Versions.V1_2) {\n      headers[\"id\"] = messageId;\n    } else {\n      headers[\"message-id\"] = messageId;\n    }\n    headers.subscription = subscriptionId;\n    return this._transmit({command: \"NACK\", headers: headers});\n  }\n\n}\n","export * from './client';\nexport * from './frame';\nexport * from './message';\nexport * from './parser';\nexport * from './stomp-config';\nexport * from './stomp-headers';\nexport * from './stomp-subscription';\nexport * from './transaction';\nexport * from './types';\nexport * from './versions';\n\n// Compatibility code\nexport * from './compatibility/compat-client';\nexport * from './compatibility/stomp';\n"],"sourceRoot":""}