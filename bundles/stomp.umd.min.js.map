{"version":3,"sources":["webpack://StompJs/webpack/universalModuleDefinition","webpack://StompJs/webpack/bootstrap","webpack://StompJs/./src/versions.ts","webpack://StompJs/./src/compatibility/compat-client.ts","webpack://StompJs/./src/byte.ts","webpack://StompJs/./src/frame.ts","webpack://StompJs/./src/client.ts","webpack://StompJs/./src/compatibility/stomp.ts","webpack://StompJs/./src/index.ts"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Versions","versions","V1_0","V1_1","V1_2","supportedVersions","join","protocolVersions","map","x","replace","CompatClient","_super","webSocketFactory","_this","this","_heartbeatInfo","HeartbeatInfo","reconnect_delay","debug","message","_i","arguments","length","console","log","apply","__extends","_parseConnect","closeEventCallback","connectCallback","errorCallback","args","headers","connect","out","connectHeaders","onConnect","onStompError","onWebSocketClose","disconnect","disconnectCallback","onDisconnect","disconnectHeaders","reconnectDelay","_webSocket","onUnhandledMessage","onReceipt","heartbeatIncoming","incoming","heartbeatOutgoing","outgoing","Client","client","Byte","LF","NULL","byte_1","Frame","command","body","escapeHeaderValues","toString","lines","skipContentLength","_a","keys","name_1","push","frEscape","sizeOfUTF8","encodeURI","match","unmarshallSingle","data","divider","search","RegExp","headerLines","substring","split","shift","trim","str","reverse","line","idx","indexOf","frUnEscape","start","len","parseInt","chr","end","asc","charAt","unmarshall","datas","frames","partial","slice","frame","last_frame","marshall","frame_1","versions_1","conf","maxWebSocketFrameSize","_active","noOp","_counter","_connected","_subscriptions","_partialData","_closeReceipt","_version","_escapeHeaderValues","_lastServerActivityTS","Date","now","configure","assign","_transmit","send","_setupHeartbeat","ttl","version","v","serverOutgoing","serverIncoming","Math","max","_pinger","setInterval","_ponger","delta","close","_connect","_createWebSocket","onmessage","evt","ArrayBuffer","arr","Uint8Array","len1","j","results","String","fromCharCode","unmarshalledData","server","subscription_1","subscription","onreceive","messageId_1","client_1","ack","nack","onclose","_cleanUp","closeEvent","msg","url","_schedule_reconnect","onopen","webSocket","binaryType","_reconnector","setTimeout","error","clearTimeout","clearInterval","destination","subscribe","callback","id","unsubscribe","hdrs","begin","transactionId","txId","transaction","commit","abort","messageId","subscriptionId","compat_client_1","Stomp","protocols","WebSocketClass","WebSocket","over","ws","ws_fn","__export"],"mappings":"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","file":"stomp.umd.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"StompJs\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"StompJs\"] = factory();\n\telse\n\t\troot[\"StompJs\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 7);\n","/**\n * Supported STOMP versions\n */\nexport class Versions {\n  /**\n   * 1.0\n   */\n  static V1_0= '1.0';\n  /**\n   * 1.1\n   */\n  static V1_1= '1.1';\n  /**\n   * 1.2\n   */\n  static V1_2= '1.2';\n\n  /**\n   * @internal\n   */\n  static versions() {\n    return [Versions.V1_0, Versions.V1_1, Versions.V1_2]\n  }\n  /**\n   * @internal\n   */\n  static supportedVersions() {\n    return Versions.versions().join(',');\n  }\n  /**\n   * @internal\n   */\n  static protocolVersions() {\n    return Versions.versions().map(x => `v${x.replace('.', '')}.stomp`);\n  }\n}\n","import {Client} from \"../client\";\nimport {StompHeaders} from \"../stomp-headers\";\nimport {frameCallbackType, messageCallbackType} from \"../types\";\n\nexport class CompatClient extends Client {\n\n  constructor(webSocketFactory: () => any) {\n    super();\n    this.reconnect_delay = 0;\n    this.webSocketFactory = webSocketFactory;\n    // Default from previous version\n    this.debug = (...message: any[]) => {\n      console.log(...message);\n    };\n  }\n\n  private _parseConnect(...args: any[]): any {\n    let closeEventCallback, connectCallback, errorCallback;\n    let headers: StompHeaders = {};\n    if (args.length < 2) {\n      throw(\"Connect requires at least 2 arguments\");\n    }\n    if (typeof(args[1]) === 'function') {\n      [headers, connectCallback, errorCallback, closeEventCallback] = args;\n    } else {\n      switch (args.length) {\n        case 6:\n          [headers['login'], headers['passcode'], connectCallback, errorCallback, closeEventCallback, headers['host']] = args;\n          break;\n        default:\n          [headers['login'], headers['passcode'], connectCallback, errorCallback, closeEventCallback] = args;\n      }\n    }\n\n    return [headers, connectCallback, errorCallback, closeEventCallback];\n  }\n\n  /**\n   * The `connect` method accepts different number of arguments and types. See the Overloads list. Use the\n   * version with headers to pass your broker specific options.\n   *\n   * @overload connect(headers, connectCallback)\n   *\n   * @overload connect(headers, connectCallback, errorCallback)\n   *\n   * @overload connect(login, passcode, connectCallback)\n   *\n   * @overload connect(login, passcode, connectCallback, errorCallback)\n   *\n   * @overload connect(login, passcode, connectCallback, errorCallback, closeEventCallback)\n   *\n   * @overload connect(login, passcode, connectCallback, errorCallback, closeEventCallback, host)\n   *\n   * @param headers [Object]\n   * @option headers [String] login\n   * @option headers [String] passcode\n   * @option headers [String] host virtual host to connect to. STOMP 1.2 makes it mandatory, however the broker may not mandate it\n   * @param connectCallback [function(Frame)] Called upon a successful connect or reconnect\n   * @param errorCallback [function(any)] Optional, called upon an error. The passed paramer may be a {Frame} or a message\n   * @param closeEventCallback [function(CloseEvent)] Optional, called when the websocket is closed.\n   *\n   * @param login [String]\n   * @param passcode [String]\n   * @param host [String] Optional, virtual host to connect to. STOMP 1.2 makes it mandatory, however the broker may not mandate it\n   *\n   * @example\n   *        client.connect('guest, 'guest', function(frame) {\n   *          client.debug(\"connected to Stomp\");\n   *          client.subscribe(destination, function(message) {\n   *            $(\"#messages\").append(\"<p>\" + message.body + \"</p>\\n\");\n   *          });\n   *        });\n   *\n   * @note When auto reconnect is active, `connectCallback` and `errorCallback` will be called on each connect or error\n   *\n   * @see http:*stomp.github.com/stomp-specification-1.2.html#CONNECT_or_STOMP_Frame CONNECT Frame\n   */\n  public connect(...args: any[]): void {\n    const out = this._parseConnect(...args);\n    [this.connectHeaders, this.onConnect, this.onStompError, this.onWebSocketClose] = out;\n\n    super.connect();\n  }\n\n  public disconnect(disconnectCallback?: any, headers: StompHeaders = {}): void {\n    if (disconnectCallback) {\n      this.onDisconnect = disconnectCallback;\n    }\n    this.disconnectHeaders = headers;\n\n    super.disconnect();\n  }\n\n  set reconnect_delay(value: number) {\n    this.reconnectDelay = value;\n  }\n\n  get ws(): any {\n    return this._webSocket;\n  }\n\n  get onreceive(): messageCallbackType {\n    return this.onUnhandledMessage;\n  }\n\n  set onreceive(value: messageCallbackType) {\n    this.onUnhandledMessage = value;\n  }\n\n  get onreceipt(): frameCallbackType {\n    return this.onReceipt;\n  }\n\n  set onreceipt(value: frameCallbackType) {\n    this.onReceipt = value;\n  }\n\n  private _heartbeatInfo: HeartbeatInfo = new HeartbeatInfo(this);\n\n  get heartbeat() {\n    return this._heartbeatInfo;\n  }\n\n  set heartbeat(value: {incoming: number, outgoing: number}) {\n    this.heartbeatIncoming = value.incoming;\n    this.heartbeatOutgoing = value.outgoing;\n  }\n}\n\n/**\n * @internal\n */\nclass HeartbeatInfo {\n  constructor (private client: CompatClient) {\n  }\n\n  get outgoing(): number {\n    return this.client.heartbeatOutgoing;\n  }\n\n  set outgoing(value: number) {\n    this.client.heartbeatOutgoing = value;\n  }\n\n  get incoming(): number {\n    return this.client.heartbeatIncoming;\n  }\n\n  set incoming(value: number) {\n    this.client.heartbeatIncoming = value;\n  }\n}","/**\n * Some byte values, used as per STOMP specifications.\n *\n * @internal\n */\nexport const Byte = {\n  // LINEFEED byte (octet 10)\n  LF: '\\x0A',\n  // NULL byte (octet 0)\n  NULL: '\\x00'\n};\n","import {StompHeaders} from \"./stomp-headers\";\nimport {Byte} from \"./byte\";\n\ntype unmarshallResults = { frames: Frame[]; partial: string };\n\n/**\n * Frame class represents a STOMP frame. Many of the callbacks pass the Frame received from\n * the STOMP broker. For advanced usage you might need to access [headers]{@link Frame#headers}.\n *\n * {@link Message} is an extended Frame.\n *\n * @see http://stomp.github.com/stomp-specification-1.2.html#STOMP_Frames STOMP Frame\n */\nexport class Frame {\n  /**\n   * STOMP Command\n   */\n  public command: string;\n\n  /**\n   * Headers, key value pairs.\n   */\n  public headers: StompHeaders;\n\n  /**\n   * It is serialized string\n   */\n  public body: any;\n\n  private escapeHeaderValues: boolean;\n\n  /**\n   * Frame constructor. `command`, `headers` and `body` are available as properties.\n   *\n   * @internal\n   */\n  constructor(command: string, headers: StompHeaders = {}, body: any = '', escapeHeaderValues: boolean = false) {\n    this.command = command;\n    this.headers = headers;\n    this.body = body;\n    this.escapeHeaderValues = escapeHeaderValues;\n  }\n\n  /**\n   * @internal\n   */\n  public toString(): string {\n    const lines = [this.command];\n    const skipContentLength = (this.headers['content-length'] === false) ? true : false;\n    if (skipContentLength) {\n      delete this.headers['content-length'];\n    }\n\n    for (let name of Object.keys(this.headers || {})) {\n      const value = this.headers[name];\n      if (this.escapeHeaderValues && (this.command !== 'CONNECT') && (this.command !== 'CONNECTED')) {\n        lines.push(`${name}:${Frame.frEscape(`${value}`)}`);\n      } else {\n        lines.push(`${name}:${value}`);\n      }\n    }\n    if (this.body && !skipContentLength) {\n      lines.push(`content-length:${Frame.sizeOfUTF8(this.body)}`);\n    }\n    lines.push(Byte.LF + this.body);\n    return lines.join(Byte.LF);\n  }\n\n  /**\n   * Compute the size of a UTF-8 string by counting its number of bytes\n   * (and not the number of characters composing the string)\n   */\n  private static sizeOfUTF8(s: string): number {\n    if (s) {\n      const matches = encodeURI(s).match(/%..|./g) || [];\n      return matches.length;\n    } else {\n      return 0;\n    }\n  }\n\n  /**\n   * deserialize a STOMP Frame from raw data.\n   *\n   * @internal\n   */\n  public static unmarshallSingle(data: any, escapeHeaderValues: boolean): Frame {\n    // search for 2 consecutives LF byte to split the command\n    // and headers from the body\n    const divider = data.search(new RegExp(`${Byte.LF}${Byte.LF}`));\n    const headerLines: string[] = data.substring(0, divider).split(Byte.LF);\n    const command = headerLines.shift();\n    const headers: StompHeaders = {};\n    // utility function to trim any whitespace before and after a string\n    const trim = (str: string): string => str.replace(/^\\s+|\\s+$/g, '');\n    // Parse headers in reverse order so that for repeated headers, the 1st\n    // value is used\n    for (let line of headerLines.reverse()) {\n      const idx = line.indexOf(':');\n\n      const key = <string>trim(line.substring(0, idx));\n      let value = trim(line.substring(idx + 1));\n\n      if (escapeHeaderValues && (command !== 'CONNECT') && (command !== 'CONNECTED')) {\n        value = Frame.frUnEscape(value);\n      }\n\n      headers[key] = value;\n    }\n    // Parse body\n    // check for content-length or  topping at the first NULL byte found.\n    let body = '';\n    // skip the 2 LF bytes that divides the headers from the body\n    const start = divider + 2;\n    if (headers['content-length']) {\n      const len = parseInt(<string>headers['content-length']);\n      body = (`${data}`).substring(start, start + len);\n    } else {\n      let chr = null;\n      for (let i = start, end = data.length, asc = start <= end; asc ? i < end : i > end; asc ? i++ : i--) {\n        chr = data.charAt(i);\n        if (chr === Byte.NULL) {\n          break;\n        }\n        body += chr;\n      }\n    }\n    return new Frame(<string>command, headers, body, escapeHeaderValues);\n  }\n\n  /**\n   * Split the data before unmarshalling every single STOMP frame.\n   * Web socket servers can send multiple frames in a single websocket message.\n   * If the message size exceeds the websocket message size, then a single\n   * frame can be fragmented across multiple messages.\n   *\n   * @internal\n   */\n  public static unmarshall(datas: any, escapeHeaderValues: boolean): unmarshallResults {\n    // Ugly list comprehension to split and unmarshall *multiple STOMP frames*\n    // contained in a *single WebSocket frame*.\n    // The data is split when a NULL byte (followed by zero or many LF bytes) is\n    // found\n    if (escapeHeaderValues == null) {\n      escapeHeaderValues = false;\n    }\n    const frames = datas.split(new RegExp(`${Byte.NULL}${Byte.LF}*`));\n\n    const r: unmarshallResults = {\n      frames: [],\n      partial: ''\n    };\n    r.frames = (frames.slice(0, -1).map((frame: Frame) => Frame.unmarshallSingle(frame, escapeHeaderValues)));\n\n    // If this contains a final full message or just a acknowledgement of a PING\n    // without any other content, process this frame, otherwise return the\n    // contents of the buffer to the caller.\n    const last_frame = frames.slice(-1)[0];\n\n    if ((last_frame === Byte.LF) || ((last_frame.search(new RegExp(`${Byte.NULL}${Byte.LF}*$`))) !== -1)) {\n      r.frames.push(Frame.unmarshallSingle(last_frame, escapeHeaderValues));\n    } else {\n      r.partial = last_frame;\n    }\n    return r;\n  }\n\n  /**\n   * Serialize a STOMP frame as per STOMP standards, suitable to be sent to the STOMP broker.\n   *\n   * @internal\n   */\n  public static marshall(command: string, headers: StompHeaders, body: any, escapeHeaderValues: boolean) {\n    const frame = new Frame(command, headers, body, escapeHeaderValues);\n    return frame.toString() + Byte.NULL;\n  }\n\n  /**\n   *  Escape header values\n   */\n  private static frEscape(str: string): string {\n    return str.replace(/\\\\/g, \"\\\\\\\\\").replace(/\\r/g, \"\\\\r\").replace(/\\n/g, \"\\\\n\").replace(/:/g, \"\\\\c\");\n  }\n\n  /**\n   * UnEscape header values\n   */\n  private static frUnEscape(str: string): string {\n    return str.replace(/\\\\r/g, \"\\r\").replace(/\\\\n/g, \"\\n\").replace(/\\\\c/g, \":\").replace(/\\\\\\\\/g, \"\\\\\");\n  }\n}\n","import {Frame} from \"./frame\";\nimport {Stomp} from \"./compatibility/stomp\";\nimport {Byte} from \"./byte\";\nimport {StompHeaders} from \"./stomp-headers\";\nimport {Message} from \"./message\";\nimport {StompSubscription} from \"./stomp-subscription\";\nimport {Transaction} from \"./transaction\";\nimport {Versions} from \"./versions\";\nimport {frameCallbackType, messageCallbackType} from \"./types\";\nimport {StompConfig} from \"./stomp-config\";\n\n/**\n * STOMP Client Class.\n */\nexport class Client {\n  /**\n   * This function should return a WebSocket or a similar (e.g. SockJS) object.\n   */\n  public webSocketFactory: () => any;\n\n  /**\n   *  automatically reconnect with delay in milliseconds, set to 0 to disable\n   */\n  public reconnectDelay: number = 5000;\n\n  /**\n   * Incoming heartbeat interval in milliseconds. Set to 0 to disable\n   */\n  public heartbeatIncoming: number = 10000;\n\n  /**\n   * Outgoing heartbeat interval in milliseconds. Set to 0 to disable\n   */\n  public heartbeatOutgoing: number = 10000;\n\n  // public heartbeat: { outgoing: number; incoming: number };\n\n  /**\n   * Maximum WebSocket frame size sent by the client. If the STOMP frame\n   * is bigger than this value, the STOMP frame will be sent using multiple\n   * WebSocket frames (default is 16KiB)\n   */\n  public maxWebSocketFrameSize: number = 16 * 1024;\n\n  /**\n   * Underlying WebSocket instance, READONLY\n   */\n  get webSocket(): any {\n    return this._webSocket;\n  }\n  /**\n   * Underlying WebSocket instance\n   * @internal\n   */\n  protected _webSocket: any;\n\n  /**\n   * Connection headers, important keys - `login`, `passcode`, `host`\n   */\n  public connectHeaders: StompHeaders;\n\n  /**\n   * Disconnection headers\n   */\n  public disconnectHeaders: StompHeaders;\n\n  /**\n   * This function will be called for any unhandled messages. It is useful to receive messages sent to\n   * temporary queues (for example RabbitMQ supports such queues).\n   *\n   * It can also be called for stray messages while the server is processing a request to unsubcribe\n   * from an endpoint.\n   */\n  public onUnhandledMessage: messageCallbackType;\n\n  /**\n   * STOMP brokers can be requested to notify when an operation is actually completed.\n   *\n   * TODO: add example\n   */\n  public onReceipt: frameCallbackType;\n\n  /**\n   * `true` if there is a active connection with STOMP Broker\n   */\n  get connected(): boolean {\n    return this._connected;\n  }\n  private _connected: boolean;\n\n  /**\n   * Callback\n   */\n  public onConnect: frameCallbackType;\n\n  /**\n   * Callback\n   */\n  public onDisconnect: frameCallbackType;\n\n  /**\n   * Callback\n   */\n  public onStompError: any;\n\n  /**\n   * Callback\n   */\n  public onWebSocketClose: any;\n\n  /**\n   * By default, debug messages are discarded. To log to `console` following can be used:\n   *\n   * ```javascript\n   *        client.debug = function(str) {\n   *          console.log(str);\n   *        };\n   * ```\n   *\n   * This method is called for every actual transmission of the STOMP frames over the\n   * WebSocket.\n   */\n  public debug: (...message: any[]) => void = (...message: any[]) => {};\n\n  /**\n   * version of STOMP protocol negotiated with the server, READONLY\n   */\n  get version(): string {\n    return this._version;\n  }\n  private _version: string;\n\n  private _subscriptions: { [key: string]: messageCallbackType };\n  private _partialData: string;\n  private _escapeHeaderValues: boolean;\n  private _counter: number;\n  private _pinger: any;\n  private _ponger: any;\n  private _lastServerActivityTS: number;\n  private _active: boolean = false;\n  private _closeReceipt: string;\n  private _reconnector: any;\n\n  /**\n   * Please do not create instance of this class directly, use one of the methods [Stomp.client]{@link Stomp#client},\n   * [Stomp.over]{@link Stomp#over} in {@link Stomp}.\n   */\n  constructor(conf: StompConfig = {}) {\n    // Dummy callbacks\n    const noOp = () => {};\n    this.onConnect = noOp;\n    this.onDisconnect = noOp;\n    this.onUnhandledMessage = noOp;\n    this.onReceipt = noOp;\n\n    // These parameters would typically get proper values before connect is called\n    this.connectHeaders = {};\n    this.disconnectHeaders = {};\n    this.webSocketFactory = () => null;\n\n    // Internal fields\n\n    // used to index subscribers\n    this._counter = 0;\n\n    // current connection state\n    this._connected = false;\n\n    // subscription callbacks indexed by subscriber's ID\n    this._subscriptions = {};\n\n    this._partialData = '';\n\n    this._closeReceipt = '';\n\n    this._version  = '';\n\n    this._escapeHeaderValues = false;\n\n    this._lastServerActivityTS = Date.now();\n\n    // Apply configuration\n    this.configure(conf);\n  }\n\n  /**\n   * Update configuration. See {@link StompConfig} for details of configuration options.\n   */\n  public configure(conf: StompConfig): void {\n    // bulk assign all properties to this\n    (<any>Object).assign(this, conf);\n  }\n\n  private _transmit(command: string, headers: StompHeaders, body: string = ''): void {\n    let out = Frame.marshall(command, headers, body, this._escapeHeaderValues);\n    this.debug(`>>> ${out}`);\n    // if necessary, split the *STOMP* frame to send it on many smaller\n    // *WebSocket* frames\n    while (true) {\n      if (out.length > this.maxWebSocketFrameSize) {\n        this._webSocket.send(out.substring(0, this.maxWebSocketFrameSize));\n        out = out.substring(this.maxWebSocketFrameSize);\n        this.debug(`remaining = ${out.length}`);\n      } else {\n        this._webSocket.send(out);\n        return;\n      }\n    }\n  }\n\n  private _setupHeartbeat(headers: StompHeaders): void {\n    let ttl: number;\n    if ((headers.version !== Versions.V1_1 && headers.version !== Versions.V1_2)) {\n      return;\n    }\n\n    // heart-beat header received from the server looks like:\n    //\n    //     heart-beat: sx, sy\n    const [serverOutgoing, serverIncoming] = (<string>headers['heart-beat']).split(\",\").map((v: string) => parseInt(v));\n\n    if ((this.heartbeatOutgoing !== 0) && (serverIncoming !== 0)) {\n      ttl = Math.max(this.heartbeatOutgoing, serverIncoming);\n      this.debug(`send PING every ${ttl}ms`);\n      this._pinger = setInterval(() => {\n        this._webSocket.send(Byte.LF);\n        this.debug(\">>> PING\");\n      }, ttl);\n    }\n\n    if ((this.heartbeatIncoming !== 0) && (serverOutgoing !== 0)) {\n      ttl = Math.max(this.heartbeatIncoming, serverOutgoing);\n      this.debug(`check PONG every ${ttl}ms`);\n      this._ponger = setInterval(() => {\n        const delta = Date.now() - this._lastServerActivityTS;\n        // We wait twice the TTL to be flexible on window's setInterval calls\n        if (delta > (ttl * 2)) {\n          this.debug(`did not receive server activity for the last ${delta}ms`);\n          this._webSocket.close();\n        }\n      }, ttl);\n    }\n  }\n\n  /**\n   * The `connect` method accepts different number of arguments and types. See the Overloads list. Use the\n   * version with headers to pass your broker specific options.\n   *\n   * ```javascript\n   *        client.connect('guest, 'guest', function(frame) {\n   *          client.debug(\"connected to Stomp\");\n   *          client.subscribe(destination, function(message) {\n   *            $(\"#messages\").append(\"<p>\" + message.body + \"</p>\\n\");\n   *          });\n   *        });\n   * ```\n   *\n   * @note When auto reconnect is active, `connectCallback` and `errorCallback` will be called on each connect or error\n   *\n   * @see http:*stomp.github.com/stomp-specification-1.2.html#CONNECT_or_STOMP_Frame CONNECT Frame\n   */\n  public connect(): void {\n    this._escapeHeaderValues = false;\n\n    // Indicate that this connection is active (it will keep trying to connect)\n    this._active = true;\n\n    this._connect();\n  }\n\n  private _connect(): void {\n    if (!this._active) {\n      this.debug('Client has been marked inactive, will not attempt to connect');\n      return;\n    }\n\n    this.debug(\"Opening Web Socket...\");\n\n    // Get the actual Websocket (or a similar object)\n    this._webSocket = this._createWebSocket();\n\n    this._webSocket.onmessage = (evt: any) => {\n      this.debug('Received data');\n      const data = (() => {\n        if ((typeof(ArrayBuffer) !== 'undefined') && evt.data instanceof ArrayBuffer) {\n          // the data is stored inside an ArrayBuffer, we decode it to get the\n          // data as a String\n          const arr = new Uint8Array(evt.data);\n          this.debug(`--- got data length: ${arr.length}`);\n          // Return a string formed by all the char codes stored in the Uint8array\n          let j, len1, results;\n          results = [];\n          for (j = 0, len1 = arr.length; j < len1; j++) {\n            const c = arr[j];\n            results.push(String.fromCharCode(c));\n          }\n\n          return results.join('');\n        } else {\n          // take the data directly from the WebSocket `data` field\n          return evt.data;\n        }\n      })();\n      this.debug(data);\n      this._lastServerActivityTS = Date.now();\n      if (data === Byte.LF) { // heartbeat\n        this.debug(\"<<< PONG\");\n        return;\n      }\n      this.debug(`<<< ${data}`);\n      // Handle STOMP frames received from the server\n      // The unmarshall function returns the frames parsed and any remaining\n      // data from partial frames.\n      const unmarshalledData = Frame.unmarshall(this._partialData + data, this._escapeHeaderValues);\n      this._partialData = unmarshalledData.partial;\n      for (let frame of unmarshalledData.frames) {\n        switch (frame.command) {\n          // [CONNECTED Frame](http://stomp.github.com/stomp-specification-1.2.html#CONNECTED_Frame)\n          case \"CONNECTED\":\n            this.debug(`connected to server ${frame.headers.server}`);\n            this._connected = true;\n            this._version = <string>frame.headers.version;\n            // STOMP version 1.2 needs header values to be escaped\n            if (this._version === Versions.V1_2) {\n              this._escapeHeaderValues = true;\n            }\n\n            // If a disconnect was requested while I was connecting, issue a disconnect\n            if (!this._active) {\n              this.disconnect();\n              return;\n            }\n\n            this._setupHeartbeat(frame.headers);\n            if (typeof this.onConnect === 'function') {\n              this.onConnect(frame);\n            }\n            break;\n          // [MESSAGE Frame](http://stomp.github.com/stomp-specification-1.2.html#MESSAGE)\n          case \"MESSAGE\":\n            // the `onreceive` callback is registered when the client calls\n            // `subscribe()`.\n            // If there is registered subscription for the received message,\n            // we used the default `onreceive` method that the client can set.\n            // This is useful for subscriptions that are automatically created\n            // on the browser side (e.g. [RabbitMQ's temporary\n            // queues](http://www.rabbitmq.com/stomp.html)).\n            const subscription = <string>frame.headers.subscription;\n            const onreceive = this._subscriptions[subscription] || this.onUnhandledMessage;\n            // bless the frame to be a Message\n            const message = <Message>frame;\n            if (onreceive) {\n              let messageId: string;\n              const client = this;\n              if (this._version === Versions.V1_2) {\n                messageId = <string>message.headers[\"ack\"];\n              } else {\n                messageId = <string>message.headers[\"message-id\"];\n              }\n              // add `ack()` and `nack()` methods directly to the returned frame\n              // so that a simple call to `message.ack()` can acknowledge the message.\n              message.ack = (headers: StompHeaders = {}): void => {\n                return client.ack(messageId, subscription, headers);\n              };\n              message.nack = (headers: StompHeaders = {}): void => {\n                return client.nack(messageId, subscription, headers);\n              };\n              onreceive(message);\n            } else {\n              this.debug(`Unhandled received MESSAGE: ${message}`);\n            }\n            break;\n          // [RECEIPT Frame](http://stomp.github.com/stomp-specification-1.2.html#RECEIPT)\n          //\n          // The client instance can set its `onreceipt` field to a function taking\n          // a frame argument that will be called when a receipt is received from\n          // the server:\n          //\n          //     client.onreceipt = function(frame) {\n          //       receiptID = frame.headers['receipt-id'];\n          //       ...\n          //     }\n          case \"RECEIPT\":\n            // if this is the receipt for a DISCONNECT, close the websocket\n            if (frame.headers[\"receipt-id\"] === this._closeReceipt) {\n              // Discard the onclose callback to avoid calling the errorCallback when\n              // the client is properly disconnected.\n              this._webSocket.onclose = null;\n              this._webSocket.close();\n              this._cleanUp();\n              if (typeof this.onDisconnect === 'function') {\n                this.onDisconnect(frame);\n              }\n            } else {\n              if (typeof this.onReceipt === 'function') {\n                this.onReceipt(frame);\n              }\n            }\n            break;\n          // [ERROR Frame](http://stomp.github.com/stomp-specification-1.2.html#ERROR)\n          case \"ERROR\":\n            if (typeof this.onStompError === 'function') {\n              this.onStompError(frame);\n            }\n            break;\n          default:\n            this.debug(`Unhandled frame: ${frame}`);\n        }\n      }\n    };\n\n    this._webSocket.onclose = (closeEvent: any): void => {\n      const msg = `Whoops! Lost connection to ${this._webSocket.url}`;\n      this.debug(msg);\n      if (typeof this.onWebSocketClose === 'function') {\n        this.onWebSocketClose(closeEvent);\n      }\n      this._cleanUp();\n      if (typeof this.onStompError === 'function') {\n        this.onStompError(msg);\n      }\n      this._schedule_reconnect();\n    };\n\n    this._webSocket.onopen = () => {\n      this.debug('Web Socket Opened...');\n      this.connectHeaders[\"accept-version\"] = Versions.supportedVersions();\n      this.connectHeaders[\"heart-beat\"] = [this.heartbeatOutgoing, this.heartbeatIncoming].join(',');\n      this._transmit(\"CONNECT\", this.connectHeaders);\n    };\n  }\n\n  private _createWebSocket() {\n    const webSocket = this.webSocketFactory();\n    webSocket.binaryType = \"arraybuffer\";\n    return webSocket;\n  }\n\n  private _schedule_reconnect(): void {\n    if (this.reconnectDelay > 0) {\n      this.debug(`STOMP: scheduling reconnection in ${this.reconnectDelay}ms`);\n      // setTimeout is available in both Browser and Node.js environments\n      this._reconnector = setTimeout(() => {\n          if (this._connected) {\n            this.debug('STOMP: already connected')\n          } else {\n            this.debug('STOMP: attempting to reconnect');\n            this._connect();\n          }\n        }, this.reconnectDelay);\n    }\n  }\n\n  /**\n   * Disconnect from the STOMP broker. To ensure graceful shutdown it sends a DISCONNECT Frame\n   * and wait till the broker acknowledges.\n   *\n   * disconnectCallback will be called only if the broker was actually connected.\n   *\n   * @see http://stomp.github.com/stomp-specification-1.2.html#DISCONNECT DISCONNECT Frame\n   */\n  public disconnect(): void {\n    // indicate that auto reconnect loop should terminate\n    this._active = false;\n\n    if (this._connected) {\n      if (!this.disconnectHeaders['receipt']) {\n        this.disconnectHeaders['receipt'] = `close-${this._counter++}`;\n      }\n      this._closeReceipt = <string>this.disconnectHeaders['receipt'];\n      try {\n        this._transmit(\"DISCONNECT\", this.disconnectHeaders);\n      } catch (error) {\n        this.debug('Ignoring error during disconnect', error);\n      }\n    }\n  }\n\n  private _cleanUp(): void {\n    // Clear if a reconnection was scheduled\n    if (this._reconnector) {\n      clearTimeout(this._reconnector);\n    }\n\n    this._connected = false;\n    this._subscriptions = {};\n    if (this._pinger) {\n      clearInterval(this._pinger);\n    }\n    if (this._ponger) {\n      clearInterval(this._ponger);\n    }\n  }\n\n  /**\n   * Send a message to a named destination. Refer to your STOMP broker documentation for types\n   * and naming of destinations. The headers will, typically, be available to the subscriber.\n   * However, there may be special purpose headers corresponding to your STOMP broker.\n   *\n   * Note: Body must be String. You will need to covert the payload to string in case it is not string (e.g. JSON)\n   *\n   * ```javascript\n   *        client.send(\"/queue/test\", {priority: 9}, \"Hello, STOMP\");\n   *\n   *        // If you want to send a message with a body, you must also pass the headers argument.\n   *        client.send(\"/queue/test\", {}, \"Hello, STOMP\");\n   * ```\n   *\n   * @see http://stomp.github.com/stomp-specification-1.2.html#SEND SEND Frame\n   */\n  public send(destination: string, headers: StompHeaders = {}, body: string = ''): void {\n    headers.destination = destination;\n    this._transmit(\"SEND\", headers, body);\n  }\n\n  /**\n   * Subscribe to a STOMP Broker location. The callbck will be invoked for each received message with\n   * the {@link Message} as argument.\n   *\n   * Note: The library will generate an unique ID if there is none provided in the headers.\n   *       To use your own ID, pass it using the headers argument.\n   *\n   * ```javascript\n   *        callback = function(message) {\n   *        // called when the client receives a STOMP message from the server\n   *          if (message.body) {\n   *            alert(\"got message with body \" + message.body)\n   *          } else {\n   *            alert(\"got empty message\");\n   *          }\n   *        });\n   *\n   *        var subscription = client.subscribe(\"/queue/test\", callback);\n   *\n   *        // Explicit subscription id\n   *        var mySubId = 'my-subscription-id-001';\n   *        var subscription = client.subscribe(destination, callback, { id: mySubId });\n   * ```\n   *\n   * @see http://stomp.github.com/stomp-specification-1.2.html#SUBSCRIBE SUBSCRIBE Frame\n   */\n  public subscribe(destination: string, callback: messageCallbackType, headers: StompHeaders = {}): StompSubscription {\n    if (!headers.id) {\n      headers.id = `sub-${this._counter++}`;\n    }\n    headers.destination = destination;\n    this._subscriptions[<string>headers.id] = callback;\n    this._transmit(\"SUBSCRIBE\", headers);\n    const client = this;\n    return {\n      id: <string>headers.id,\n\n      unsubscribe(hdrs) {\n        return client.unsubscribe(<string>headers.id, hdrs);\n      }\n    };\n  }\n\n  /**\n   * It is preferable to unsubscribe from a subscription by calling\n   * `unsubscribe()` directly on {@link StompSubscription} returned by `client.subscribe()`:\n   *\n   * ```javascript\n   *        var subscription = client.subscribe(destination, onmessage);\n   *        // ...\n   *        subscription.unsubscribe();\n   * ```\n   *\n   * @see http://stomp.github.com/stomp-specification-1.2.html#UNSUBSCRIBE UNSUBSCRIBE Frame\n   */\n  public unsubscribe(id: string, headers: StompHeaders = {}): void {\n    if (headers == null) {\n      headers = {};\n    }\n    delete this._subscriptions[id];\n    headers.id = id;\n    this._transmit(\"UNSUBSCRIBE\", headers);\n  }\n\n  /**\n   * Start a transaction, the returned {@link Transaction} has methods - [commit]{@link Transaction#commit}\n   * and [abort]{@link Transaction#abort}.\n   *\n   * @see http://stomp.github.com/stomp-specification-1.2.html#BEGIN BEGIN Frame\n   */\n  public begin(transactionId: string): Transaction {\n    const txId = transactionId || (`tx-${this._counter++}`);\n    this._transmit(\"BEGIN\", {\n      transaction: txId\n    });\n    const client = this;\n    return {\n      id: txId,\n      commit(): void {\n        client.commit(txId);\n      },\n      abort(): void {\n        client.abort(txId);\n      }\n    };\n  }\n\n  /**\n   * Commit a transaction.\n   * It is preferable to commit a transaction by calling [commit]{@link Transaction#commit} directly on\n   * {@link Transaction} returned by [client.begin]{@link Client#begin}.\n   *\n   * ```javascript\n   *        var tx = client.begin(txId);\n   *        //...\n   *        tx.commit();\n   * ```\n   *\n   * @see http://stomp.github.com/stomp-specification-1.2.html#COMMIT COMMIT Frame\n   */\n  public commit(transactionId: string): void {\n    this._transmit(\"COMMIT\", {\n      transaction: transactionId\n    });\n  }\n\n  /**\n   * Abort a transaction.\n   * It is preferable to abort a transaction by calling [abort]{@link Transaction#abort} directly on\n   * {@link Transaction} returned by [client.begin]{@link Client#begin}.\n   *\n   * ```javascript\n   *        var tx = client.begin(txId);\n   *        //...\n   *        tx.abort();\n   * ```\n   *\n   * @see http://stomp.github.com/stomp-specification-1.2.html#ABORT ABORT Frame\n   */\n  public abort(transactionId: string): void {\n    this._transmit(\"ABORT\", {\n      transaction: transactionId\n    });\n  }\n\n  /**\n   * ACK a message. It is preferable to acknowledge a message by calling [ack]{@link Message#ack} directly\n   * on the {@link Message} handled by a subscription callback:\n   *\n   * ```javascript\n   *        var callback = function (message) {\n   *          // process the message\n   *          // acknowledge it\n   *          message.ack();\n   *        };\n   *        client.subscribe(destination, callback, {'ack': 'client'});\n   * ```\n   *\n   * @see http://stomp.github.com/stomp-specification-1.2.html#ACK ACK Frame\n   */\n  public ack(messageId: string, subscriptionId: string, headers: StompHeaders = {}): void {\n    if (this._version === Versions.V1_2) {\n      headers[\"id\"] = messageId;\n    } else {\n      headers[\"message-id\"] = messageId;\n    }\n    headers.subscription = subscriptionId;\n    this._transmit(\"ACK\", headers);\n  }\n\n  /**\n   * NACK a message. It is preferable to acknowledge a message by calling [nack]{@link Message#nack} directly\n   * on the {@link Message} handled by a subscription callback:\n   *\n   * ```javascript\n   *        var callback = function (message) {\n   *          // process the message\n   *          // an error occurs, nack it\n   *          message.nack();\n   *        };\n   *        client.subscribe(destination, callback, {'ack': 'client'});\n   * ```\n   *\n   * @see http://stomp.github.com/stomp-specification-1.2.html#NACK NACK Frame\n   */\n  public nack(messageId: string, subscriptionId: string, headers: StompHeaders = {}): void {\n    if (this._version === Versions.V1_2) {\n      headers[\"id\"] = messageId;\n    } else {\n      headers[\"message-id\"] = messageId;\n    }\n    headers.subscription = subscriptionId;\n    return this._transmit(\"NACK\", headers);\n  }\n}","import {Versions} from \"../versions\";\nimport {CompatClient} from \"./compat-client\";\n\n/**\n * STOMP Class, acts like a factory to create {@link Client}.\n */\nexport class Stomp {\n  /**\n   * In case you need to use a non standard class for WebSocket.\n   *\n   * For example when using within NodeJS environment:\n   *\n   * ```javascript\n   *        StompJs = require('../../esm5/');\n   *        Stomp = StompJs.Stomp;\n   *        Stomp.WebSocketClass = require('websocket').w3cwebsocket;\n   * ```\n   */\n  public static WebSocketClass:any = null;\n\n  /**\n   * This method creates a WebSocket client that is connected to\n   * the STOMP server located at the url.\n   *\n   * ```javascript\n   *        var url = \"ws://localhost:61614/stomp\";\n   *        var client = Stomp.client(url);\n   * ```\n   */\n  public static client (url: string, protocols: string[]): CompatClient {\n    // This is a hack to allow another implementation than the standard\n    // HTML5 WebSocket class.\n    //\n    // It is possible to use another class by calling\n    //\n    //     Stomp.WebSocketClass = MozWebSocket\n    //\n    // *prior* to call `Stomp.client()`.\n    //\n    // This hack is deprecated and `Stomp.over()` method should be used\n    // instead.\n\n    // See remarks on the function Stomp.over\n    if (protocols == null) { protocols = Versions.protocolVersions(); }\n    const ws_fn= function() {\n      const klass = Stomp.WebSocketClass || WebSocket;\n      return new klass(url, protocols);\n    };\n\n    return new CompatClient(ws_fn);\n  }\n\n  /**\n   * This method is an alternative to [Stomp#client]{@link Stomp#client} to let the user\n   * specify the WebSocket to use (either a standard HTML5 WebSocket or\n   * a similar object).\n   *\n   * In order to support reconnection, the function Client._connect should be callable more than once. While reconnecting\n   * a new instance of underlying transport (TCP Socket, WebSocket or SockJS) will be needed. So, this function\n   * alternatively allows passing a function that should return a new instance of the underlying socket.\n   *\n   * ```javascript\n   *        var client = Stomp.over(function(){\n   *          return new WebSocket('ws://localhost:15674/ws')\n   *        });\n   * ```\n   */\n  public static over (ws: any): CompatClient {\n    const ws_fn = typeof(ws) === \"function\" ? ws : () => ws;\n\n    return new CompatClient(ws_fn);\n  }\n}\n","export * from './stomp-headers';\nexport * from './client';\nexport * from './frame';\nexport * from './versions';\n\n// Compatibility code\nexport * from './compatibility/stomp';\nexport * from './compatibility/compat-client';\n"],"sourceRoot":""}