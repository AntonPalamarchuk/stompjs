{"version":3,"sources":["webpack://StompJs/webpack/universalModuleDefinition","webpack://StompJs/webpack/bootstrap","webpack://StompJs/./src/byte.ts","webpack://StompJs/./src/client.ts","webpack://StompJs/./src/frame.ts","webpack://StompJs/./src/index.ts","webpack://StompJs/./src/stomp.ts"],"names":[],"mappings":"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","file":"stomp.umd.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"StompJs\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"StompJs\"] = factory();\n\telse\n\t\troot[\"StompJs\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","export const Byte = {\n  // LINEFEED byte (octet 10)\n  LF: '\\x0A',\n  // NULL byte (octet 0)\n  NULL: '\\x00'\n};\n","// STOMP Client Class\n//\n// All STOMP protocol is exposed as methods of this class (`connect()`,\n// `send()`, etc.)\n// `send()`, etc.)\n\nimport {Frame} from \"./frame\";\nimport {Stomp} from \"./stomp\";\nimport {Byte} from \"./byte\";\nimport {StompHeaders} from \"./headers\";\n\nexport class Client {\n  public ws_fn: () => any;\n  public reconnect_delay: number;\n  private counter: number;\n  private connected: boolean;\n  public heartbeat: { outgoing: number; incoming: number };\n  public maxWebSocketFrameSize: number;\n  private subscriptions: any;\n  private partialData: any;\n  private escapeHeaderValues: boolean;\n  public ws: WebSocket;\n  private pinger: any;\n  private ponger: any;\n  private serverActivity: any;\n  private headers: StompHeaders;\n  private connectCallback: any;\n  private errorCallback: any;\n  private closeEventCallback: any;\n  private _active: boolean;\n  private version: string;\n  private onreceive: any;\n  private closeReceipt: string;\n  private _disconnectCallback: any;\n  private onreceipt: any;\n  private _reconnector: any;\n  private partial: string;\n\n    public static now (): any {\n      if (Date.now) {\n        return Date.now();\n      } else {\n        return new Date().valueOf;\n      }\n    }\n\n    // Please do not create instance of this class directly, use one of the methods {Stomp~client}, {Stomp~over}\n    // or {overTCP}\n    // in Stomp.\n    //\n    // @private\n    //\n    // @see Stomp\n    constructor(ws_fn: () => any) {\n      this.ws_fn = function () {\n        const ws = ws_fn();\n        ws.binaryType = \"arraybuffer\";\n        return ws;\n      };\n\n      // @property reconnect_delay [Number] automatically reconnect with delay in milliseconds, set to 0 to disable\n      this.reconnect_delay = 0;\n\n      // used to index subscribers\n      this.counter = 0;\n\n      // @property [Boolean] current connection state\n      this.connected = false;\n\n      // @property [{outgoing: Number, incoming: Number}] outgoing and incoming\n      // heartbeat in milliseconds, set to 0 to disable\n      this.heartbeat = {\n        // send heartbeat every 10s by default (value is in ms)\n        outgoing: 10000,\n        // expect to receive server heartbeat at least every 10s by default\n        // (value in ms)\n        incoming: 10000\n      };\n      // maximum *WebSocket* frame size sent by the client. If the STOMP frame\n      // is bigger than this value, the STOMP frame will be sent using multiple\n      // WebSocket frames (default is 16KiB)\n      this.maxWebSocketFrameSize = 16 * 1024;\n      // subscription callbacks indexed by subscriber's ID\n      this.subscriptions = {};\n      this.partialData = '';\n    }\n\n    // By default, debug messages are logged in the window's console if it is defined.\n    // This method is called for every actual transmission of the STOMP frames over the\n    // WebSocket.\n    //\n    // It is possible to set a `debug(message)` method\n    // on a client instance to handle differently the debug messages:\n    //\n    // @example\n    //     client.debug = function(str) {\n    //         // append the debug log to a #debug div\n    //         $(\"#debug\").append(str + \"\\n\");\n    //     };\n    //\n    // @example disable logging\n    //     client.debug = function(str) {};\n    //\n    // @note the default can generate lot of log on the console. Set it to empty function to disable\n    //\n    // @param message [String]\n    public debug = (...message) => {\n      console.log(...message);\n    };\n\n    // Base method to transmit any stomp frame\n    //\n    // @private\n    private _transmit(command, headers, body = ''): void {\n      let out = Frame.marshall(command, headers, body, this.escapeHeaderValues);\n      if (typeof this.debug === 'function') {\n        this.debug(`>>> ${out}`);\n      }\n      // if necessary, split the *STOMP* frame to send it on many smaller\n      // *WebSocket* frames\n      while (true) {\n        if (out.length > this.maxWebSocketFrameSize) {\n          this.ws.send(out.substring(0, this.maxWebSocketFrameSize));\n          out = out.substring(this.maxWebSocketFrameSize);\n          if (typeof this.debug === 'function') {\n            this.debug(`remaining = ${out.length}`);\n          }\n        } else {\n          this.ws.send(out);\n          return;\n        }\n      }\n    }\n\n    // Heart-beat negotiation\n    //\n    // @private\n    _setupHeartbeat(headers) {\n      let ttl;\n      if ((headers.version !== Stomp.VERSIONS.V1_1 && headers.version !== Stomp.VERSIONS.V1_2)) {\n        return;\n      }\n\n      // heart-beat header received from the server looks like:\n      //\n      //     heart-beat: sx, sy\n      const [serverOutgoing, serverIncoming] = headers['heart-beat'].split(\",\").map((v) => parseInt(v));\n\n      if ((this.heartbeat.outgoing !== 0) && (serverIncoming !== 0)) {\n        ttl = Math.max(this.heartbeat.outgoing, serverIncoming);\n        if (typeof this.debug === 'function') {\n          this.debug(`send PING every ${ttl}ms`);\n        }\n        // The `Stomp.setInterval` is a wrapper to handle regular callback\n        // that depends on the runtime environment (Web browser or node.js app)\n        this.pinger = Stomp.setInterval(ttl, () => {\n          this.ws.send(Byte.LF);\n          return (typeof this.debug === 'function' ? this.debug(\">>> PING\") : undefined);\n        });\n      }\n\n      if ((this.heartbeat.incoming !== 0) && (serverOutgoing !== 0)) {\n        ttl = Math.max(this.heartbeat.incoming, serverOutgoing);\n        if (typeof this.debug === 'function') {\n          this.debug(`check PONG every ${ttl}ms`);\n        }\n        return this.ponger = Stomp.setInterval(ttl, () => {\n          const delta = Client.now() - this.serverActivity;\n          // We wait twice the TTL to be flexible on window's setInterval calls\n          if (delta > (ttl * 2)) {\n            if (typeof this.debug === 'function') {\n              this.debug(`did not receive server activity for the last ${delta}ms`);\n            }\n            return this.ws.close();\n          }\n        });\n      }\n    }\n\n    // parse the arguments number and type to find the headers, connectCallback and\n    // (eventually undefined) errorCallback\n    //\n    // @private\n    _parseConnect(...args) {\n      let closeEventCallback, connectCallback, errorCallback;\n      let headers = {};\n      if (args.length < 2) {\n        throw(\"Connect requires at least 2 arguments\");\n      }\n      if (typeof(args[1]) === 'function') {\n        [headers, connectCallback, errorCallback, closeEventCallback] = args;\n      } else {\n        switch (args.length) {\n          case 6:\n            [headers['login'], headers['passcode'], connectCallback, errorCallback, closeEventCallback, headers['host']] = args;\n            break;\n          default:\n            [headers['login'], headers['passcode'], connectCallback, errorCallback, closeEventCallback] = args;\n        }\n      }\n\n      return [headers, connectCallback, errorCallback, closeEventCallback];\n    }\n\n    // @see http://stomp.github.com/stomp-specification-1.2.html#CONNECT_or_STOMP_Frame CONNECT Frame\n    //\n    // The `connect` method accepts different number of arguments and types. See the Overloads list. Use the\n    // version with headers to pass your broker specific options.\n    //\n    // @overload connect(headers, connectCallback)\n    //\n    // @overload connect(headers, connectCallback, errorCallback)\n    //\n    // @overload connect(login, passcode, connectCallback)\n    //\n    // @overload connect(login, passcode, connectCallback, errorCallback)\n    //\n    // @overload connect(login, passcode, connectCallback, errorCallback, closeEventCallback)\n    //\n    // @overload connect(login, passcode, connectCallback, errorCallback, closeEventCallback, host)\n    //\n    // @param headers [Object]\n    // @option headers [String] login\n    // @option headers [String] passcode\n    // @option headers [String] host virtual host to connect to. STOMP 1.2 makes it mandatory, however the broker may not mandate it\n    // @param connectCallback [function(Frame)] Called upon a successful connect or reconnect\n    // @param errorCallback [function(any)] Optional, called upon an error. The passed paramer may be a {Frame} or a message\n    // @param closeEventCallback [function(CloseEvent)] Optional, called when the websocket is closed.\n    //\n    // @param login [String]\n    // @param passcode [String]\n    // @param host [String] Optional, virtual host to connect to. STOMP 1.2 makes it mandatory, however the broker may not mandate it\n    //\n    // @example\n    //        client.connect('guest, 'guest', function(frame) {\n    //          client.debug(\"connected to Stomp\");\n    //          client.subscribe(destination, function(message) {\n    //            $(\"#messages\").append(\"<p>\" + message.body + \"</p>\\n\");\n    //          });\n    //        });\n    //\n    // @note When auto reconnect is active, `connectCallback` and `errorCallback` will be called on each connect or error\n    connect(...args) {\n      this.escapeHeaderValues = false;\n      const out = this._parseConnect(...args);\n      [this.headers, this.connectCallback, this.errorCallback, this.closeEventCallback] = out;\n\n      // Indicate that this connection is active (it will keep trying to connect)\n      this._active = true;\n\n      return this._connect();\n    }\n\n    // Refactored to make it callable multiple times, useful for reconnecting\n    //\n    // @private\n    _connect() {\n      const {headers} = this;\n      const {errorCallback} = this;\n      const {closeEventCallback} = this;\n\n      this.debug(headers);\n\n      if (typeof this.debug === 'function') {\n        this.debug(\"Opening Web Socket...\");\n      }\n\n      // Get the actual Websocket (or a similar object)\n      this.ws = this.ws_fn();\n\n      this.ws.onmessage = evt => {\n        this.debug('Received data');\n        const data = (() => {\n          if ((typeof(ArrayBuffer) !== 'undefined') && evt.data instanceof ArrayBuffer) {\n            // the data is stored inside an ArrayBuffer, we decode it to get the\n            // data as a String\n            const arr = new Uint8Array(evt.data);\n            if (typeof this.debug === 'function') {\n              this.debug(`--- got data length: ${arr.length}`);\n            }\n            // Return a string formed by all the char codes stored in the Uint8array\n            let j, len1, results;\n            results = [];\n            for (j = 0, len1 = arr.length; j < len1; j++) {\n              const c = arr[j];\n              results.push(String.fromCharCode(c));\n            }\n\n            return results.join('');\n          } else {\n            // take the data directly from the WebSocket `data` field\n            return evt.data;\n          }\n        })();\n        this.debug(data);\n        this.serverActivity = Client.now();\n        if (data === Byte.LF) { // heartbeat\n          if (typeof this.debug === 'function') {\n            this.debug(\"<<< PONG\");\n          }\n          return;\n        }\n        if (typeof this.debug === 'function') {\n          this.debug(`<<< ${data}`);\n        }\n        // Handle STOMP frames received from the server\n        // The unmarshall function returns the frames parsed and any remaining\n        // data from partial frames.\n        const unmarshalledData = Frame.unmarshall(this.partialData + data, this.escapeHeaderValues);\n        this.partialData = unmarshalledData.partial;\n        for (let frame of unmarshalledData.frames) {\n          switch (frame.command) {\n            // [CONNECTED Frame](http://stomp.github.com/stomp-specification-1.2.html#CONNECTED_Frame)\n            case \"CONNECTED\":\n              if (typeof this.debug === 'function') {\n                this.debug(`connected to server ${frame.headers.server}`);\n              }\n              this.connected = true;\n              this.version = frame.headers.version;\n              // STOMP version 1.2 needs header values to be escaped\n              if (this.version === Stomp.VERSIONS.V1_2) {\n                this.escapeHeaderValues = true;\n              }\n\n              // If a disconnect was requested while I was connecting, issue a disconnect\n              if (!this._active) {\n                // TODO: disconnect callback can no longer be part of disconnect call, it needs to be property of the\n                // client\n                this.disconnect(() => {});\n                return;\n              }\n\n              this._setupHeartbeat(frame.headers);\n              if (typeof this.connectCallback === 'function') {\n                this.connectCallback(frame);\n              }\n              break;\n            // [MESSAGE Frame](http://stomp.github.com/stomp-specification-1.2.html#MESSAGE)\n            case \"MESSAGE\":\n              // the `onreceive` callback is registered when the client calls\n              // `subscribe()`.\n              // If there is registered subscription for the received message,\n              // we used the default `onreceive` method that the client can set.\n              // This is useful for subscriptions that are automatically created\n              // on the browser side (e.g. [RabbitMQ's temporary\n              // queues](http://www.rabbitmq.com/stomp.html)).\n              const {subscription} = frame.headers;\n              const onreceive = this.subscriptions[subscription] || this.onreceive;\n              if (onreceive) {\n                let messageID;\n                const client = this;\n                if (this.version === Stomp.VERSIONS.V1_2) {\n                  messageID = frame.headers[\"ack\"];\n                } else {\n                  messageID = frame.headers[\"message-id\"];\n                }\n                // add `ack()` and `nack()` methods directly to the returned frame\n                // so that a simple call to `message.ack()` can acknowledge the message.\n                frame.ack = headers => {\n                  if (headers == null) {\n                    headers = {};\n                  }\n                  return client.ack(messageID, subscription, headers);\n                };\n                frame.nack = headers => {\n                  if (headers == null) {\n                    headers = {};\n                  }\n                  return client.nack(messageID, subscription, headers);\n                };\n                onreceive(frame);\n              } else {\n                if (typeof this.debug === 'function') {\n                  this.debug(`Unhandled received MESSAGE: ${frame}`);\n                }\n              }\n              break;\n            // [RECEIPT Frame](http://stomp.github.com/stomp-specification-1.2.html#RECEIPT)\n            //\n            // The client instance can set its `onreceipt` field to a function taking\n            // a frame argument that will be called when a receipt is received from\n            // the server:\n            //\n            //     client.onreceipt = function(frame) {\n            //       receiptID = frame.headers['receipt-id'];\n            //       ...\n            //     }\n            case \"RECEIPT\":\n              // if this is the receipt for a DISCONNECT, close the websocket\n              if (frame.headers[\"receipt-id\"] === this.closeReceipt) {\n                // Discard the onclose callback to avoid calling the errorCallback when\n                // the client is properly disconnected.\n                this.ws.onclose = null;\n                this.ws.close();\n                this._cleanUp();\n                if (typeof this._disconnectCallback === 'function') {\n                  this._disconnectCallback();\n                }\n              } else {\n                if (typeof this.onreceipt === 'function') {\n                  this.onreceipt(frame);\n                }\n              }\n              break;\n            // [ERROR Frame](http://stomp.github.com/stomp-specification-1.2.html#ERROR)\n            case \"ERROR\":\n              if (typeof errorCallback === 'function') {\n                errorCallback(frame);\n              }\n              break;\n            default:\n              if (typeof this.debug === 'function') {\n                this.debug(`Unhandled frame: ${frame}`);\n              }\n          }\n        }\n      };\n      this.ws.onclose = closeEvent => {\n        const msg = `Whoops! Lost connection to ${this.ws.url}`;\n        if (typeof this.debug === 'function') {\n          this.debug(msg);\n        }\n        if (typeof closeEventCallback === 'function') {\n          closeEventCallback(closeEvent);\n        }\n        this._cleanUp();\n        if (typeof errorCallback === 'function') {\n          errorCallback(msg);\n        }\n        return this._schedule_reconnect();\n      };\n\n      return this.ws.onopen = () => {\n        if (typeof this.debug === 'function') {\n          this.debug('Web Socket Opened...');\n        }\n        headers[\"accept-version\"] = Stomp.VERSIONS.supportedVersions();\n        headers[\"heart-beat\"] = [this.heartbeat.outgoing, this.heartbeat.incoming].join(',');\n        this.debug(headers);\n        this._transmit(\"CONNECT\", headers);\n      };\n    }\n\n    //\n    // @private\n    _schedule_reconnect() {\n      if (this.reconnect_delay > 0) {\n        if (typeof this.debug === 'function') {\n          this.debug(`STOMP: scheduling reconnection in ${this.reconnect_delay}ms`);\n        }\n        // setTimeout is available in both Browser and Node.js environments\n        return this._reconnector = setTimeout(() => {\n            if (this.connected) {\n              return (typeof this.debug === 'function' ? this.debug('STOMP: already connected') : undefined);\n            } else {\n              if (typeof this.debug === 'function') {\n                this.debug('STOMP: attempting to reconnect');\n              }\n              return this._connect();\n            }\n          }\n          , this.reconnect_delay);\n      }\n    }\n\n    // @see http://stomp.github.com/stomp-specification-1.2.html#DISCONNECT DISCONNECT Frame\n    //\n    // Disconnect from the STOMP broker. To ensure graceful shutdown it sends a DISCONNECT Frame\n    // and wait till the broker acknowledges.\n    //\n    // disconnectCallback will be called only if the broker was actually connected.\n    //\n    // @param disconnectCallback [function()]\n    // @param headers [Object] optional\n    disconnect(disconnectCallback, headers = {}) {\n      this._disconnectCallback = disconnectCallback;\n\n      // indicate that auto reconnect loop should terminate\n      this._active = false;\n\n      if (this.connected) {\n        if (!headers['receipt']) {\n          headers['receipt'] = `close-${this.counter++}`;\n        }\n        this.closeReceipt = headers['receipt'];\n        try {\n          return this._transmit(\"DISCONNECT\", headers);\n        } catch (error) {\n          return (typeof this.debug === 'function' ? this.debug('Ignoring error during disconnect', error) : undefined);\n        }\n      }\n    }\n\n    // Clean up client resources when it is disconnected or the server did not\n    // send heart beats in a timely fashion\n    //\n    // @private\n    _cleanUp() {\n      // Clear if a reconnection was scheduled\n      if (this._reconnector) {\n        clearTimeout(this._reconnector);\n      }\n\n      this.connected = false;\n      this.subscriptions = {};\n      this.partial = '';\n      if (this.pinger) {\n        Stomp.clearInterval(this.pinger);\n      }\n      if (this.ponger) {\n        return Stomp.clearInterval(this.ponger);\n      }\n    }\n\n    // @see http://stomp.github.com/stomp-specification-1.2.html#SEND SEND Frame\n    //\n    // Send a message to a named destination. Refer to your STOMP broker documentation for types\n    // and naming of destinations. The headers will, typically, be available to the subscriber.\n    // However, there may be special purpose headers corresponding to your STOMP broker.\n    //\n    // @param destination [String] mandatory\n    // @param headers [Object] Optional\n    // @param body [String] Optional\n    //\n    // @example\n    //     client.send(\"/queue/test\", {priority: 9}, \"Hello, STOMP\");\n    //\n    // @example payload without headers\n    //     # If you want to send a message with a body, you must also pass the headers argument.\n    //     client.send(\"/queue/test\", {}, \"Hello, STOMP\");\n    //\n    // @note Body must be String. You will need to covert the payload to string in case it is not string (e.g. JSON)\n    send(destination, headers, body) {\n      if (headers == null) {\n        headers = {};\n      }\n      if (body == null) {\n        body = '';\n      }\n      headers.destination = destination;\n      return this._transmit(\"SEND\", headers, body);\n    }\n\n    // @see http://stomp.github.com/stomp-specification-1.2.html#SUBSCRIBE SUBSCRIBE Frame\n    //\n    // Subscribe to a STOMP Broker location. The return value is an Object with unsubscribe method.\n    //\n    // @example\n    //    callback = function(message) {\n    //      // called when the client receives a STOMP message from the server\n    //      if (message.body) {\n    //        alert(\"got message with body \" + message.body)\n    //      } else\n    //      {\n    //        alert(\"got empty message\");\n    //      }\n    //    });\n    //\n    //  var subscription = client.subscribe(\"/queue/test\", callback);\n    //\n    // @example Explicit subscription id\n    //      var mysubid = 'my-subscription-id-001';\n    //      var subscription = client.subscribe(destination, callback, { id: mysubid });\n    //\n    // @param destination [String]\n    // @param callback [function(message)]\n    // @param headers [Object] optional\n    // @return [Object] this object has a method to `unsubscribe`\n    //\n    // @note The library will generate an unique ID if there is none provided in the headers. To use your own ID, pass it using the headers argument\n    subscribe(destination, callback, headers) {\n      // for convenience if the `id` header is not set, we create a new one for this client\n      // that will be returned to be able to unsubscribe this subscription\n      if (headers == null) {\n        headers = {};\n      }\n      if (!headers.id) {\n        headers.id = `sub-${this.counter++}`;\n      }\n      headers.destination = destination;\n      this.subscriptions[headers.id] = callback;\n      this._transmit(\"SUBSCRIBE\", headers);\n      const client = this;\n      return {\n        id: headers.id,\n\n        unsubscribe(hdrs) {\n          return client.unsubscribe(headers.id, hdrs);\n        }\n      };\n    }\n\n    // @see http://stomp.github.com/stomp-specification-1.2.html#UNSUBSCRIBE UNSUBSCRIBE Frame\n    //\n    // It is preferable to unsubscribe from a subscription by calling\n    // `unsubscribe()` directly on the object returned by `client.subscribe()`:\n    //\n    // @example\n    //     var subscription = client.subscribe(destination, onmessage);\n    //     ...\n    //     subscription.unsubscribe();\n    //\n    // @param id [String]\n    // @param headers [Object] optional\n    unsubscribe(id, headers) {\n      if (headers == null) {\n        headers = {};\n      }\n      delete this.subscriptions[id];\n      headers.id = id;\n      return this._transmit(\"UNSUBSCRIBE\", headers);\n    }\n\n    // @see http://stomp.github.com/stomp-specification-1.2.html#BEGIN BEGIN Frame\n    //\n    // Start a transaction, the returned Object has methods - `commit` and `abort`\n    //\n    // @param transaction_id [String] optional\n    // @return [Object] member, `id` - transaction id, methods `commit` and `abort`\n    //\n    // @note If no transaction ID is passed, one will be created automatically\n    begin(transaction_id) {\n      const txid = transaction_id || (`tx-${this.counter++}`);\n      this._transmit(\"BEGIN\", {\n        transaction: txid\n      });\n      const client = this;\n      return {\n        id: txid,\n        commit() {\n          return client.commit(txid);\n        },\n        abort() {\n          return client.abort(txid);\n        }\n      };\n    }\n\n    // @see http://stomp.github.com/stomp-specification-1.2.html#COMMIT COMMIT Frame\n    //\n    // Commit a transaction.\n    // It is preferable to commit a transaction by calling `commit()` directly on\n    // the object returned by `client.begin()`:\n    //\n    // @param transaction_id [String]\n    //\n    // @example\n    //     var tx = client.begin(txid);\n    //     ...\n    //     tx.commit();\n    commit(transaction_id) {\n      return this._transmit(\"COMMIT\", {\n        transaction: transaction_id\n      });\n    }\n\n    // @see http://stomp.github.com/stomp-specification-1.2.html#ABORT ABORT Frame\n    //\n    // Abort a transaction.\n    // It is preferable to abort a transaction by calling `abort()` directly on\n    // the object returned by `client.begin()`:\n    //\n    // @param transaction_id [String]\n    //\n    // @example\n    //     var tx = client.begin(txid);\n    //     ...\n    //     tx.abort();\n    abort(transaction_id) {\n      return this._transmit(\"ABORT\", {\n        transaction: transaction_id\n      });\n    }\n\n    // @see http://stomp.github.com/stomp-specification-1.2.html#ACK ACK Frame\n    //\n    // ACK a message. It is preferable to acknowledge a message by calling `ack()` directly\n    // on the message handled by a subscription callback:\n    //\n    // @example\n    //     client.subscribe(destination,\n    //       function(message) {\n    //         // process the message\n    //         // acknowledge it\n    //         message.ack();\n    //       },\n    //       {'ack': 'client'}\n    //     );\n    //\n    // @param messageID [String]\n    // @param subscription [String]\n    // @param headers [Object] optional\n    ack(messageID, subscription, headers) {\n      if (headers == null) {\n        headers = {};\n      }\n      if (this.version === Stomp.VERSIONS.V1_2) {\n        headers[\"id\"] = messageID;\n      } else {\n        headers[\"message-id\"] = messageID;\n      }\n      headers.subscription = subscription;\n      return this._transmit(\"ACK\", headers);\n    }\n\n    // @see http://stomp.github.com/stomp-specification-1.2.html#NACK NACK Frame\n    //\n    // NACK a message. It is preferable to nack a message by calling `nack()` directly on the\n    // message handled by a subscription callback:\n    //\n    // @example\n    //     client.subscribe(destination,\n    //       function(message) {\n    //         // process the message\n    //         // an error occurs, nack it\n    //         message.nack();\n    //       },\n    //       {'ack': 'client'}\n    //     );\n    //\n    // @param messageID [String]\n    // @param subscription [String]\n    // @param headers [Object] optional\n    nack(messageID, subscription, headers) {\n      if (headers == null) {\n        headers = {};\n      }\n      if (this.version === Stomp.VERSIONS.V1_2) {\n        headers[\"id\"] = messageID;\n      } else {\n        headers[\"message-id\"] = messageID;\n      }\n      headers.subscription = subscription;\n      return this._transmit(\"NACK\", headers);\n    }\n  }","// @see http://stomp.github.com/stomp-specification-1.2.html#STOMP_Frames STOMP Frame\n//\n// Frame class represents a STOMP frame\n//\nimport {StompHeaders} from \"./headers\";\nimport {Byte} from \"./byte\";\n\nexport class Frame {\n  public command: string;\n  public headers: StompHeaders;\n  public body: any;\n  public escapeHeaderValues: boolean;\n\n// Frame constructor. `command`, `headers` and `body` are available as properties.\n//\n// Many of the Client methods pass instance of received Frame to the callback.\n//\n// @param command [String]\n// @param headers [Object]\n// @param body [String]\n// @param escapeHeaderValues [Boolean]\n  constructor(command: string, headers: StompHeaders = {}, body: any = '', escapeHeaderValues: boolean = false) {\n    this.command = command;\n    this.headers = headers;\n    this.body = body;\n    this.escapeHeaderValues = escapeHeaderValues;\n  }\n\n// Provides a textual representation of the frame\n// suitable to be sent to the server\n//\n// @private\n  public toString(): string {\n    const lines = [this.command];\n    const skipContentLength = (this.headers['content-length'] === false) ? true : false;\n    if (skipContentLength) {\n      delete this.headers['content-length'];\n    }\n\n    for (let name of Object.keys(this.headers || {})) {\n      const value = this.headers[name];\n      if (this.escapeHeaderValues && (this.command !== 'CONNECT') && (this.command !== 'CONNECTED')) {\n        lines.push(`${name}:${Frame.frEscape(`${value}`)}`);\n      } else {\n        lines.push(`${name}:${value}`);\n      }\n    }\n    if (this.body && !skipContentLength) {\n      lines.push(`content-length:${Frame.sizeOfUTF8(this.body)}`);\n    }\n    lines.push(Byte.LF + this.body);\n    return lines.join(Byte.LF);\n  }\n\n// Compute the size of a UTF-8 string by counting its number of bytes\n// (and not the number of characters composing the string)\n//\n// @private\n  private static sizeOfUTF8(s: string): number {\n    if (s) {\n      return encodeURI(s).match(/%..|./g).length;\n    } else {\n      return 0;\n    }\n  }\n\n  // Unmarshall a single STOMP frame from a `data` string\n  //\n  // @private\n  public static unmarshallSingle(data: any, escapeHeaderValues: boolean): Frame {\n    // search for 2 consecutives LF byte to split the command\n    // and headers from the body\n    const divider = data.search(new RegExp(`${Byte.LF}${Byte.LF}`));\n    const headerLines = data.substring(0, divider).split(Byte.LF);\n    const command = headerLines.shift();\n    const headers = {};\n    // utility function to trim any whitespace before and after a string\n    const trim = str => str.replace(/^\\s+|\\s+$/g, '');\n    // Parse headers in reverse order so that for repeated headers, the 1st\n    // value is used\n    for (let line of headerLines.reverse()) {\n      const idx = line.indexOf(':');\n      if (escapeHeaderValues && (command !== 'CONNECT') && (command !== 'CONNECTED')) {\n        headers[trim(line.substring(0, idx))] = Frame.frUnEscape(trim(line.substring(idx + 1)));\n      } else {\n        headers[trim(line.substring(0, idx))] = trim(line.substring(idx + 1));\n      }\n    }\n    // Parse body\n    // check for content-length or  topping at the first NULL byte found.\n    let body = '';\n    // skip the 2 LF bytes that divides the headers from the body\n    const start = divider + 2;\n    if (headers['content-length']) {\n      const len = parseInt(headers['content-length']);\n      body = (`${data}`).substring(start, start + len);\n    } else {\n      let chr = null;\n      for (let i = start, end = data.length, asc = start <= end; asc ? i < end : i > end; asc ? i++ : i--) {\n        chr = data.charAt(i);\n        if (chr === Byte.NULL) {\n          break;\n        }\n        body += chr;\n      }\n    }\n    return new Frame(command, headers, body, escapeHeaderValues);\n  }\n\n// Split the data before unmarshalling every single STOMP frame.\n// Web socket servers can send multiple frames in a single websocket message.\n// If the message size exceeds the websocket message size, then a single\n// frame can be fragmented across multiple messages.\n//\n// `datas` is a string.\n//\n// returns an *array* of Frame objects\n//\n// @private\n  public static unmarshall(datas: any, escapeHeaderValues: boolean) {\n    // Ugly list comprehension to split and unmarshall *multiple STOMP frames*\n    // contained in a *single WebSocket frame*.\n    // The data is split when a NULL byte (followed by zero or many LF bytes) is\n    // found\n    if (escapeHeaderValues == null) {\n      escapeHeaderValues = false;\n    }\n    const frames = datas.split(new RegExp(`${Byte.NULL}${Byte.LF}*`));\n\n    const r = {\n      frames: [],\n      partial: ''\n    };\n    r.frames = (frames.slice(0, -1).map((frame) => Frame.unmarshallSingle(frame, escapeHeaderValues)));\n\n    // If this contains a final full message or just a acknowledgement of a PING\n    // without any other content, process this frame, otherwise return the\n    // contents of the buffer to the caller.\n    const last_frame = frames.slice(-1)[0];\n\n    if ((last_frame === Byte.LF) || ((last_frame.search(new RegExp(`${Byte.NULL}${Byte.LF}*$`))) !== -1)) {\n      r.frames.push(Frame.unmarshallSingle(last_frame, escapeHeaderValues));\n    } else {\n      r.partial = last_frame;\n    }\n    return r;\n  }\n\n// Marshall a Stomp frame\n//\n// @private\n  public static marshall(command: string, headers: StompHeaders, body: any, escapeHeaderValues: boolean) {\n    const frame = new Frame(command, headers, body, escapeHeaderValues);\n    return frame.toString() + Byte.NULL;\n  }\n\n// Escape header values\n//\n// @private\n  private static frEscape(str: string): string {\n    return str.replace(/\\\\/g, \"\\\\\\\\\").replace(/\\r/g, \"\\\\r\").replace(/\\n/g, \"\\\\n\").replace(/:/g, \"\\\\c\");\n  }\n\n// Escape header values\n//\n// @private\n  private static frUnEscape(str: string): string {\n    return str.replace(/\\\\r/g, \"\\r\").replace(/\\\\n/g, \"\\n\").replace(/\\\\c/g, \":\").replace(/\\\\\\\\/g, \"\\\\\");\n  }\n}\n","import {Stomp} from \"./stomp\";\n\nexport * from './headers';\nexport * from './client';\nexport * from './frame';\nexport * from './stomp';\n","// **STOMP Over Web Socket** is a JavaScript STOMP Client using\n// [HTML5 Web Sockets API](http://www.w3.org/TR/websockets).\n//\n// * Copyright (C) 2010-2012 [Jeff Mesnil](http://jmesnil.net/)\n// * Copyright (C) 2012 [FuseSource, Inc.](http://fusesource.com)\n// * Copyright (C) 2017 [Deepak Kumar](https://www.kreatio.com)\n//\n// This library supports:\n//\n// * [STOMP 1.0](http://stomp.github.com/stomp-specification-1.0.html)\n// * [STOMP 1.1](http://stomp.github.com/stomp-specification-1.1.html)\n// * [STOMP 1.2](http://stomp.github.com/stomp-specification-1.2.html)\n//\n// The library is accessed through the `Stomp` object that is set on the `window`\n// when running in a Web browser.\n\n/*\n   Stomp Over WebSocket http://www.jmesnil.net/stomp-websocket/doc/ | Apache License V2.0\n\n   Copyright (C) 2010-2013 [Jeff Mesnil](http://jmesnil.net/)\n   Copyright (C) 2012 [FuseSource, Inc.](http://fusesource.com)\n   Copyright (C) 2017 [Deepak Kumar](https://www.kreatio.com)\n*/\n\n// @mixin\n//\n// @private\nimport {Client} from \"./client\";\n\n\n// STOMP Client Class\n//\n// All STOMP protocol is exposed as methods of this class (`connect()`,\n\n// Stomp exposes methods to instantiate Client.\n//\n// @mixin\nexport class Stomp {\n  // @private\n  public static VERSIONS = {\n    V1_0: '1.0',\n    V1_1: '1.1',\n    V1_2: '1.2',\n\n    // Versions of STOMP specifications supported\n    supportedVersions: function() {\n      return '1.2,1.1,1.0';\n    }\n  };\n\n  public static WebSocketClass = null;\n\n  // This method creates a WebSocket client that is connected to\n  // the STOMP server located at the url.\n  //\n  // @example\n  //        var url = \"ws://localhost:61614/stomp\";\n  //        var client = Stomp.client(url);\n  //\n  // @param url [String]\n  public static client (url, protocols) {\n    // This is a hack to allow another implementation than the standard\n    // HTML5 WebSocket class.\n    //\n    // It is possible to use another class by calling\n    //\n    //     Stomp.WebSocketClass = MozWebSocket\n    //\n    // *prior* to call `Stomp.client()`.\n    //\n    // This hack is deprecated and  `Stomp.over()` method should be used\n    // instead.\n\n    // See remarks on the function Stomp.over\n    if (protocols == null) { protocols = ['v10.stomp', 'v11.stomp', 'v12.stomp']; }\n    const ws_fn= function() {\n      const klass = Stomp.WebSocketClass || WebSocket;\n      return new klass(url, protocols);\n    };\n\n    return new Client(ws_fn);\n  }\n\n  // This method is an alternative to `Stomp.client()` to let the user\n  // specify the WebSocket to use (either a standard HTML5 WebSocket or\n  // a similar object).\n  //\n  // In order to support reconnection, the function Client._connect should be callable more than once. While reconnecting\n  // a new instance of underlying transport (TCP Socket, WebSocket or SockJS) will be needed. So, this function\n  // alternatively allows passing a function that should return a new instance of the underlying socket.\n  //\n  // @example\n  //         var client = Stomp.over(function(){\n  //           return new WebSocket('ws://localhost:15674/ws')\n  //         });\n  //\n  // @param ws [WebSocket|function()] a WebSocket like Object or a function returning a WebObject or similar Object\n  //\n  // @note If you need auto reconnect feature you must pass a function that returns a WebSocket or similar Object\n  public static over (ws) {\n    const ws_fn = typeof(ws) === \"function\" ? ws : () => ws;\n\n    return new Client(ws_fn);\n  }\n\n  public static setInterval(interval, f) {\n    setInterval(f, interval);\n  }\n\n  public static clearInterval(id) {\n    clearInterval(id)\n  };\n}\n"],"sourceRoot":""}