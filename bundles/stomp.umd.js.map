{"version":3,"sources":["webpack://StompJs/webpack/universalModuleDefinition","webpack://StompJs/webpack/bootstrap","webpack://StompJs/./src/byte.ts","webpack://StompJs/./src/client.ts","webpack://StompJs/./src/compatibility/compat-client.ts","webpack://StompJs/./src/compatibility/stomp.ts","webpack://StompJs/./src/frame.ts","webpack://StompJs/./src/index.ts","webpack://StompJs/./src/stomp-handler.ts","webpack://StompJs/./src/versions.ts"],"names":[],"mappings":"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","file":"stomp.umd.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"StompJs\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"StompJs\"] = factory();\n\telse\n\t\troot[\"StompJs\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","/**\n * Some byte values, used as per STOMP specifications.\n *\n * @internal\n */\nexport const Byte = {\n  // LINEFEED byte (octet 10)\n  LF: '\\x0A',\n  // NULL byte (octet 0)\n  NULL: '\\x00'\n};\n","import {StompHeaders} from \"./stomp-headers\";\nimport {StompSubscription} from \"./stomp-subscription\";\nimport {Transaction} from \"./transaction\";\nimport {closeEventCallbackType, debugFnType, frameCallbackType, messageCallbackType, publishParams} from \"./types\";\nimport {StompConfig} from './stomp-config';\nimport {StompHandler} from \"./stomp-handler\";\n\n/**\n * STOMP Client Class.\n */\nexport class Client {\n  /**\n   * This function should return a WebSocket or a similar (e.g. SockJS) object.\n   */\n  public webSocketFactory: () => any;\n\n  /**\n   *  automatically reconnect with delay in milliseconds, set to 0 to disable\n   */\n  public reconnectDelay: number = 5000;\n\n  /**\n   * Incoming heartbeat interval in milliseconds. Set to 0 to disable\n   */\n  public heartbeatIncoming: number = 10000;\n\n  /**\n   * Outgoing heartbeat interval in milliseconds. Set to 0 to disable\n   */\n  public heartbeatOutgoing: number = 10000;\n\n  // public heartbeat: { outgoing: number; incoming: number };\n\n  /**\n   * Maximum WebSocket frame size sent by the client. If the STOMP frame\n   * is bigger than this value, the STOMP frame will be sent using multiple\n   * WebSocket frames (default is 16KiB)\n   */\n  public maxWebSocketFrameSize: number = 16 * 1024;\n\n  /**\n   * Underlying WebSocket instance, READONLY\n   */\n  get webSocket(): WebSocket {\n    return this._webSocket;\n  }\n  /**\n   * Underlying WebSocket instance\n   * @internal\n   */\n  protected _webSocket: WebSocket;\n\n  /**\n   * Connection headers, important keys - `login`, `passcode`, `host`\n   */\n  public connectHeaders: StompHeaders;\n\n  /**\n   * Disconnection headers\n   */\n  public disconnectHeaders: StompHeaders;\n\n  /**\n   * This function will be called for any unhandled messages. It is useful to receive messages sent to\n   * temporary queues (for example RabbitMQ supports such queues).\n   *\n   * It can also be called for stray messages while the server is processing a request to unsubcribe\n   * from an endpoint.\n   */\n  public onUnhandledMessage: messageCallbackType;\n\n  /**\n   * STOMP brokers can be requested to notify when an operation is actually completed.\n   * Prefer using [Client#watchForReceipt]{@link Client#watchForReceipt}. See\n   * [Client#watchForReceipt]{@link Client#watchForReceipt} for examples.\n   */\n  public onUnhandledReceipt: frameCallbackType;\n\n  /**\n   * Will be invoked if we receive an unknown frame type from the STOMP broker\n   */\n  public onUnhandledFrame: frameCallbackType;\n\n  /**\n   * `true` if there is a active connection with STOMP Broker\n   */\n  get connected(): boolean {\n    return (!!this._stompHandler) && this._stompHandler.connected;\n  }\n\n  /**\n   * Callback, invoked on every successful connection to the STOMP broker.\n   *\n   * The actual frame is passed as parameter to the callback.\n   */\n  public onConnect: frameCallbackType;\n\n  /**\n   * Callback, invoked on every successful disconnection from the STOMP broker. It will not be invoked if\n   * the STOMP broker disconnected due to an error.\n   *\n   * The actual frame is passed as parameter to the callback.\n   *\n   * The way STOMP protocol is designed, the connection may close/terminate without the client\n   * receiving the DISCONNECT frame.\n   * You might find [Client#onWebSocketClose]{@link Client#onWebSocketClose} more appropriate.\n   */\n  public onDisconnect: frameCallbackType;\n\n  /**\n   * Callback, invoked on an ERROR frame received from the STOMP Broker.\n   * A compliant STOMP Broker will close the connection after this type of frame.\n   *\n   * The actual frame is passed as parameter to the callback.\n   *\n   * See https://stomp.github.io/stomp-specification-1.2.html#ERROR.\n   */\n  public onStompError: frameCallbackType;\n\n  /**\n   * Callback, invoked when underlying WebSocket is closed.\n   *\n   * Actual `event` is passed as parameter to the callback.\n   */\n  public onWebSocketClose: closeEventCallbackType;\n\n  /**\n   * By default, debug messages are discarded. To log to `console` following can be used:\n   *\n   * ```javascript\n   *        client.debug = function(str) {\n   *          console.log(str);\n   *        };\n   * ```\n   *\n   * This method is called for every actual transmission of the STOMP frames over the\n   * WebSocket.\n   */\n  public debug: debugFnType;\n\n  /**\n   * version of STOMP protocol negotiated with the server, READONLY\n   */\n  get version(): string {\n    return this._stompHandler ? this._stompHandler.version : undefined;\n  }\n\n  private _stompHandler: StompHandler;\n\n  private _active: boolean = false;\n  private _reconnector: any;\n\n  /**\n   * Create an instance.\n   */\n  constructor(conf: StompConfig = {}) {\n    // Dummy callbacks\n    const noOp = () => {};\n    this.debug = noOp;\n    this.onConnect = noOp;\n    this.onDisconnect = noOp;\n    this.onUnhandledMessage = noOp;\n    this.onUnhandledReceipt = noOp;\n    this.onUnhandledFrame = noOp;\n    this.onStompError = noOp;\n    this.onWebSocketClose = noOp;\n\n    // These parameters would typically get proper values before connect is called\n    this.connectHeaders = {};\n    this.disconnectHeaders = {};\n    this.webSocketFactory = () => null;\n\n    // Apply configuration\n    this.configure(conf);\n  }\n\n  /**\n   * Update configuration. See {@link StompConfig} for details of configuration options.\n   */\n  public configure(conf: StompConfig): void {\n    // bulk assign all properties to this\n    (<any>Object).assign(this, conf);\n  }\n\n  /**\n   * Initiate the connection. If the connection breaks it will keep trying to reconnect.\n   *\n   * Call [Client#deactivate]{@link Client#deactivate} to disconnect and stop reconnection attempts.\n   */\n  public activate(): void {\n    // Indicate that this connection is active (it will keep trying to connect)\n    this._active = true;\n\n    this._connect();\n  }\n\n  private _connect(): void {\n    if (!this._active) {\n      this.debug('Client has been marked inactive, will not attempt to connect');\n      return;\n    }\n\n    if (this.connected) {\n      this.debug('STOMP: already connected, nothing to do');\n      return;\n    }\n\n    this.debug(\"Opening Web Socket...\");\n\n    // Get the actual Websocket (or a similar object)\n    this._webSocket = this._createWebSocket();\n\n    this._stompHandler = new StompHandler(this, this._webSocket, {\n      debug: this.debug,\n      connectHeaders: this.connectHeaders,\n      disconnectHeaders: this.disconnectHeaders,\n      heartbeatIncoming: this.heartbeatIncoming,\n      heartbeatOutgoing: this.heartbeatOutgoing,\n      maxWebSocketFrameSize: this.maxWebSocketFrameSize,\n      onConnect: (frame) => {\n        if (!this._active) {\n          this.debug('STOMP got connected while deactivate was issued, will disconnect now');\n          this._disposeStompHandler();\n          return;\n        }\n        this.onConnect(frame);\n      },\n      onDisconnect: (frame) => {\n        this.onDisconnect(frame);\n      },\n      onStompError: (frame) => {\n        this.onStompError(frame);\n      },\n      onWebSocketClose: (evt) => {\n        this.onWebSocketClose(evt);\n        if (this._active) {\n          this._schedule_reconnect();\n        }\n      },\n      onUnhandledMessage: (message) => {\n        this.onUnhandledMessage(message);\n      },\n      onUnhandledReceipt: (frame) => {\n        this.onUnhandledReceipt(frame);\n      },\n      onUnhandledFrame: (frame) => {\n        this.onUnhandledFrame(frame);\n      }\n    });\n\n    this._stompHandler.start();\n  }\n\n  private _createWebSocket() {\n    const webSocket = this.webSocketFactory();\n    webSocket.binaryType = \"arraybuffer\";\n    return webSocket;\n  }\n\n  private _schedule_reconnect(): void {\n    if (this.reconnectDelay > 0) {\n      this.debug(`STOMP: scheduling reconnection in ${this.reconnectDelay}ms`);\n\n      this._reconnector = setTimeout(() => {\n        this._connect();\n      }, this.reconnectDelay);\n    }\n  }\n\n  /**\n   * Disconnect and stop auto reconnect loop.\n   *\n   * Appropriate callbacks will be invoked if underlying STOMP connection is connected.\n   *\n   * See: http://stomp.github.com/stomp-specification-1.2.html#DISCONNECT\n   */\n  public deactivate(): void {\n    // indicate that auto reconnect loop should terminate\n    this._active = false;\n\n    // Clear if a reconnection was scheduled\n    if (this._reconnector) {\n      clearTimeout(this._reconnector);\n    }\n    this._disposeStompHandler();\n  }\n\n  private _disposeStompHandler() {\n    // Dispose STOMP Handler\n    if (this._stompHandler) {\n      this._stompHandler.dispose();\n      this._stompHandler = null;\n    }\n  }\n\n  /**\n   * Send a message to a named destination. Refer to your STOMP broker documentation for types\n   * and naming of destinations. The headers will, typically, be available to the subscriber.\n   * However, there may be special purpose headers corresponding to your STOMP broker.\n   *\n   * Note: Body must be String. You will need to covert the payload to string in case it is not string (e.g. JSON)\n   *\n   * ```javascript\n   *        client.send({destination: \"/queue/test\", headers: {priority: 9}, body: \"Hello, STOMP\"});\n   *\n   *        // Only destination is mandatory parameter\n   *        client.send({destination: \"/queue/test\", body: \"Hello, STOMP\"});\n   * ```\n   *\n   * See: http://stomp.github.com/stomp-specification-1.2.html#SEND SEND Frame\n   */\n  public publish(params: publishParams) {\n    this._stompHandler.publish(params);\n  }\n\n  /**\n   * Watch for a receipt, callback will receive the STOMP frame as parameter.\n   *\n   * The receipt id needs to be unique for each use. Typically a sequence, a UUID, a\n   * random number or a combination would be used.\n   *\n   * Example:\n   * ```javascript\n   *        // Receipt for Subscription\n   *        let receiptId = randomText();\n   *\n   *        client.watchForReceipt(receiptId, function() {\n   *          // Will be called after server acknowledges\n   *        });\n   *\n   *        client.subscribe(TEST.destination, onMessage, {receipt: receiptId});\n   *\n   *        // Receipt for message send\n   *        receiptId = randomText();\n   *\n   *        client.watchForReceipt(receiptId, function() {\n   *          // Will be called after server acknowledges\n   *        });\n   *        client.send(TEST.destination, {receipt: receiptId}, msg);\n   * ```\n   */\n  public watchForReceipt(receiptId: string, callback: frameCallbackType): void {\n    this._stompHandler.watchForReceipt(receiptId, callback);\n  }\n\n  /**\n   * Subscribe to a STOMP Broker location. The callbck will be invoked for each received message with\n   * the {@link Message} as argument.\n   *\n   * Note: The library will generate an unique ID if there is none provided in the headers.\n   *       To use your own ID, pass it using the headers argument.\n   *\n   * ```javascript\n   *        callback = function(message) {\n   *        // called when the client receives a STOMP message from the server\n   *          if (message.body) {\n   *            alert(\"got message with body \" + message.body)\n   *          } else {\n   *            alert(\"got empty message\");\n   *          }\n   *        });\n   *\n   *        var subscription = client.subscribe(\"/queue/test\", callback);\n   *\n   *        // Explicit subscription id\n   *        var mySubId = 'my-subscription-id-001';\n   *        var subscription = client.subscribe(destination, callback, { id: mySubId });\n   * ```\n   *\n   * See: http://stomp.github.com/stomp-specification-1.2.html#SUBSCRIBE SUBSCRIBE Frame\n   */\n  public subscribe(destination: string, callback: messageCallbackType, headers: StompHeaders = {}): StompSubscription {\n    return this._stompHandler.subscribe(destination, callback, headers);\n  }\n\n  /**\n   * It is preferable to unsubscribe from a subscription by calling\n   * `unsubscribe()` directly on {@link StompSubscription} returned by `client.subscribe()`:\n   *\n   * ```javascript\n   *        var subscription = client.subscribe(destination, onmessage);\n   *        // ...\n   *        subscription.unsubscribe();\n   * ```\n   *\n   * See: http://stomp.github.com/stomp-specification-1.2.html#UNSUBSCRIBE UNSUBSCRIBE Frame\n   */\n  public unsubscribe(id: string, headers: StompHeaders = {}): void {\n    this._stompHandler.unsubscribe(id, headers);\n  }\n\n  /**\n   * Start a transaction, the returned {@link Transaction} has methods - [commit]{@link Transaction#commit}\n   * and [abort]{@link Transaction#abort}.\n   *\n   * See: http://stomp.github.com/stomp-specification-1.2.html#BEGIN BEGIN Frame\n   */\n  public begin(transactionId: string): Transaction {\n    return this._stompHandler.begin(transactionId);\n  }\n\n  /**\n   * Commit a transaction.\n   * It is preferable to commit a transaction by calling [commit]{@link Transaction#commit} directly on\n   * {@link Transaction} returned by [client.begin]{@link Client#begin}.\n   *\n   * ```javascript\n   *        var tx = client.begin(txId);\n   *        //...\n   *        tx.commit();\n   * ```\n   *\n   * See: http://stomp.github.com/stomp-specification-1.2.html#COMMIT COMMIT Frame\n   */\n  public commit(transactionId: string): void {\n    this._stompHandler.commit(transactionId);\n  }\n\n  /**\n   * Abort a transaction.\n   * It is preferable to abort a transaction by calling [abort]{@link Transaction#abort} directly on\n   * {@link Transaction} returned by [client.begin]{@link Client#begin}.\n   *\n   * ```javascript\n   *        var tx = client.begin(txId);\n   *        //...\n   *        tx.abort();\n   * ```\n   *\n   * See: http://stomp.github.com/stomp-specification-1.2.html#ABORT ABORT Frame\n   */\n  public abort(transactionId: string): void {\n    this._stompHandler.abort(transactionId);\n  }\n\n  /**\n   * ACK a message. It is preferable to acknowledge a message by calling [ack]{@link Message#ack} directly\n   * on the {@link Message} handled by a subscription callback:\n   *\n   * ```javascript\n   *        var callback = function (message) {\n   *          // process the message\n   *          // acknowledge it\n   *          message.ack();\n   *        };\n   *        client.subscribe(destination, callback, {'ack': 'client'});\n   * ```\n   *\n   * See: http://stomp.github.com/stomp-specification-1.2.html#ACK ACK Frame\n   */\n  public ack(messageId: string, subscriptionId: string, headers: StompHeaders = {}): void {\n    this._stompHandler.ack(messageId, subscriptionId, headers);\n  }\n\n  /**\n   * NACK a message. It is preferable to acknowledge a message by calling [nack]{@link Message#nack} directly\n   * on the {@link Message} handled by a subscription callback:\n   *\n   * ```javascript\n   *        var callback = function (message) {\n   *          // process the message\n   *          // an error occurs, nack it\n   *          message.nack();\n   *        };\n   *        client.subscribe(destination, callback, {'ack': 'client'});\n   * ```\n   *\n   * See: http://stomp.github.com/stomp-specification-1.2.html#NACK NACK Frame\n   */\n  public nack(messageId: string, subscriptionId: string, headers: StompHeaders = {}): void {\n    this._stompHandler.nack(messageId, subscriptionId, headers);\n  }\n}","import {Client} from \"../client\";\nimport {StompHeaders} from \"../stomp-headers\";\nimport {frameCallbackType, messageCallbackType} from \"../types\";\n\n/**\n * Available for backward compatibility, please shift to using {@link Client}.\n *\n * **Deprecated**\n */\nexport class CompatClient extends Client {\n\n  /**\n   * Available for backward compatibility, please shift to using {@link Client}\n   * and [Client#webSocketFactory]{@link Client#webSocketFactory}.\n   *\n   * **Deprecated**\n   */\n  constructor(webSocketFactory: () => any) {\n    super();\n    this.reconnect_delay = 0;\n    this.webSocketFactory = webSocketFactory;\n    // Default from previous version\n    this.debug = (...message: any[]) => {\n      console.log(...message);\n    };\n  }\n\n  private _parseConnect(...args: any[]): any {\n    let closeEventCallback, connectCallback, errorCallback;\n    let headers: StompHeaders = {};\n    if (args.length < 2) {\n      throw(\"Connect requires at least 2 arguments\");\n    }\n    if (typeof(args[1]) === 'function') {\n      [headers, connectCallback, errorCallback, closeEventCallback] = args;\n    } else {\n      switch (args.length) {\n        case 6:\n          [headers['login'], headers['passcode'], connectCallback, errorCallback, closeEventCallback, headers['host']] = args;\n          break;\n        default:\n          [headers['login'], headers['passcode'], connectCallback, errorCallback, closeEventCallback] = args;\n      }\n    }\n\n    return [headers, connectCallback, errorCallback, closeEventCallback];\n  }\n\n  /**\n   * Available for backward compatibility, please shift to using [Client#activate]{@link Client#activate}.\n   *\n   * **Deprecated**\n   *\n   * The `connect` method accepts different number of arguments and types. See the Overloads list. Use the\n   * version with headers to pass your broker specific options.\n   *\n   * overloads:\n   * - connect(headers, connectCallback)\n   * - connect(headers, connectCallback, errorCallback)\n   * - connect(login, passcode, connectCallback)\n   * - connect(login, passcode, connectCallback, errorCallback)\n   * - connect(login, passcode, connectCallback, errorCallback, closeEventCallback)\n   * - connect(login, passcode, connectCallback, errorCallback, closeEventCallback, host)\n   *\n   * params:\n   * - headers, see [Client#connectHeaders]{@link Client#connectHeaders}\n   * - connectCallback, see [Client#onConnect]{@link Client#onConnect}\n   * - errorCallback, see [Client#onStompError]{@link Client#onStompError}\n   * - closeEventCallback, see [Client#onWebSocketClose]{@link Client#onWebSocketClose}\n   * - login [String]\n   * - passcode [String]\n   * - host [String] Optional, virtual host to connect to. STOMP 1.2 makes it mandatory,\n   *                 however the broker may not mandate it\n   *\n   * ```javascript\n   *        client.connect('guest, 'guest', function(frame) {\n   *          client.debug(\"connected to Stomp\");\n   *          client.subscribe(destination, function(message) {\n   *            $(\"#messages\").append(\"<p>\" + message.body + \"</p>\\n\");\n   *          });\n   *        });\n   * ```\n   *\n   * Note: When auto reconnect is active, `connectCallback` and `errorCallback` will be called on each connect or error\n   *\n   * See also: [CONNECT Frame]{@link http://stomp.github.com/stomp-specification-1.2.html#CONNECT_or_STOMP_Frame}\n   */\n  public connect(...args: any[]): void {\n    const out = this._parseConnect(...args);\n\n    if (out[0]) { this.connectHeaders = out[0]; }\n    if (out[1]) { this.onConnect = out[1]; }\n    if (out[2]) { this.onStompError = out[2]; }\n    if (out[3]) { this.onWebSocketClose = out[3]; }\n\n    super.activate();\n  }\n\n  /**\n   * Available for backward compatibility, please shift to using [Client#activate]{@link Client#activate}.\n   *\n   * **Deprecated**\n   *\n   * See:\n   * [Client#onDisconnect]{@link Client#onDisconnect}, and\n   * [Client#disconnectHeaders]{@link Client#disconnectHeaders}\n   */\n  public disconnect(disconnectCallback?: any, headers: StompHeaders = {}): void {\n    if (disconnectCallback) {\n      this.onDisconnect = disconnectCallback;\n    }\n    this.disconnectHeaders = headers;\n\n    super.deactivate();\n  }\n\n  /**\n   * Available for backward compatibility, use [Client#publish]{@link Client#publish}.\n   *\n   * Send a message to a named destination. Refer to your STOMP broker documentation for types\n   * and naming of destinations. The headers will, typically, be available to the subscriber.\n   * However, there may be special purpose headers corresponding to your STOMP broker.\n   *\n   *  **Deprecated**, use [Client#publish]{@link Client#publish}\n   *\n   * Note: Body must be String. You will need to covert the payload to string in case it is not string (e.g. JSON)\n   *\n   * ```javascript\n   *        client.send(\"/queue/test\", {priority: 9}, \"Hello, STOMP\");\n   *\n   *        // If you want to send a message with a body, you must also pass the headers argument.\n   *        client.send(\"/queue/test\", {}, \"Hello, STOMP\");\n   * ```\n   *\n   * See: http://stomp.github.com/stomp-specification-1.2.html#SEND SEND Frame\n   */\n  public send(destination: string, headers: {[key:string]: any} = {}, body: string = ''): void {\n    const skipContentLengthHeader = (headers['content-length'] === false);\n    if (skipContentLengthHeader) {\n      delete headers['content-length'];\n    }\n    this.publish({\n      destination: destination,\n      headers: <StompHeaders>headers,\n      body: body,\n      skipContentLengthHeader: skipContentLengthHeader\n    });\n  }\n\n  /**\n   * Available for backward compatibility, renamed to [Client#reconnectDelay]{@link Client#reconnectDelay}.\n   *\n   * **Deprecated**\n   */\n  set reconnect_delay(value: number) {\n    this.reconnectDelay = value;\n  }\n\n  /**\n   * Available for backward compatibility, renamed to [Client#webSocket]{@link Client#webSocket}.\n   *\n   * **Deprecated**\n   */\n  get ws(): any {\n    return this._webSocket;\n  }\n\n  /**\n   * Available for backward compatibility, renamed to [Client#onUnhandledMessage]{@link Client#onUnhandledMessage}.\n   *\n   * **Deprecated**\n   */\n  get onreceive(): messageCallbackType {\n    return this.onUnhandledMessage;\n  }\n\n  /**\n   * Available for backward compatibility, renamed to [Client#onUnhandledMessage]{@link Client#onUnhandledMessage}.\n   *\n   * **Deprecated**\n   */\n  set onreceive(value: messageCallbackType) {\n    this.onUnhandledMessage = value;\n  }\n\n  /**\n   * Available for backward compatibility, renamed to [Client#onUnhandledReceipt]{@link Client#onUnhandledReceipt}.\n   * Prefer using [Client#watchForReceipt]{@link Client#watchForReceipt}.\n   *\n   * **Deprecated**\n   */\n  get onreceipt(): frameCallbackType {\n    return this.onUnhandledReceipt;\n  }\n\n  /**\n   * Available for backward compatibility, renamed to [Client#onUnhandledReceipt]{@link Client#onUnhandledReceipt}.\n   *\n   * **Deprecated**\n   */\n  set onreceipt(value: frameCallbackType) {\n    this.onUnhandledReceipt = value;\n  }\n\n  private _heartbeatInfo: HeartbeatInfo = new HeartbeatInfo(this);\n\n  /**\n   * Available for backward compatibility, renamed to [Client#heartbeatIncoming]{@link Client#heartbeatIncoming}\n   * [Client#heartbeatOutgoing]{@link Client#heartbeatOutgoing}.\n   *\n   * **Deprecated**\n   */\n  get heartbeat() {\n    return this._heartbeatInfo;\n  }\n\n  /**\n   * Available for backward compatibility, renamed to [Client#heartbeatIncoming]{@link Client#heartbeatIncoming}\n   * [Client#heartbeatOutgoing]{@link Client#heartbeatOutgoing}.\n   *\n   * **Deprecated**\n   */\n  set heartbeat(value: {incoming: number, outgoing: number}) {\n    this.heartbeatIncoming = value.incoming;\n    this.heartbeatOutgoing = value.outgoing;\n  }\n}\n\n/**\n * @internal\n */\nclass HeartbeatInfo {\n  constructor (private client: CompatClient) {\n  }\n\n  get outgoing(): number {\n    return this.client.heartbeatOutgoing;\n  }\n\n  set outgoing(value: number) {\n    this.client.heartbeatOutgoing = value;\n  }\n\n  get incoming(): number {\n    return this.client.heartbeatIncoming;\n  }\n\n  set incoming(value: number) {\n    this.client.heartbeatIncoming = value;\n  }\n}","import {Versions} from \"../versions\";\nimport {CompatClient} from \"./compat-client\";\n\n/**\n * STOMP Class, acts like a factory to create {@link Client}.\n */\nexport class Stomp {\n  /**\n   * In case you need to use a non standard class for WebSocket.\n   *\n   * For example when using within NodeJS environment:\n   *\n   * ```javascript\n   *        StompJs = require('../../esm5/');\n   *        Stomp = StompJs.Stomp;\n   *        Stomp.WebSocketClass = require('websocket').w3cwebsocket;\n   * ```\n   */\n  public static WebSocketClass:any = null;\n\n  /**\n   * This method creates a WebSocket client that is connected to\n   * the STOMP server located at the url.\n   *\n   * ```javascript\n   *        var url = \"ws://localhost:61614/stomp\";\n   *        var client = Stomp.client(url);\n   * ```\n   */\n  public static client (url: string, protocols: string[]): CompatClient {\n    // This is a hack to allow another implementation than the standard\n    // HTML5 WebSocket class.\n    //\n    // It is possible to use another class by calling\n    //\n    //     Stomp.WebSocketClass = MozWebSocket\n    //\n    // *prior* to call `Stomp.client()`.\n    //\n    // This hack is deprecated and `Stomp.over()` method should be used\n    // instead.\n\n    // See remarks on the function Stomp.over\n    if (protocols == null) { protocols = Versions.protocolVersions(); }\n    const ws_fn= function() {\n      const klass = Stomp.WebSocketClass || WebSocket;\n      return new klass(url, protocols);\n    };\n\n    return new CompatClient(ws_fn);\n  }\n\n  /**\n   * This method is an alternative to [Stomp#client]{@link Stomp#client} to let the user\n   * specify the WebSocket to use (either a standard HTML5 WebSocket or\n   * a similar object).\n   *\n   * In order to support reconnection, the function Client._connect should be callable more than once. While reconnecting\n   * a new instance of underlying transport (TCP Socket, WebSocket or SockJS) will be needed. So, this function\n   * alternatively allows passing a function that should return a new instance of the underlying socket.\n   *\n   * ```javascript\n   *        var client = Stomp.over(function(){\n   *          return new WebSocket('ws://localhost:15674/ws')\n   *        });\n   * ```\n   */\n  public static over (ws: any): CompatClient {\n    const ws_fn = typeof(ws) === \"function\" ? ws : () => ws;\n\n    return new CompatClient(ws_fn);\n  }\n}\n","import {StompHeaders} from \"./stomp-headers\";\nimport {Byte} from \"./byte\";\n\ntype unmarshallResults = { frames: Frame[]; partial: string };\n\n/**\n * Frame class represents a STOMP frame. Many of the callbacks pass the Frame received from\n * the STOMP broker. For advanced usage you might need to access [headers]{@link Frame#headers}.\n *\n * {@link Message} is an extended Frame.\n *\n * See: http://stomp.github.com/stomp-specification-1.2.html#STOMP_Frames STOMP Frame\n */\nexport class Frame {\n  /**\n   * STOMP Command\n   */\n  public command: string;\n\n  /**\n   * Headers, key value pairs.\n   */\n  public headers: StompHeaders;\n\n  /**\n   * It is serialized string\n   */\n  public body: any;\n\n  private escapeHeaderValues: boolean;\n  private skipContentLengthHeader: boolean;\n\n  /**\n   * Frame constructor. `command`, `headers` and `body` are available as properties.\n   *\n   * @internal\n   */\n  constructor(params: {\n    command: string, headers?: StompHeaders, body: any,\n    escapeHeaderValues?: boolean, skipContentLengthHeader?: boolean\n  }) {\n    let {command, headers, body, escapeHeaderValues, skipContentLengthHeader} = params;\n    this.command = command;\n    this.headers = headers || {};\n    this.body = body || '';\n    this.escapeHeaderValues = escapeHeaderValues || false;\n    this.skipContentLengthHeader =  skipContentLengthHeader || false;\n  }\n\n  /**\n   * @internal\n   */\n  public toString(): string {\n    const lines = [this.command];\n    if (this.skipContentLengthHeader) {\n      delete this.headers['content-length'];\n    }\n\n    for (let name of Object.keys(this.headers || {})) {\n      const value = this.headers[name];\n      if (this.escapeHeaderValues && (this.command !== 'CONNECT') && (this.command !== 'CONNECTED')) {\n        lines.push(`${name}:${Frame.frEscape(`${value}`)}`);\n      } else {\n        lines.push(`${name}:${value}`);\n      }\n    }\n    if (this.body && !this.skipContentLengthHeader) {\n      lines.push(`content-length:${Frame.sizeOfUTF8(this.body)}`);\n    }\n    lines.push(Byte.LF + this.body);\n    return lines.join(Byte.LF);\n  }\n\n  /**\n   * Compute the size of a UTF-8 string by counting its number of bytes\n   * (and not the number of characters composing the string)\n   */\n  private static sizeOfUTF8(s: string): number {\n    if (s) {\n      const matches = encodeURI(s).match(/%..|./g) || [];\n      return matches.length;\n    } else {\n      return 0;\n    }\n  }\n\n  /**\n   * deserialize a STOMP Frame from raw data.\n   *\n   * @internal\n   */\n  public static unmarshallSingle(data: any, escapeHeaderValues: boolean): Frame {\n    // search for 2 consecutives LF byte to split the command\n    // and headers from the body\n    const divider = data.search(new RegExp(`${Byte.LF}${Byte.LF}`));\n    const headerLines: string[] = data.substring(0, divider).split(Byte.LF);\n    const command = headerLines.shift();\n    const headers: StompHeaders = {};\n    // utility function to trim any whitespace before and after a string\n    const trim = (str: string): string => str.replace(/^\\s+|\\s+$/g, '');\n    // Parse headers in reverse order so that for repeated headers, the 1st\n    // value is used\n    for (let line of headerLines.reverse()) {\n      const idx = line.indexOf(':');\n\n      const key = trim(line.substring(0, idx));\n      let value = trim(line.substring(idx + 1));\n\n      if (escapeHeaderValues && (command !== 'CONNECT') && (command !== 'CONNECTED')) {\n        value = Frame.frUnEscape(value);\n      }\n\n      headers[key] = value;\n    }\n    // Parse body\n    // check for content-length or  topping at the first NULL byte found.\n    let body = '';\n    // skip the 2 LF bytes that divides the headers from the body\n    const start = divider + 2;\n    if (headers['content-length']) {\n      const len = parseInt(headers['content-length']);\n      body = (`${data}`).substring(start, start + len);\n    } else {\n      let chr = null;\n      for (let i = start, end = data.length, asc = start <= end; asc ? i < end : i > end; asc ? i++ : i--) {\n        chr = data.charAt(i);\n        if (chr === Byte.NULL) {\n          break;\n        }\n        body += chr;\n      }\n    }\n    return new Frame({command: command, headers: headers, body: body, escapeHeaderValues: escapeHeaderValues});\n  }\n\n  /**\n   * Split the data before unmarshalling every single STOMP frame.\n   * Web socket servers can send multiple frames in a single websocket message.\n   * If the message size exceeds the websocket message size, then a single\n   * frame can be fragmented across multiple messages.\n   *\n   * @internal\n   */\n  public static unmarshall(datas: any, escapeHeaderValues: boolean): unmarshallResults {\n    // Ugly list comprehension to split and unmarshall *multiple STOMP frames*\n    // contained in a *single WebSocket frame*.\n    // The data is split when a NULL byte (followed by zero or many LF bytes) is\n    // found\n    if (escapeHeaderValues == null) {\n      escapeHeaderValues = false;\n    }\n    const frames = datas.split(new RegExp(`${Byte.NULL}${Byte.LF}*`));\n\n    const r: unmarshallResults = {\n      frames: [],\n      partial: ''\n    };\n    r.frames = (frames.slice(0, -1).map((frame: Frame) => Frame.unmarshallSingle(frame, escapeHeaderValues)));\n\n    // If this contains a final full message or just a acknowledgement of a PING\n    // without any other content, process this frame, otherwise return the\n    // contents of the buffer to the caller.\n    const last_frame = frames.slice(-1)[0];\n\n    if ((last_frame === Byte.LF) || ((last_frame.search(new RegExp(`${Byte.NULL}${Byte.LF}*$`))) !== -1)) {\n      r.frames.push(Frame.unmarshallSingle(last_frame, escapeHeaderValues));\n    } else {\n      r.partial = last_frame;\n    }\n    return r;\n  }\n\n  /**\n   * Serialize a STOMP frame as per STOMP standards, suitable to be sent to the STOMP broker.\n   *\n   * @internal\n   */\n  public static marshall(params: {\n    command: string, headers?: StompHeaders, body: any,\n    escapeHeaderValues?: boolean, skipContentLengthHeader?: boolean\n  }) {\n    const frame = new Frame(params);\n    return frame.toString() + Byte.NULL;\n  }\n\n  /**\n   *  Escape header values\n   */\n  private static frEscape(str: string): string {\n    return str.replace(/\\\\/g, \"\\\\\\\\\").replace(/\\r/g, \"\\\\r\").replace(/\\n/g, \"\\\\n\").replace(/:/g, \"\\\\c\");\n  }\n\n  /**\n   * UnEscape header values\n   */\n  private static frUnEscape(str: string): string {\n    return str.replace(/\\\\r/g, \"\\r\").replace(/\\\\n/g, \"\\n\").replace(/\\\\c/g, \":\").replace(/\\\\\\\\/g, \"\\\\\");\n  }\n}\n","export * from './client';\nexport * from './frame';\nexport * from './message';\nexport * from './stomp-config';\nexport * from './stomp-headers';\nexport * from './stomp-subscription';\nexport * from './transaction';\nexport * from './types';\nexport * from './versions';\n\n// Compatibility code\nexport * from './compatibility/compat-client';\nexport * from './compatibility/stomp';\n","import {Client} from './client';\nimport {Byte} from \"./byte\";\nimport {Versions} from \"./versions\";\nimport {Message} from \"./message\";\nimport {Frame} from \"./frame\";\nimport {StompHeaders} from \"./stomp-headers\";\nimport {closeEventCallbackType, debugFnType, frameCallbackType, messageCallbackType, publishParams} from \"./types\";\nimport {StompSubscription} from \"./stomp-subscription\";\nimport {Transaction} from \"./transaction\";\nimport {StompConfig} from \"./stomp-config\";\n\n/**\n * The STOMP protocol handler\n *\n * @internal\n */\nexport class StompHandler {\n  public debug: debugFnType;\n\n  public connectHeaders: StompHeaders;\n\n  public disconnectHeaders: StompHeaders;\n\n  public heartbeatIncoming: number;\n\n  public heartbeatOutgoing: number;\n\n  public onUnhandledMessage: messageCallbackType;\n\n  public onUnhandledReceipt: frameCallbackType;\n\n  public onUnhandledFrame: frameCallbackType;\n\n  public maxWebSocketFrameSize: number;\n\n  public onConnect: frameCallbackType;\n\n  public onDisconnect: frameCallbackType;\n\n  public onStompError: frameCallbackType;\n\n  public onWebSocketClose: closeEventCallbackType;\n\n  get version(): string {\n    return this._version;\n  }\n  private _version: string;\n\n  get connected(): boolean {\n    return this._connected;\n  }\n\n  private _connected: boolean;\n\n  private readonly _subscriptions: { [key: string]: messageCallbackType };\n  private readonly _receiptWatchers: { [key: string]: frameCallbackType };\n  private _partialData: string;\n  private _escapeHeaderValues: boolean;\n  private _counter: number;\n  private _pinger: any;\n  private _ponger: any;\n  private _lastServerActivityTS: number;\n\n  constructor(private _client: Client, private _webSocket: WebSocket, config: StompConfig = {}) {\n    // used to index subscribers\n    this._counter = 0;\n\n    // subscription callbacks indexed by subscriber's ID\n    this._subscriptions = {};\n\n    // receipt-watchers indexed by receipts-ids\n    this._receiptWatchers = {};\n\n    this._partialData = '';\n\n    this._escapeHeaderValues = false;\n\n    this._lastServerActivityTS = Date.now();\n\n    this.configure(config);\n  }\n\n  public configure(conf: StompConfig): void {\n    // bulk assign all properties to this\n    (<any>Object).assign(this, conf);\n  }\n\n  public start(): void {\n    this._webSocket.onmessage = (evt: any) => {\n      this.debug('Received data');\n      const data = (() => {\n        if ((typeof(ArrayBuffer) !== 'undefined') && evt.data instanceof ArrayBuffer) {\n          // the data is stored inside an ArrayBuffer, we decode it to get the\n          // data as a String\n          const arr = new Uint8Array(evt.data);\n          this.debug(`--- got data length: ${arr.length}`);\n          // Return a string formed by all the char codes stored in the Uint8array\n          let j, len1, results;\n          results = [];\n          for (j = 0, len1 = arr.length; j < len1; j++) {\n            const c = arr[j];\n            results.push(String.fromCharCode(c));\n          }\n\n          return results.join('');\n        } else {\n          // take the data directly from the WebSocket `data` field\n          return evt.data;\n        }\n      })();\n\n      this._lastServerActivityTS = Date.now();\n\n      if (data === Byte.LF) { // heartbeat\n        this.debug(\"<<< PONG\");\n        return;\n      }\n\n      this.debug(`<<< ${data}`);\n      // Handle STOMP frames received from the server\n      // The unmarshall function returns the frames parsed and any remaining\n      // data from partial frames.\n      const unmarshalledData = Frame.unmarshall(this._partialData + data, this._escapeHeaderValues);\n      this._partialData = unmarshalledData.partial;\n      for (let frame of unmarshalledData.frames) {\n        const serverFrameHandler= this._serverFrameHandlers[frame.command] || this.onUnhandledFrame;\n\n        serverFrameHandler(frame);\n      }\n    };\n\n    this._webSocket.onclose = (closeEvent: any): void => {\n      this.debug(`Connection closed to ${this._webSocket.url}`);\n      this.onWebSocketClose(closeEvent);\n      this._cleanUp();\n    };\n\n    this._webSocket.onopen = () => {\n      this.debug('Web Socket Opened...');\n      this.connectHeaders[\"accept-version\"] = Versions.supportedVersions();\n      this.connectHeaders[\"heart-beat\"] = [this.heartbeatOutgoing, this.heartbeatIncoming].join(',');\n      this._transmit({command: \"CONNECT\", headers: this.connectHeaders});\n    };\n  }\n\n  private readonly _serverFrameHandlers: { [key: string]: frameCallbackType } = {\n\n    // [CONNECTED Frame](http://stomp.github.com/stomp-specification-1.2.html#CONNECTED_Frame)\n    'CONNECTED': (frame) => {\n      this.debug(`connected to server ${frame.headers.server}`);\n      this._connected = true;\n      this._version = frame.headers.version;\n      // STOMP version 1.2 needs header values to be escaped\n      if (this._version === Versions.V1_2) {\n        this._escapeHeaderValues = true;\n      }\n\n      this._setupHeartbeat(frame.headers);\n      this.onConnect(frame);\n    },\n\n    // [MESSAGE Frame](http://stomp.github.com/stomp-specification-1.2.html#MESSAGE)\n    \"MESSAGE\": (frame) => {\n      // the `onReceive` callback is registered when the client calls\n      // `subscribe()`.\n      // If there is registered subscription for the received message,\n      // we used the default `onReceive` method that the client can set.\n      // This is useful for subscriptions that are automatically created\n      // on the browser side (e.g. [RabbitMQ's temporary\n      // queues](http://www.rabbitmq.com/stomp.html)).\n      const subscription = frame.headers.subscription;\n      const onReceive = this._subscriptions[subscription] || this.onUnhandledMessage;\n      // bless the frame to be a Message\n      const message = <Message>frame;\n      let messageId: string;\n      const client = this;\n      if (this._version === Versions.V1_2) {\n        messageId = message.headers[\"ack\"];\n      } else {\n        messageId = message.headers[\"message-id\"];\n      }\n      // add `ack()` and `nack()` methods directly to the returned frame\n      // so that a simple call to `message.ack()` can acknowledge the message.\n      message.ack = (headers: StompHeaders = {}): void => {\n        return client.ack(messageId, subscription, headers);\n      };\n      message.nack = (headers: StompHeaders = {}): void => {\n        return client.nack(messageId, subscription, headers);\n      };\n      onReceive(message);\n    },\n\n    // [RECEIPT Frame](http://stomp.github.com/stomp-specification-1.2.html#RECEIPT)\n    \"RECEIPT\": (frame) => {\n      const callback = this._receiptWatchers[frame.headers[\"receipt-id\"]];\n      if (callback) {\n        callback(frame);\n        // Server will acknowledge only once, remove the callback\n        delete this._receiptWatchers[frame.headers[\"receipt-id\"]];\n      } else {\n        this.onUnhandledReceipt(frame);\n      }\n    },\n\n    // [ERROR Frame](http://stomp.github.com/stomp-specification-1.2.html#ERROR)\n    'ERROR': (frame) => {\n      this.onStompError(frame);\n    }\n  };\n\n  private _setupHeartbeat(headers: StompHeaders): void {\n    if ((headers.version !== Versions.V1_1 && headers.version !== Versions.V1_2)) {\n      return;\n    }\n\n    // heart-beat header received from the server looks like:\n    //\n    //     heart-beat: sx, sy\n    const [serverOutgoing, serverIncoming] = (headers['heart-beat']).split(\",\").map((v: string) => parseInt(v));\n\n    if ((this.heartbeatOutgoing !== 0) && (serverIncoming !== 0)) {\n      let ttl: number = Math.max(this.heartbeatOutgoing, serverIncoming);\n      this.debug(`send PING every ${ttl}ms`);\n      this._pinger = setInterval(() => {\n        this._webSocket.send(Byte.LF);\n        this.debug(\">>> PING\");\n      }, ttl);\n    }\n\n    if ((this.heartbeatIncoming !== 0) && (serverOutgoing !== 0)) {\n      let ttl: number = Math.max(this.heartbeatIncoming, serverOutgoing);\n      this.debug(`check PONG every ${ttl}ms`);\n      this._ponger = setInterval(() => {\n        const delta = Date.now() - this._lastServerActivityTS;\n        // We wait twice the TTL to be flexible on window's setInterval calls\n        if (delta > (ttl * 2)) {\n          this.debug(`did not receive server activity for the last ${delta}ms`);\n          this._webSocket.close();\n        }\n      }, ttl);\n    }\n  }\n\n  private _transmit(params: { command: string, headers?: StompHeaders, body?: string, skipContentLengthHeader?: boolean }): void {\n    let {command, headers, body, skipContentLengthHeader} = params;\n    let out = Frame.marshall({\n      command: command,\n      headers: headers,\n      body: body,\n      escapeHeaderValues: this._escapeHeaderValues,\n      skipContentLengthHeader: skipContentLengthHeader\n    });\n    this.debug(`>>> ${out}`);\n    // if necessary, split the *STOMP* frame to send it on many smaller\n    // *WebSocket* frames\n    while (true) {\n      if (out.length > this.maxWebSocketFrameSize) {\n        this._webSocket.send(out.substring(0, this.maxWebSocketFrameSize));\n        out = out.substring(this.maxWebSocketFrameSize);\n        this.debug(`remaining = ${out.length}`);\n      } else {\n        this._webSocket.send(out);\n        return;\n      }\n    }\n  }\n\n  public dispose(): void {\n    if (this.connected) {\n      try {\n        if (!this.disconnectHeaders['receipt']) {\n          this.disconnectHeaders['receipt'] = `close-${this._counter++}`;\n        }\n        this.watchForReceipt(this.disconnectHeaders['receipt'], (frame) => {\n          this._webSocket.close();\n          this._cleanUp();\n          this.onDisconnect(frame);\n        });\n        this._transmit({command: \"DISCONNECT\", headers: this.disconnectHeaders});\n      } catch (error) {\n        this.debug('Ignoring error during disconnect', error);\n      }\n    } else {\n      if (this._webSocket.readyState === WebSocket.CONNECTING || this._webSocket.readyState === WebSocket.OPEN) {\n        this._webSocket.close();\n      }\n    }\n  }\n\n  private _cleanUp() {\n    this._connected = false;\n\n    if (this._pinger) {\n      clearInterval(this._pinger);\n    }\n    if (this._ponger) {\n      clearInterval(this._ponger);\n    }\n  }\n\n  public publish(params: publishParams): void {\n    let {destination, headers, body, skipContentLengthHeader} = params;\n    headers = (<any>Object).assign({destination: destination}, headers);\n    this._transmit({command: \"SEND\", headers: headers, body: body, skipContentLengthHeader: skipContentLengthHeader});\n  }\n\n  public watchForReceipt(receiptId: string, callback: frameCallbackType): void {\n    this._receiptWatchers[receiptId] = callback;\n  }\n\n  public subscribe(destination: string, callback: messageCallbackType, headers: StompHeaders = {}): StompSubscription {\n    if (!headers.id) {\n      headers.id = `sub-${this._counter++}`;\n    }\n    headers.destination = destination;\n    this._subscriptions[headers.id] = callback;\n    this._transmit({command: \"SUBSCRIBE\", headers: headers});\n    const client = this;\n    return {\n      id: headers.id,\n\n      unsubscribe(hdrs) {\n        return client.unsubscribe(headers.id, hdrs);\n      }\n    };\n  }\n\n  public unsubscribe(id: string, headers: StompHeaders = {}): void {\n    if (headers == null) {\n      headers = {};\n    }\n    delete this._subscriptions[id];\n    headers.id = id;\n    this._transmit({command: \"UNSUBSCRIBE\", headers: headers});\n  }\n\n  public begin(transactionId: string): Transaction {\n    const txId = transactionId || (`tx-${this._counter++}`);\n    this._transmit({\n      command: \"BEGIN\", headers: {\n        transaction: txId\n      }\n    });\n    const client = this;\n    return {\n      id: txId,\n      commit(): void {\n        client.commit(txId);\n      },\n      abort(): void {\n        client.abort(txId);\n      }\n    };\n  }\n\n  public commit(transactionId: string): void {\n    this._transmit({\n      command: \"COMMIT\", headers: {\n        transaction: transactionId\n      }\n    });\n  }\n\n  public abort(transactionId: string): void {\n    this._transmit({\n      command: \"ABORT\", headers: {\n        transaction: transactionId\n      }\n    });\n  }\n\n  public ack(messageId: string, subscriptionId: string, headers: StompHeaders = {}): void {\n    if (this._version === Versions.V1_2) {\n      headers[\"id\"] = messageId;\n    } else {\n      headers[\"message-id\"] = messageId;\n    }\n    headers.subscription = subscriptionId;\n    this._transmit({command: \"ACK\", headers: headers});\n  }\n\n  public nack(messageId: string, subscriptionId: string, headers: StompHeaders = {}): void {\n    if (this._version === Versions.V1_2) {\n      headers[\"id\"] = messageId;\n    } else {\n      headers[\"message-id\"] = messageId;\n    }\n    headers.subscription = subscriptionId;\n    return this._transmit({command: \"NACK\", headers: headers});\n  }\n\n}\n","/**\n * Supported STOMP versions\n */\nexport class Versions {\n  /**\n   * 1.0\n   */\n  static V1_0= '1.0';\n  /**\n   * 1.1\n   */\n  static V1_1= '1.1';\n  /**\n   * 1.2\n   */\n  static V1_2= '1.2';\n\n  /**\n   * @internal\n   */\n  static versions() {\n    return [Versions.V1_0, Versions.V1_1, Versions.V1_2]\n  }\n  /**\n   * @internal\n   */\n  static supportedVersions() {\n    return Versions.versions().join(',');\n  }\n  /**\n   * @internal\n   */\n  static protocolVersions() {\n    return Versions.versions().map(x => `v${x.replace('.', '')}.stomp`);\n  }\n}\n"],"sourceRoot":""}