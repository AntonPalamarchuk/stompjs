{"version":3,"sources":["webpack://StompJs/webpack/universalModuleDefinition","webpack://StompJs/webpack/bootstrap","webpack://StompJs/./src/versions.ts","webpack://StompJs/./src/compatibility/compat-client.ts","webpack://StompJs/./src/frame.ts","webpack://StompJs/./src/byte.ts","webpack://StompJs/./src/client.ts","webpack://StompJs/./src/compatibility/stomp.ts","webpack://StompJs/./src/stomp-handler.ts","webpack://StompJs/./src/index.ts"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Versions","versions","V1_0","V1_1","V1_2","supportedVersions","join","protocolVersions","map","x","replace","CompatClient","_super","webSocketFactory","_this","this","_heartbeatInfo","HeartbeatInfo","reconnect_delay","debug","message","_i","arguments","length","console","log","apply","__extends","_parseConnect","closeEventCallback","connectCallback","errorCallback","args","headers","connect","out","connectHeaders","onConnect","onStompError","onWebSocketClose","activate","disconnect","disconnectCallback","onDisconnect","disconnectHeaders","deactivate","send","destination","body","skipContentLengthHeader","publish","reconnectDelay","_webSocket","onUnhandledMessage","onUnhandledReceipt","heartbeatIncoming","incoming","heartbeatOutgoing","outgoing","Client","client","byte_1","Frame","params","command","escapeHeaderValues","toString","lines","_a","keys","name_1","push","frEscape","sizeOfUTF8","Byte","LF","encodeURI","match","unmarshallSingle","data","divider","search","RegExp","headerLines","substring","split","shift","trim","str","reverse","line","idx","indexOf","frUnEscape","start","len","parseInt","chr","end","asc","charAt","NULL","unmarshall","datas","frames","partial","slice","frame","last_frame","marshall","stomp_handler_1","conf","maxWebSocketFrameSize","_active","noOp","onUnhandledFrame","configure","_stompHandler","connected","version","undefined","assign","_connect","_createWebSocket","StompHandler","_disposeStompHandler","evt","_schedule_reconnect","webSocket","binaryType","_reconnector","setTimeout","clearTimeout","dispose","watchForReceipt","receiptId","callback","subscribe","unsubscribe","id","begin","transactionId","commit","abort","ack","messageId","subscriptionId","nack","versions_1","compat_client_1","Stomp","url","protocols","WebSocketClass","WebSocket","over","ws","ws_fn","frame_1","_client","config","_serverFrameHandlers","CONNECTED","server","_connected","_version","_escapeHeaderValues","_setupHeartbeat","MESSAGE","subscription","onReceive","_subscriptions","RECEIPT","_receiptWatchers","ERROR","_counter","_partialData","_lastServerActivityTS","Date","now","onmessage","ArrayBuffer","arr","Uint8Array","len1","j","results","String","fromCharCode","unmarshalledData","onclose","closeEvent","_cleanUp","onopen","_transmit","v","serverOutgoing","serverIncoming","ttl","Math","max","_pinger","setInterval","ttl_1","_ponger","delta","close","error","readyState","CONNECTING","OPEN","clearInterval","hdrs","txId","transaction","__export"],"mappings":"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","file":"stomp.umd.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"StompJs\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"StompJs\"] = factory();\n\telse\n\t\troot[\"StompJs\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 8);\n","/**\n * Supported STOMP versions\n */\nexport class Versions {\n  /**\n   * 1.0\n   */\n  static V1_0= '1.0';\n  /**\n   * 1.1\n   */\n  static V1_1= '1.1';\n  /**\n   * 1.2\n   */\n  static V1_2= '1.2';\n\n  /**\n   * @internal\n   */\n  static versions() {\n    return [Versions.V1_0, Versions.V1_1, Versions.V1_2]\n  }\n  /**\n   * @internal\n   */\n  static supportedVersions() {\n    return Versions.versions().join(',');\n  }\n  /**\n   * @internal\n   */\n  static protocolVersions() {\n    return Versions.versions().map(x => `v${x.replace('.', '')}.stomp`);\n  }\n}\n","import {Client} from \"../client\";\nimport {StompHeaders} from \"../stomp-headers\";\nimport {frameCallbackType, messageCallbackType} from \"../types\";\n\n/**\n * Available for backward compatibility, please shift to using {@link Client}.\n *\n * **Deprecated**\n */\nexport class CompatClient extends Client {\n\n  /**\n   * Available for backward compatibility, please shift to using {@link Client}\n   * and [Client#webSocketFactory]{@link Client#webSocketFactory}.\n   *\n   * **Deprecated**\n   */\n  constructor(webSocketFactory: () => any) {\n    super();\n    this.reconnect_delay = 0;\n    this.webSocketFactory = webSocketFactory;\n    // Default from previous version\n    this.debug = (...message: any[]) => {\n      console.log(...message);\n    };\n  }\n\n  private _parseConnect(...args: any[]): any {\n    let closeEventCallback, connectCallback, errorCallback;\n    let headers: StompHeaders = {};\n    if (args.length < 2) {\n      throw(\"Connect requires at least 2 arguments\");\n    }\n    if (typeof(args[1]) === 'function') {\n      [headers, connectCallback, errorCallback, closeEventCallback] = args;\n    } else {\n      switch (args.length) {\n        case 6:\n          [headers['login'], headers['passcode'], connectCallback, errorCallback, closeEventCallback, headers['host']] = args;\n          break;\n        default:\n          [headers['login'], headers['passcode'], connectCallback, errorCallback, closeEventCallback] = args;\n      }\n    }\n\n    return [headers, connectCallback, errorCallback, closeEventCallback];\n  }\n\n  /**\n   * Available for backward compatibility, please shift to using [Client#activate]{@link Client#activate}.\n   *\n   * **Deprecated**\n   *\n   * The `connect` method accepts different number of arguments and types. See the Overloads list. Use the\n   * version with headers to pass your broker specific options.\n   *\n   * overloads:\n   * - connect(headers, connectCallback)\n   * - connect(headers, connectCallback, errorCallback)\n   * - connect(login, passcode, connectCallback)\n   * - connect(login, passcode, connectCallback, errorCallback)\n   * - connect(login, passcode, connectCallback, errorCallback, closeEventCallback)\n   * - connect(login, passcode, connectCallback, errorCallback, closeEventCallback, host)\n   *\n   * params:\n   * - headers, see [Client#connectHeaders]{@link Client#connectHeaders}\n   * - connectCallback, see [Client#onConnect]{@link Client#onConnect}\n   * - errorCallback, see [Client#onStompError]{@link Client#onStompError}\n   * - closeEventCallback, see [Client#onWebSocketClose]{@link Client#onWebSocketClose}\n   * - login [String]\n   * - passcode [String]\n   * - host [String] Optional, virtual host to connect to. STOMP 1.2 makes it mandatory,\n   *                 however the broker may not mandate it\n   *\n   * ```javascript\n   *        client.connect('guest, 'guest', function(frame) {\n   *          client.debug(\"connected to Stomp\");\n   *          client.subscribe(destination, function(message) {\n   *            $(\"#messages\").append(\"<p>\" + message.body + \"</p>\\n\");\n   *          });\n   *        });\n   * ```\n   *\n   * Note: When auto reconnect is active, `connectCallback` and `errorCallback` will be called on each connect or error\n   *\n   * See also: [CONNECT Frame]{@link http://stomp.github.com/stomp-specification-1.2.html#CONNECT_or_STOMP_Frame}\n   */\n  public connect(...args: any[]): void {\n    const out = this._parseConnect(...args);\n\n    if (out[0]) { this.connectHeaders = out[0]; }\n    if (out[1]) { this.onConnect = out[1]; }\n    if (out[2]) { this.onStompError = out[2]; }\n    if (out[3]) { this.onWebSocketClose = out[3]; }\n\n    super.activate();\n  }\n\n  /**\n   * Available for backward compatibility, please shift to using [Client#activate]{@link Client#activate}.\n   *\n   * **Deprecated**\n   *\n   * See:\n   * [Client#onDisconnect]{@link Client#onDisconnect}, and\n   * [Client#disconnectHeaders]{@link Client#disconnectHeaders}\n   */\n  public disconnect(disconnectCallback?: any, headers: StompHeaders = {}): void {\n    if (disconnectCallback) {\n      this.onDisconnect = disconnectCallback;\n    }\n    this.disconnectHeaders = headers;\n\n    super.deactivate();\n  }\n\n  /**\n   * Available for backward compatibility, use [Client#publish]{@link Client#publish}.\n   *\n   * Send a message to a named destination. Refer to your STOMP broker documentation for types\n   * and naming of destinations. The headers will, typically, be available to the subscriber.\n   * However, there may be special purpose headers corresponding to your STOMP broker.\n   *\n   *  **Deprecated**, use [Client#publish]{@link Client#publish}\n   *\n   * Note: Body must be String. You will need to covert the payload to string in case it is not string (e.g. JSON)\n   *\n   * ```javascript\n   *        client.send(\"/queue/test\", {priority: 9}, \"Hello, STOMP\");\n   *\n   *        // If you want to send a message with a body, you must also pass the headers argument.\n   *        client.send(\"/queue/test\", {}, \"Hello, STOMP\");\n   * ```\n   *\n   * See: http://stomp.github.com/stomp-specification-1.2.html#SEND SEND Frame\n   */\n  public send(destination: string, headers: {[key:string]: any} = {}, body: string = ''): void {\n    const skipContentLengthHeader = (headers['content-length'] === false);\n    if (skipContentLengthHeader) {\n      delete headers['content-length'];\n    }\n    this.publish({\n      destination: destination,\n      headers: <StompHeaders>headers,\n      body: body,\n      skipContentLengthHeader: skipContentLengthHeader\n    });\n  }\n\n  /**\n   * Available for backward compatibility, renamed to [Client#reconnectDelay]{@link Client#reconnectDelay}.\n   *\n   * **Deprecated**\n   */\n  set reconnect_delay(value: number) {\n    this.reconnectDelay = value;\n  }\n\n  /**\n   * Available for backward compatibility, renamed to [Client#webSocket]{@link Client#webSocket}.\n   *\n   * **Deprecated**\n   */\n  get ws(): any {\n    return this._webSocket;\n  }\n\n  /**\n   * Available for backward compatibility, renamed to [Client#onUnhandledMessage]{@link Client#onUnhandledMessage}.\n   *\n   * **Deprecated**\n   */\n  get onreceive(): messageCallbackType {\n    return this.onUnhandledMessage;\n  }\n\n  /**\n   * Available for backward compatibility, renamed to [Client#onUnhandledMessage]{@link Client#onUnhandledMessage}.\n   *\n   * **Deprecated**\n   */\n  set onreceive(value: messageCallbackType) {\n    this.onUnhandledMessage = value;\n  }\n\n  /**\n   * Available for backward compatibility, renamed to [Client#onUnhandledReceipt]{@link Client#onUnhandledReceipt}.\n   * Prefer using [Client#watchForReceipt]{@link Client#watchForReceipt}.\n   *\n   * **Deprecated**\n   */\n  get onreceipt(): frameCallbackType {\n    return this.onUnhandledReceipt;\n  }\n\n  /**\n   * Available for backward compatibility, renamed to [Client#onUnhandledReceipt]{@link Client#onUnhandledReceipt}.\n   *\n   * **Deprecated**\n   */\n  set onreceipt(value: frameCallbackType) {\n    this.onUnhandledReceipt = value;\n  }\n\n  private _heartbeatInfo: HeartbeatInfo = new HeartbeatInfo(this);\n\n  /**\n   * Available for backward compatibility, renamed to [Client#heartbeatIncoming]{@link Client#heartbeatIncoming}\n   * [Client#heartbeatOutgoing]{@link Client#heartbeatOutgoing}.\n   *\n   * **Deprecated**\n   */\n  get heartbeat() {\n    return this._heartbeatInfo;\n  }\n\n  /**\n   * Available for backward compatibility, renamed to [Client#heartbeatIncoming]{@link Client#heartbeatIncoming}\n   * [Client#heartbeatOutgoing]{@link Client#heartbeatOutgoing}.\n   *\n   * **Deprecated**\n   */\n  set heartbeat(value: {incoming: number, outgoing: number}) {\n    this.heartbeatIncoming = value.incoming;\n    this.heartbeatOutgoing = value.outgoing;\n  }\n}\n\n/**\n * @internal\n */\nclass HeartbeatInfo {\n  constructor (private client: CompatClient) {\n  }\n\n  get outgoing(): number {\n    return this.client.heartbeatOutgoing;\n  }\n\n  set outgoing(value: number) {\n    this.client.heartbeatOutgoing = value;\n  }\n\n  get incoming(): number {\n    return this.client.heartbeatIncoming;\n  }\n\n  set incoming(value: number) {\n    this.client.heartbeatIncoming = value;\n  }\n}","import {StompHeaders} from \"./stomp-headers\";\nimport {Byte} from \"./byte\";\n\ntype unmarshallResults = { frames: Frame[]; partial: string };\n\n/**\n * Frame class represents a STOMP frame. Many of the callbacks pass the Frame received from\n * the STOMP broker. For advanced usage you might need to access [headers]{@link Frame#headers}.\n *\n * {@link Message} is an extended Frame.\n *\n * See: http://stomp.github.com/stomp-specification-1.2.html#STOMP_Frames STOMP Frame\n */\nexport class Frame {\n  /**\n   * STOMP Command\n   */\n  public command: string;\n\n  /**\n   * Headers, key value pairs.\n   */\n  public headers: StompHeaders;\n\n  /**\n   * It is serialized string\n   */\n  public body: any;\n\n  private escapeHeaderValues: boolean;\n  private skipContentLengthHeader: boolean;\n\n  /**\n   * Frame constructor. `command`, `headers` and `body` are available as properties.\n   *\n   * @internal\n   */\n  constructor(params: {\n    command: string, headers?: StompHeaders, body: any,\n    escapeHeaderValues?: boolean, skipContentLengthHeader?: boolean\n  }) {\n    let {command, headers, body, escapeHeaderValues, skipContentLengthHeader} = params;\n    this.command = command;\n    this.headers = headers || {};\n    this.body = body || '';\n    this.escapeHeaderValues = escapeHeaderValues || false;\n    this.skipContentLengthHeader =  skipContentLengthHeader || false;\n  }\n\n  /**\n   * @internal\n   */\n  public toString(): string {\n    const lines = [this.command];\n    if (this.skipContentLengthHeader) {\n      delete this.headers['content-length'];\n    }\n\n    for (let name of Object.keys(this.headers || {})) {\n      const value = this.headers[name];\n      if (this.escapeHeaderValues && (this.command !== 'CONNECT') && (this.command !== 'CONNECTED')) {\n        lines.push(`${name}:${Frame.frEscape(`${value}`)}`);\n      } else {\n        lines.push(`${name}:${value}`);\n      }\n    }\n    if (this.body && !this.skipContentLengthHeader) {\n      lines.push(`content-length:${Frame.sizeOfUTF8(this.body)}`);\n    }\n    lines.push(Byte.LF + this.body);\n    return lines.join(Byte.LF);\n  }\n\n  /**\n   * Compute the size of a UTF-8 string by counting its number of bytes\n   * (and not the number of characters composing the string)\n   */\n  private static sizeOfUTF8(s: string): number {\n    if (s) {\n      const matches = encodeURI(s).match(/%..|./g) || [];\n      return matches.length;\n    } else {\n      return 0;\n    }\n  }\n\n  /**\n   * deserialize a STOMP Frame from raw data.\n   *\n   * @internal\n   */\n  public static unmarshallSingle(data: any, escapeHeaderValues: boolean): Frame {\n    // search for 2 consecutives LF byte to split the command\n    // and headers from the body\n    const divider = data.search(new RegExp(`${Byte.LF}${Byte.LF}`));\n    const headerLines: string[] = data.substring(0, divider).split(Byte.LF);\n    const command = headerLines.shift();\n    const headers: StompHeaders = {};\n    // utility function to trim any whitespace before and after a string\n    const trim = (str: string): string => str.replace(/^\\s+|\\s+$/g, '');\n    // Parse headers in reverse order so that for repeated headers, the 1st\n    // value is used\n    for (let line of headerLines.reverse()) {\n      const idx = line.indexOf(':');\n\n      const key = trim(line.substring(0, idx));\n      let value = trim(line.substring(idx + 1));\n\n      if (escapeHeaderValues && (command !== 'CONNECT') && (command !== 'CONNECTED')) {\n        value = Frame.frUnEscape(value);\n      }\n\n      headers[key] = value;\n    }\n    // Parse body\n    // check for content-length or  topping at the first NULL byte found.\n    let body = '';\n    // skip the 2 LF bytes that divides the headers from the body\n    const start = divider + 2;\n    if (headers['content-length']) {\n      const len = parseInt(headers['content-length']);\n      body = (`${data}`).substring(start, start + len);\n    } else {\n      let chr = null;\n      for (let i = start, end = data.length, asc = start <= end; asc ? i < end : i > end; asc ? i++ : i--) {\n        chr = data.charAt(i);\n        if (chr === Byte.NULL) {\n          break;\n        }\n        body += chr;\n      }\n    }\n    return new Frame({command: command, headers: headers, body: body, escapeHeaderValues: escapeHeaderValues});\n  }\n\n  /**\n   * Split the data before unmarshalling every single STOMP frame.\n   * Web socket servers can send multiple frames in a single websocket message.\n   * If the message size exceeds the websocket message size, then a single\n   * frame can be fragmented across multiple messages.\n   *\n   * @internal\n   */\n  public static unmarshall(datas: any, escapeHeaderValues: boolean): unmarshallResults {\n    // Ugly list comprehension to split and unmarshall *multiple STOMP frames*\n    // contained in a *single WebSocket frame*.\n    // The data is split when a NULL byte (followed by zero or many LF bytes) is\n    // found\n    if (escapeHeaderValues == null) {\n      escapeHeaderValues = false;\n    }\n    const frames = datas.split(new RegExp(`${Byte.NULL}${Byte.LF}*`));\n\n    const r: unmarshallResults = {\n      frames: [],\n      partial: ''\n    };\n    r.frames = (frames.slice(0, -1).map((frame: Frame) => Frame.unmarshallSingle(frame, escapeHeaderValues)));\n\n    // If this contains a final full message or just a acknowledgement of a PING\n    // without any other content, process this frame, otherwise return the\n    // contents of the buffer to the caller.\n    const last_frame = frames.slice(-1)[0];\n\n    if ((last_frame === Byte.LF) || ((last_frame.search(new RegExp(`${Byte.NULL}${Byte.LF}*$`))) !== -1)) {\n      r.frames.push(Frame.unmarshallSingle(last_frame, escapeHeaderValues));\n    } else {\n      r.partial = last_frame;\n    }\n    return r;\n  }\n\n  /**\n   * Serialize a STOMP frame as per STOMP standards, suitable to be sent to the STOMP broker.\n   *\n   * @internal\n   */\n  public static marshall(params: {\n    command: string, headers?: StompHeaders, body: any,\n    escapeHeaderValues?: boolean, skipContentLengthHeader?: boolean\n  }) {\n    const frame = new Frame(params);\n    return frame.toString() + Byte.NULL;\n  }\n\n  /**\n   *  Escape header values\n   */\n  private static frEscape(str: string): string {\n    return str.replace(/\\\\/g, \"\\\\\\\\\").replace(/\\r/g, \"\\\\r\").replace(/\\n/g, \"\\\\n\").replace(/:/g, \"\\\\c\");\n  }\n\n  /**\n   * UnEscape header values\n   */\n  private static frUnEscape(str: string): string {\n    return str.replace(/\\\\r/g, \"\\r\").replace(/\\\\n/g, \"\\n\").replace(/\\\\c/g, \":\").replace(/\\\\\\\\/g, \"\\\\\");\n  }\n}\n","/**\n * Some byte values, used as per STOMP specifications.\n *\n * @internal\n */\nexport const Byte = {\n  // LINEFEED byte (octet 10)\n  LF: '\\x0A',\n  // NULL byte (octet 0)\n  NULL: '\\x00'\n};\n","import {StompHeaders} from \"./stomp-headers\";\nimport {StompSubscription} from \"./stomp-subscription\";\nimport {Transaction} from \"./transaction\";\nimport {closeEventCallbackType, debugFnType, frameCallbackType, messageCallbackType, publishParams} from \"./types\";\nimport {StompConfig} from './stomp-config';\nimport {StompHandler} from \"./stomp-handler\";\n\n/**\n * STOMP Client Class.\n */\nexport class Client {\n  /**\n   * This function should return a WebSocket or a similar (e.g. SockJS) object.\n   */\n  public webSocketFactory: () => any;\n\n  /**\n   *  automatically reconnect with delay in milliseconds, set to 0 to disable\n   */\n  public reconnectDelay: number = 5000;\n\n  /**\n   * Incoming heartbeat interval in milliseconds. Set to 0 to disable\n   */\n  public heartbeatIncoming: number = 10000;\n\n  /**\n   * Outgoing heartbeat interval in milliseconds. Set to 0 to disable\n   */\n  public heartbeatOutgoing: number = 10000;\n\n  // public heartbeat: { outgoing: number; incoming: number };\n\n  /**\n   * Maximum WebSocket frame size sent by the client. If the STOMP frame\n   * is bigger than this value, the STOMP frame will be sent using multiple\n   * WebSocket frames (default is 16KiB)\n   */\n  public maxWebSocketFrameSize: number = 16 * 1024;\n\n  /**\n   * Underlying WebSocket instance, READONLY\n   */\n  get webSocket(): WebSocket {\n    return this._webSocket;\n  }\n  /**\n   * Underlying WebSocket instance\n   * @internal\n   */\n  protected _webSocket: WebSocket;\n\n  /**\n   * Connection headers, important keys - `login`, `passcode`, `host`\n   */\n  public connectHeaders: StompHeaders;\n\n  /**\n   * Disconnection headers\n   */\n  public disconnectHeaders: StompHeaders;\n\n  /**\n   * This function will be called for any unhandled messages. It is useful to receive messages sent to\n   * temporary queues (for example RabbitMQ supports such queues).\n   *\n   * It can also be called for stray messages while the server is processing a request to unsubcribe\n   * from an endpoint.\n   */\n  public onUnhandledMessage: messageCallbackType;\n\n  /**\n   * STOMP brokers can be requested to notify when an operation is actually completed.\n   * Prefer using [Client#watchForReceipt]{@link Client#watchForReceipt}. See\n   * [Client#watchForReceipt]{@link Client#watchForReceipt} for examples.\n   */\n  public onUnhandledReceipt: frameCallbackType;\n\n  /**\n   * Will be invoked if we receive an unknown frame type from the STOMP broker\n   */\n  public onUnhandledFrame: frameCallbackType;\n\n  /**\n   * `true` if there is a active connection with STOMP Broker\n   */\n  get connected(): boolean {\n    return (!!this._stompHandler) && this._stompHandler.connected;\n  }\n\n  /**\n   * Callback, invoked on every successful connection to the STOMP broker.\n   *\n   * The actual frame is passed as parameter to the callback.\n   */\n  public onConnect: frameCallbackType;\n\n  /**\n   * Callback, invoked on every successful disconnection from the STOMP broker. It will not be invoked if\n   * the STOMP broker disconnected due to an error.\n   *\n   * The actual frame is passed as parameter to the callback.\n   *\n   * The way STOMP protocol is designed, the connection may close/terminate without the client\n   * receiving the DISCONNECT frame.\n   * You might find [Client#onWebSocketClose]{@link Client#onWebSocketClose} more appropriate.\n   */\n  public onDisconnect: frameCallbackType;\n\n  /**\n   * Callback, invoked on an ERROR frame received from the STOMP Broker.\n   * A compliant STOMP Broker will close the connection after this type of frame.\n   *\n   * The actual frame is passed as parameter to the callback.\n   *\n   * See https://stomp.github.io/stomp-specification-1.2.html#ERROR.\n   */\n  public onStompError: frameCallbackType;\n\n  /**\n   * Callback, invoked when underlying WebSocket is closed.\n   *\n   * Actual `event` is passed as parameter to the callback.\n   */\n  public onWebSocketClose: closeEventCallbackType;\n\n  /**\n   * By default, debug messages are discarded. To log to `console` following can be used:\n   *\n   * ```javascript\n   *        client.debug = function(str) {\n   *          console.log(str);\n   *        };\n   * ```\n   *\n   * This method is called for every actual transmission of the STOMP frames over the\n   * WebSocket.\n   */\n  public debug: debugFnType;\n\n  /**\n   * version of STOMP protocol negotiated with the server, READONLY\n   */\n  get version(): string {\n    return this._stompHandler ? this._stompHandler.version : undefined;\n  }\n\n  private _stompHandler: StompHandler;\n\n  private _active: boolean = false;\n  private _reconnector: any;\n\n  /**\n   * Create an instance.\n   */\n  constructor(conf: StompConfig = {}) {\n    // Dummy callbacks\n    const noOp = () => {};\n    this.debug = noOp;\n    this.onConnect = noOp;\n    this.onDisconnect = noOp;\n    this.onUnhandledMessage = noOp;\n    this.onUnhandledReceipt = noOp;\n    this.onUnhandledFrame = noOp;\n    this.onStompError = noOp;\n    this.onWebSocketClose = noOp;\n\n    // These parameters would typically get proper values before connect is called\n    this.connectHeaders = {};\n    this.disconnectHeaders = {};\n    this.webSocketFactory = () => null;\n\n    // Apply configuration\n    this.configure(conf);\n  }\n\n  /**\n   * Update configuration. See {@link StompConfig} for details of configuration options.\n   */\n  public configure(conf: StompConfig): void {\n    // bulk assign all properties to this\n    (<any>Object).assign(this, conf);\n  }\n\n  /**\n   * Initiate the connection. If the connection breaks it will keep trying to reconnect.\n   *\n   * Call [Client#deactivate]{@link Client#deactivate} to disconnect and stop reconnection attempts.\n   */\n  public activate(): void {\n    // Indicate that this connection is active (it will keep trying to connect)\n    this._active = true;\n\n    this._connect();\n  }\n\n  private _connect(): void {\n    if (!this._active) {\n      this.debug('Client has been marked inactive, will not attempt to connect');\n      return;\n    }\n\n    if (this.connected) {\n      this.debug('STOMP: already connected, nothing to do');\n      return;\n    }\n\n    this.debug(\"Opening Web Socket...\");\n\n    // Get the actual Websocket (or a similar object)\n    this._webSocket = this._createWebSocket();\n\n    this._stompHandler = new StompHandler(this, this._webSocket, {\n      debug: this.debug,\n      connectHeaders: this.connectHeaders,\n      disconnectHeaders: this.disconnectHeaders,\n      heartbeatIncoming: this.heartbeatIncoming,\n      heartbeatOutgoing: this.heartbeatOutgoing,\n      maxWebSocketFrameSize: this.maxWebSocketFrameSize,\n      onConnect: (frame) => {\n        if (!this._active) {\n          this.debug('STOMP got connected while deactivate was issued, will disconnect now');\n          this._disposeStompHandler();\n          return;\n        }\n        this.onConnect(frame);\n      },\n      onDisconnect: (frame) => {\n        this.onDisconnect(frame);\n      },\n      onStompError: (frame) => {\n        this.onStompError(frame);\n      },\n      onWebSocketClose: (evt) => {\n        this.onWebSocketClose(evt);\n        if (this._active) {\n          this._schedule_reconnect();\n        }\n      },\n      onUnhandledMessage: (message) => {\n        this.onUnhandledMessage(message);\n      },\n      onUnhandledReceipt: (frame) => {\n        this.onUnhandledReceipt(frame);\n      },\n      onUnhandledFrame: (frame) => {\n        this.onUnhandledFrame(frame);\n      }\n    });\n\n    this._stompHandler.start();\n  }\n\n  private _createWebSocket() {\n    const webSocket = this.webSocketFactory();\n    webSocket.binaryType = \"arraybuffer\";\n    return webSocket;\n  }\n\n  private _schedule_reconnect(): void {\n    if (this.reconnectDelay > 0) {\n      this.debug(`STOMP: scheduling reconnection in ${this.reconnectDelay}ms`);\n\n      this._reconnector = setTimeout(() => {\n        this._connect();\n      }, this.reconnectDelay);\n    }\n  }\n\n  /**\n   * Disconnect and stop auto reconnect loop.\n   *\n   * Appropriate callbacks will be invoked if underlying STOMP connection is connected.\n   *\n   * See: http://stomp.github.com/stomp-specification-1.2.html#DISCONNECT\n   */\n  public deactivate(): void {\n    // indicate that auto reconnect loop should terminate\n    this._active = false;\n\n    // Clear if a reconnection was scheduled\n    if (this._reconnector) {\n      clearTimeout(this._reconnector);\n    }\n    this._disposeStompHandler();\n  }\n\n  private _disposeStompHandler() {\n    // Dispose STOMP Handler\n    if (this._stompHandler) {\n      this._stompHandler.dispose();\n      this._stompHandler = null;\n    }\n  }\n\n  /**\n   * Send a message to a named destination. Refer to your STOMP broker documentation for types\n   * and naming of destinations. The headers will, typically, be available to the subscriber.\n   * However, there may be special purpose headers corresponding to your STOMP broker.\n   *\n   * Note: Body must be String. You will need to covert the payload to string in case it is not string (e.g. JSON)\n   *\n   * ```javascript\n   *        client.send({destination: \"/queue/test\", headers: {priority: 9}, body: \"Hello, STOMP\"});\n   *\n   *        // Only destination is mandatory parameter\n   *        client.send({destination: \"/queue/test\", body: \"Hello, STOMP\"});\n   * ```\n   *\n   * See: http://stomp.github.com/stomp-specification-1.2.html#SEND SEND Frame\n   */\n  public publish(params: publishParams) {\n    this._stompHandler.publish(params);\n  }\n\n  /**\n   * Watch for a receipt, callback will receive the STOMP frame as parameter.\n   *\n   * The receipt id needs to be unique for each use. Typically a sequence, a UUID, a\n   * random number or a combination would be used.\n   *\n   * Example:\n   * ```javascript\n   *        // Receipt for Subscription\n   *        let receiptId = randomText();\n   *\n   *        client.watchForReceipt(receiptId, function() {\n   *          // Will be called after server acknowledges\n   *        });\n   *\n   *        client.subscribe(TEST.destination, onMessage, {receipt: receiptId});\n   *\n   *        // Receipt for message send\n   *        receiptId = randomText();\n   *\n   *        client.watchForReceipt(receiptId, function() {\n   *          // Will be called after server acknowledges\n   *        });\n   *        client.send(TEST.destination, {receipt: receiptId}, msg);\n   * ```\n   */\n  public watchForReceipt(receiptId: string, callback: frameCallbackType): void {\n    this._stompHandler.watchForReceipt(receiptId, callback);\n  }\n\n  /**\n   * Subscribe to a STOMP Broker location. The callbck will be invoked for each received message with\n   * the {@link Message} as argument.\n   *\n   * Note: The library will generate an unique ID if there is none provided in the headers.\n   *       To use your own ID, pass it using the headers argument.\n   *\n   * ```javascript\n   *        callback = function(message) {\n   *        // called when the client receives a STOMP message from the server\n   *          if (message.body) {\n   *            alert(\"got message with body \" + message.body)\n   *          } else {\n   *            alert(\"got empty message\");\n   *          }\n   *        });\n   *\n   *        var subscription = client.subscribe(\"/queue/test\", callback);\n   *\n   *        // Explicit subscription id\n   *        var mySubId = 'my-subscription-id-001';\n   *        var subscription = client.subscribe(destination, callback, { id: mySubId });\n   * ```\n   *\n   * See: http://stomp.github.com/stomp-specification-1.2.html#SUBSCRIBE SUBSCRIBE Frame\n   */\n  public subscribe(destination: string, callback: messageCallbackType, headers: StompHeaders = {}): StompSubscription {\n    return this._stompHandler.subscribe(destination, callback, headers);\n  }\n\n  /**\n   * It is preferable to unsubscribe from a subscription by calling\n   * `unsubscribe()` directly on {@link StompSubscription} returned by `client.subscribe()`:\n   *\n   * ```javascript\n   *        var subscription = client.subscribe(destination, onmessage);\n   *        // ...\n   *        subscription.unsubscribe();\n   * ```\n   *\n   * See: http://stomp.github.com/stomp-specification-1.2.html#UNSUBSCRIBE UNSUBSCRIBE Frame\n   */\n  public unsubscribe(id: string, headers: StompHeaders = {}): void {\n    this._stompHandler.unsubscribe(id, headers);\n  }\n\n  /**\n   * Start a transaction, the returned {@link Transaction} has methods - [commit]{@link Transaction#commit}\n   * and [abort]{@link Transaction#abort}.\n   *\n   * See: http://stomp.github.com/stomp-specification-1.2.html#BEGIN BEGIN Frame\n   */\n  public begin(transactionId: string): Transaction {\n    return this._stompHandler.begin(transactionId);\n  }\n\n  /**\n   * Commit a transaction.\n   * It is preferable to commit a transaction by calling [commit]{@link Transaction#commit} directly on\n   * {@link Transaction} returned by [client.begin]{@link Client#begin}.\n   *\n   * ```javascript\n   *        var tx = client.begin(txId);\n   *        //...\n   *        tx.commit();\n   * ```\n   *\n   * See: http://stomp.github.com/stomp-specification-1.2.html#COMMIT COMMIT Frame\n   */\n  public commit(transactionId: string): void {\n    this._stompHandler.commit(transactionId);\n  }\n\n  /**\n   * Abort a transaction.\n   * It is preferable to abort a transaction by calling [abort]{@link Transaction#abort} directly on\n   * {@link Transaction} returned by [client.begin]{@link Client#begin}.\n   *\n   * ```javascript\n   *        var tx = client.begin(txId);\n   *        //...\n   *        tx.abort();\n   * ```\n   *\n   * See: http://stomp.github.com/stomp-specification-1.2.html#ABORT ABORT Frame\n   */\n  public abort(transactionId: string): void {\n    this._stompHandler.abort(transactionId);\n  }\n\n  /**\n   * ACK a message. It is preferable to acknowledge a message by calling [ack]{@link Message#ack} directly\n   * on the {@link Message} handled by a subscription callback:\n   *\n   * ```javascript\n   *        var callback = function (message) {\n   *          // process the message\n   *          // acknowledge it\n   *          message.ack();\n   *        };\n   *        client.subscribe(destination, callback, {'ack': 'client'});\n   * ```\n   *\n   * See: http://stomp.github.com/stomp-specification-1.2.html#ACK ACK Frame\n   */\n  public ack(messageId: string, subscriptionId: string, headers: StompHeaders = {}): void {\n    this._stompHandler.ack(messageId, subscriptionId, headers);\n  }\n\n  /**\n   * NACK a message. It is preferable to acknowledge a message by calling [nack]{@link Message#nack} directly\n   * on the {@link Message} handled by a subscription callback:\n   *\n   * ```javascript\n   *        var callback = function (message) {\n   *          // process the message\n   *          // an error occurs, nack it\n   *          message.nack();\n   *        };\n   *        client.subscribe(destination, callback, {'ack': 'client'});\n   * ```\n   *\n   * See: http://stomp.github.com/stomp-specification-1.2.html#NACK NACK Frame\n   */\n  public nack(messageId: string, subscriptionId: string, headers: StompHeaders = {}): void {\n    this._stompHandler.nack(messageId, subscriptionId, headers);\n  }\n}","import {Versions} from \"../versions\";\nimport {CompatClient} from \"./compat-client\";\n\n/**\n * STOMP Class, acts like a factory to create {@link Client}.\n */\nexport class Stomp {\n  /**\n   * In case you need to use a non standard class for WebSocket.\n   *\n   * For example when using within NodeJS environment:\n   *\n   * ```javascript\n   *        StompJs = require('../../esm5/');\n   *        Stomp = StompJs.Stomp;\n   *        Stomp.WebSocketClass = require('websocket').w3cwebsocket;\n   * ```\n   */\n  public static WebSocketClass:any = null;\n\n  /**\n   * This method creates a WebSocket client that is connected to\n   * the STOMP server located at the url.\n   *\n   * ```javascript\n   *        var url = \"ws://localhost:61614/stomp\";\n   *        var client = Stomp.client(url);\n   * ```\n   */\n  public static client (url: string, protocols: string[]): CompatClient {\n    // This is a hack to allow another implementation than the standard\n    // HTML5 WebSocket class.\n    //\n    // It is possible to use another class by calling\n    //\n    //     Stomp.WebSocketClass = MozWebSocket\n    //\n    // *prior* to call `Stomp.client()`.\n    //\n    // This hack is deprecated and `Stomp.over()` method should be used\n    // instead.\n\n    // See remarks on the function Stomp.over\n    if (protocols == null) { protocols = Versions.protocolVersions(); }\n    const ws_fn= function() {\n      const klass = Stomp.WebSocketClass || WebSocket;\n      return new klass(url, protocols);\n    };\n\n    return new CompatClient(ws_fn);\n  }\n\n  /**\n   * This method is an alternative to [Stomp#client]{@link Stomp#client} to let the user\n   * specify the WebSocket to use (either a standard HTML5 WebSocket or\n   * a similar object).\n   *\n   * In order to support reconnection, the function Client._connect should be callable more than once. While reconnecting\n   * a new instance of underlying transport (TCP Socket, WebSocket or SockJS) will be needed. So, this function\n   * alternatively allows passing a function that should return a new instance of the underlying socket.\n   *\n   * ```javascript\n   *        var client = Stomp.over(function(){\n   *          return new WebSocket('ws://localhost:15674/ws')\n   *        });\n   * ```\n   */\n  public static over (ws: any): CompatClient {\n    const ws_fn = typeof(ws) === \"function\" ? ws : () => ws;\n\n    return new CompatClient(ws_fn);\n  }\n}\n","import {Client} from './client';\nimport {Byte} from \"./byte\";\nimport {Versions} from \"./versions\";\nimport {Message} from \"./message\";\nimport {Frame} from \"./frame\";\nimport {StompHeaders} from \"./stomp-headers\";\nimport {closeEventCallbackType, debugFnType, frameCallbackType, messageCallbackType, publishParams} from \"./types\";\nimport {StompSubscription} from \"./stomp-subscription\";\nimport {Transaction} from \"./transaction\";\nimport {StompConfig} from \"./stomp-config\";\n\n/**\n * The STOMP protocol handler\n *\n * @internal\n */\nexport class StompHandler {\n  public debug: debugFnType;\n\n  public connectHeaders: StompHeaders;\n\n  public disconnectHeaders: StompHeaders;\n\n  public heartbeatIncoming: number;\n\n  public heartbeatOutgoing: number;\n\n  public onUnhandledMessage: messageCallbackType;\n\n  public onUnhandledReceipt: frameCallbackType;\n\n  public onUnhandledFrame: frameCallbackType;\n\n  public maxWebSocketFrameSize: number;\n\n  public onConnect: frameCallbackType;\n\n  public onDisconnect: frameCallbackType;\n\n  public onStompError: frameCallbackType;\n\n  public onWebSocketClose: closeEventCallbackType;\n\n  get version(): string {\n    return this._version;\n  }\n  private _version: string;\n\n  get connected(): boolean {\n    return this._connected;\n  }\n\n  private _connected: boolean;\n\n  private readonly _subscriptions: { [key: string]: messageCallbackType };\n  private readonly _receiptWatchers: { [key: string]: frameCallbackType };\n  private _partialData: string;\n  private _escapeHeaderValues: boolean;\n  private _counter: number;\n  private _pinger: any;\n  private _ponger: any;\n  private _lastServerActivityTS: number;\n\n  constructor(private _client: Client, private _webSocket: WebSocket, config: StompConfig = {}) {\n    // used to index subscribers\n    this._counter = 0;\n\n    // subscription callbacks indexed by subscriber's ID\n    this._subscriptions = {};\n\n    // receipt-watchers indexed by receipts-ids\n    this._receiptWatchers = {};\n\n    this._partialData = '';\n\n    this._escapeHeaderValues = false;\n\n    this._lastServerActivityTS = Date.now();\n\n    this.configure(config);\n  }\n\n  public configure(conf: StompConfig): void {\n    // bulk assign all properties to this\n    (<any>Object).assign(this, conf);\n  }\n\n  public start(): void {\n    this._webSocket.onmessage = (evt: any) => {\n      this.debug('Received data');\n      const data = (() => {\n        if ((typeof(ArrayBuffer) !== 'undefined') && evt.data instanceof ArrayBuffer) {\n          // the data is stored inside an ArrayBuffer, we decode it to get the\n          // data as a String\n          const arr = new Uint8Array(evt.data);\n          this.debug(`--- got data length: ${arr.length}`);\n          // Return a string formed by all the char codes stored in the Uint8array\n          let j, len1, results;\n          results = [];\n          for (j = 0, len1 = arr.length; j < len1; j++) {\n            const c = arr[j];\n            results.push(String.fromCharCode(c));\n          }\n\n          return results.join('');\n        } else {\n          // take the data directly from the WebSocket `data` field\n          return evt.data;\n        }\n      })();\n\n      this._lastServerActivityTS = Date.now();\n\n      if (data === Byte.LF) { // heartbeat\n        this.debug(\"<<< PONG\");\n        return;\n      }\n\n      this.debug(`<<< ${data}`);\n      // Handle STOMP frames received from the server\n      // The unmarshall function returns the frames parsed and any remaining\n      // data from partial frames.\n      const unmarshalledData = Frame.unmarshall(this._partialData + data, this._escapeHeaderValues);\n      this._partialData = unmarshalledData.partial;\n      for (let frame of unmarshalledData.frames) {\n        const serverFrameHandler= this._serverFrameHandlers[frame.command] || this.onUnhandledFrame;\n\n        serverFrameHandler(frame);\n      }\n    };\n\n    this._webSocket.onclose = (closeEvent: any): void => {\n      this.debug(`Connection closed to ${this._webSocket.url}`);\n      this.onWebSocketClose(closeEvent);\n      this._cleanUp();\n    };\n\n    this._webSocket.onopen = () => {\n      this.debug('Web Socket Opened...');\n      this.connectHeaders[\"accept-version\"] = Versions.supportedVersions();\n      this.connectHeaders[\"heart-beat\"] = [this.heartbeatOutgoing, this.heartbeatIncoming].join(',');\n      this._transmit({command: \"CONNECT\", headers: this.connectHeaders});\n    };\n  }\n\n  private readonly _serverFrameHandlers: { [key: string]: frameCallbackType } = {\n\n    // [CONNECTED Frame](http://stomp.github.com/stomp-specification-1.2.html#CONNECTED_Frame)\n    'CONNECTED': (frame) => {\n      this.debug(`connected to server ${frame.headers.server}`);\n      this._connected = true;\n      this._version = frame.headers.version;\n      // STOMP version 1.2 needs header values to be escaped\n      if (this._version === Versions.V1_2) {\n        this._escapeHeaderValues = true;\n      }\n\n      this._setupHeartbeat(frame.headers);\n      this.onConnect(frame);\n    },\n\n    // [MESSAGE Frame](http://stomp.github.com/stomp-specification-1.2.html#MESSAGE)\n    \"MESSAGE\": (frame) => {\n      // the `onReceive` callback is registered when the client calls\n      // `subscribe()`.\n      // If there is registered subscription for the received message,\n      // we used the default `onReceive` method that the client can set.\n      // This is useful for subscriptions that are automatically created\n      // on the browser side (e.g. [RabbitMQ's temporary\n      // queues](http://www.rabbitmq.com/stomp.html)).\n      const subscription = frame.headers.subscription;\n      const onReceive = this._subscriptions[subscription] || this.onUnhandledMessage;\n      // bless the frame to be a Message\n      const message = <Message>frame;\n      let messageId: string;\n      const client = this;\n      if (this._version === Versions.V1_2) {\n        messageId = message.headers[\"ack\"];\n      } else {\n        messageId = message.headers[\"message-id\"];\n      }\n      // add `ack()` and `nack()` methods directly to the returned frame\n      // so that a simple call to `message.ack()` can acknowledge the message.\n      message.ack = (headers: StompHeaders = {}): void => {\n        return client.ack(messageId, subscription, headers);\n      };\n      message.nack = (headers: StompHeaders = {}): void => {\n        return client.nack(messageId, subscription, headers);\n      };\n      onReceive(message);\n    },\n\n    // [RECEIPT Frame](http://stomp.github.com/stomp-specification-1.2.html#RECEIPT)\n    \"RECEIPT\": (frame) => {\n      const callback = this._receiptWatchers[frame.headers[\"receipt-id\"]];\n      if (callback) {\n        callback(frame);\n        // Server will acknowledge only once, remove the callback\n        delete this._receiptWatchers[frame.headers[\"receipt-id\"]];\n      } else {\n        this.onUnhandledReceipt(frame);\n      }\n    },\n\n    // [ERROR Frame](http://stomp.github.com/stomp-specification-1.2.html#ERROR)\n    'ERROR': (frame) => {\n      this.onStompError(frame);\n    }\n  };\n\n  private _setupHeartbeat(headers: StompHeaders): void {\n    if ((headers.version !== Versions.V1_1 && headers.version !== Versions.V1_2)) {\n      return;\n    }\n\n    // heart-beat header received from the server looks like:\n    //\n    //     heart-beat: sx, sy\n    const [serverOutgoing, serverIncoming] = (headers['heart-beat']).split(\",\").map((v: string) => parseInt(v));\n\n    if ((this.heartbeatOutgoing !== 0) && (serverIncoming !== 0)) {\n      let ttl: number = Math.max(this.heartbeatOutgoing, serverIncoming);\n      this.debug(`send PING every ${ttl}ms`);\n      this._pinger = setInterval(() => {\n        this._webSocket.send(Byte.LF);\n        this.debug(\">>> PING\");\n      }, ttl);\n    }\n\n    if ((this.heartbeatIncoming !== 0) && (serverOutgoing !== 0)) {\n      let ttl: number = Math.max(this.heartbeatIncoming, serverOutgoing);\n      this.debug(`check PONG every ${ttl}ms`);\n      this._ponger = setInterval(() => {\n        const delta = Date.now() - this._lastServerActivityTS;\n        // We wait twice the TTL to be flexible on window's setInterval calls\n        if (delta > (ttl * 2)) {\n          this.debug(`did not receive server activity for the last ${delta}ms`);\n          this._webSocket.close();\n        }\n      }, ttl);\n    }\n  }\n\n  private _transmit(params: { command: string, headers?: StompHeaders, body?: string, skipContentLengthHeader?: boolean }): void {\n    let {command, headers, body, skipContentLengthHeader} = params;\n    let out = Frame.marshall({\n      command: command,\n      headers: headers,\n      body: body,\n      escapeHeaderValues: this._escapeHeaderValues,\n      skipContentLengthHeader: skipContentLengthHeader\n    });\n    this.debug(`>>> ${out}`);\n    // if necessary, split the *STOMP* frame to send it on many smaller\n    // *WebSocket* frames\n    while (true) {\n      if (out.length > this.maxWebSocketFrameSize) {\n        this._webSocket.send(out.substring(0, this.maxWebSocketFrameSize));\n        out = out.substring(this.maxWebSocketFrameSize);\n        this.debug(`remaining = ${out.length}`);\n      } else {\n        this._webSocket.send(out);\n        return;\n      }\n    }\n  }\n\n  public dispose(): void {\n    if (this.connected) {\n      try {\n        if (!this.disconnectHeaders['receipt']) {\n          this.disconnectHeaders['receipt'] = `close-${this._counter++}`;\n        }\n        this.watchForReceipt(this.disconnectHeaders['receipt'], (frame) => {\n          this._webSocket.close();\n          this._cleanUp();\n          this.onDisconnect(frame);\n        });\n        this._transmit({command: \"DISCONNECT\", headers: this.disconnectHeaders});\n      } catch (error) {\n        this.debug('Ignoring error during disconnect', error);\n      }\n    } else {\n      if (this._webSocket.readyState === WebSocket.CONNECTING || this._webSocket.readyState === WebSocket.OPEN) {\n        this._webSocket.close();\n      }\n    }\n  }\n\n  private _cleanUp() {\n    this._connected = false;\n\n    if (this._pinger) {\n      clearInterval(this._pinger);\n    }\n    if (this._ponger) {\n      clearInterval(this._ponger);\n    }\n  }\n\n  public publish(params: publishParams): void {\n    let {destination, headers, body, skipContentLengthHeader} = params;\n    headers = (<any>Object).assign({destination: destination}, headers);\n    this._transmit({command: \"SEND\", headers: headers, body: body, skipContentLengthHeader: skipContentLengthHeader});\n  }\n\n  public watchForReceipt(receiptId: string, callback: frameCallbackType): void {\n    this._receiptWatchers[receiptId] = callback;\n  }\n\n  public subscribe(destination: string, callback: messageCallbackType, headers: StompHeaders = {}): StompSubscription {\n    if (!headers.id) {\n      headers.id = `sub-${this._counter++}`;\n    }\n    headers.destination = destination;\n    this._subscriptions[headers.id] = callback;\n    this._transmit({command: \"SUBSCRIBE\", headers: headers});\n    const client = this;\n    return {\n      id: headers.id,\n\n      unsubscribe(hdrs) {\n        return client.unsubscribe(headers.id, hdrs);\n      }\n    };\n  }\n\n  public unsubscribe(id: string, headers: StompHeaders = {}): void {\n    if (headers == null) {\n      headers = {};\n    }\n    delete this._subscriptions[id];\n    headers.id = id;\n    this._transmit({command: \"UNSUBSCRIBE\", headers: headers});\n  }\n\n  public begin(transactionId: string): Transaction {\n    const txId = transactionId || (`tx-${this._counter++}`);\n    this._transmit({\n      command: \"BEGIN\", headers: {\n        transaction: txId\n      }\n    });\n    const client = this;\n    return {\n      id: txId,\n      commit(): void {\n        client.commit(txId);\n      },\n      abort(): void {\n        client.abort(txId);\n      }\n    };\n  }\n\n  public commit(transactionId: string): void {\n    this._transmit({\n      command: \"COMMIT\", headers: {\n        transaction: transactionId\n      }\n    });\n  }\n\n  public abort(transactionId: string): void {\n    this._transmit({\n      command: \"ABORT\", headers: {\n        transaction: transactionId\n      }\n    });\n  }\n\n  public ack(messageId: string, subscriptionId: string, headers: StompHeaders = {}): void {\n    if (this._version === Versions.V1_2) {\n      headers[\"id\"] = messageId;\n    } else {\n      headers[\"message-id\"] = messageId;\n    }\n    headers.subscription = subscriptionId;\n    this._transmit({command: \"ACK\", headers: headers});\n  }\n\n  public nack(messageId: string, subscriptionId: string, headers: StompHeaders = {}): void {\n    if (this._version === Versions.V1_2) {\n      headers[\"id\"] = messageId;\n    } else {\n      headers[\"message-id\"] = messageId;\n    }\n    headers.subscription = subscriptionId;\n    return this._transmit({command: \"NACK\", headers: headers});\n  }\n\n}\n","export * from './client';\nexport * from './frame';\nexport * from './message';\nexport * from './stomp-config';\nexport * from './stomp-headers';\nexport * from './stomp-subscription';\nexport * from './transaction';\nexport * from './types';\nexport * from './versions';\n\n// Compatibility code\nexport * from './compatibility/compat-client';\nexport * from './compatibility/stomp';\n"],"sourceRoot":""}